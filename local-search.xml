<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>模型调优-梯度下降</title>
    <link href="/posts/21024/"/>
    <url>/posts/21024/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><p>梯度下降（Gradient Descent）是一种常用的优化算法，广泛应用于机器学习和深度学习模型的训练过程中。其基本思想是通过迭代地调整模型参数，使得损失函数（Loss Function）逐步减小，从而找到最优参数。</p><h3 id="1-梯度下降的基本原理"><a href="#1-梯度下降的基本原理" class="headerlink" title="1. 梯度下降的基本原理"></a>1. 梯度下降的基本原理</h3><p>梯度下降的目标是最小化损失函数 ( L(\theta) )，其中 ( \theta ) 表示模型参数。其基本步骤如下：</p><ol><li><strong>初始化参数</strong>：随机初始化模型参数 ( \theta )。</li><li><strong>计算梯度</strong>：计算损失函数关于参数的梯度 ( \nabla_\theta L(\theta) )。</li><li><strong>更新参数</strong>：根据梯度更新参数：<br>[<br>\theta = \theta - \eta \nabla_\theta L(\theta)<br>]<br>其中，( \eta ) 是学习率（Learning Rate），控制每次更新的步长。</li><li><strong>迭代</strong>：重复步骤 2 和 3，直到损失函数收敛到一个较小的值或达到预设的迭代次数。</li></ol><h3 id="2-梯度下降的变种"><a href="#2-梯度下降的变种" class="headerlink" title="2. 梯度下降的变种"></a>2. 梯度下降的变种</h3><h4 id="批量梯度下降（Batch-Gradient-Descent）"><a href="#批量梯度下降（Batch-Gradient-Descent）" class="headerlink" title="批量梯度下降（Batch Gradient Descent）"></a>批量梯度下降（Batch Gradient Descent）</h4><ul><li><strong>特点</strong>：每次迭代使用整个训练集计算梯度。</li><li><strong>优点</strong>：收敛稳定。</li><li><strong>缺点</strong>：计算开销大，尤其是对于大数据集。</li></ul><h4 id="随机梯度下降（Stochastic-Gradient-Descent-SGD）"><a href="#随机梯度下降（Stochastic-Gradient-Descent-SGD）" class="headerlink" title="随机梯度下降（Stochastic Gradient Descent, SGD）"></a>随机梯度下降（Stochastic Gradient Descent, SGD）</h4><ul><li><strong>特点</strong>：每次迭代使用一个样本计算梯度。</li><li><strong>优点</strong>：计算速度快，能够逃脱局部最小值。</li><li><strong>缺点</strong>：收敛不稳定，损失函数波动较大。</li></ul><h4 id="小批量梯度下降（Mini-batch-Gradient-Descent）"><a href="#小批量梯度下降（Mini-batch-Gradient-Descent）" class="headerlink" title="小批量梯度下降（Mini-batch Gradient Descent）"></a>小批量梯度下降（Mini-batch Gradient Descent）</h4><ul><li><strong>特点</strong>：每次迭代使用一个小批量的样本计算梯度。</li><li><strong>优点</strong>：计算效率和收敛稳定性之间的折中，广泛应用于深度学习。</li></ul><h3 id="3-学习率的选择"><a href="#3-学习率的选择" class="headerlink" title="3. 学习率的选择"></a>3. 学习率的选择</h3><p>学习率 ( \eta ) 的选择对梯度下降的效果至关重要：</p><ul><li><strong>学习率过大</strong>：可能导致损失函数震荡或发散。</li><li><strong>学习率过小</strong>：收敛速度慢，可能陷入局部最小值。</li></ul><p>常用的学习率调整方法包括：</p><ul><li><strong>固定学习率</strong>：在整个训练过程中保持不变。</li><li><strong>学习率衰减</strong>：逐步减小学习率，如指数衰减。</li><li><strong>自适应学习率</strong>：如Adam、RMSprop等优化算法，自动调整学习率。</li></ul><h3 id="4-常用的梯度下降优化算法"><a href="#4-常用的梯度下降优化算法" class="headerlink" title="4. 常用的梯度下降优化算法"></a>4. 常用的梯度下降优化算法</h3><h4 id="Adam（Adaptive-Moment-Estimation）"><a href="#Adam（Adaptive-Moment-Estimation）" class="headerlink" title="Adam（Adaptive Moment Estimation）"></a>Adam（Adaptive Moment Estimation）</h4><p>Adam结合了动量（Momentum）和RMSprop的优点，能够自适应地调整学习率。其更新规则如下：<br>[<br>m_t = \beta_1 m_{t-1} + (1 - \beta_1) \nabla_\theta L(\theta)<br>]<br>[<br>v_t = \beta_2 v_{t-1} + (1 - \beta_2) (\nabla_\theta L(\theta))^2<br>]<br>[<br>\hat{m}_t = \frac{m_t}{1 - \beta_1^t}<br>]<br>[<br>\hat{v}_t = \frac{v_t}{1 - \beta_2^t}<br>]<br>[<br>\theta = \theta - \eta \frac{\hat{m}_t}{\sqrt{\hat{v}_t} + \epsilon}<br>]<br>其中，( \beta_1 ) 和 ( \beta_2 ) 是动量项的指数衰减率，( \epsilon ) 是一个小常数，用于防止除零错误。</p><p>参考文献：</p><ul><li>Kingma, D. P., &amp; Ba, J. (2014). Adam: A method for stochastic optimization. arXiv preprint arXiv:1412.6980.</li></ul><h4 id="RMSprop"><a href="#RMSprop" class="headerlink" title="RMSprop"></a>RMSprop</h4><p>RMSprop通过对梯度平方的指数加权移动平均来调整学习率：<br>[<br>E[\nabla_\theta L(\theta)^2]<em>t = \beta E[\nabla_\theta L(\theta)^2]</em>{t-1} + (1 - \beta) (\nabla_\theta L(\theta))^2<br>]<br>[<br>\theta = \theta - \eta \frac{\nabla_\theta L(\theta)}{\sqrt{E[\nabla_\theta L(\theta)^2]_t} + \epsilon}<br>]</p><p>参考文献：</p><ul><li>Tieleman, T., &amp; Hinton, G. (2012). Lecture 6.5-rmsprop: Divide the gradient by a running average of its recent magnitude. COURSERA: Neural Networks for Machine Learning, 4(2), 26-31.</li></ul><h3 id="5-梯度下降的局限性"><a href="#5-梯度下降的局限性" class="headerlink" title="5. 梯度下降的局限性"></a>5. 梯度下降的局限性</h3><ul><li><strong>局部最小值</strong>：梯度下降可能陷入局部最小值，尤其是在非凸损失函数中。</li><li><strong>鞍点</strong>：在高维空间中，梯度下降可能在鞍点处停滞。</li><li><strong>计算开销</strong>：对于大型数据集，梯度计算可能非常耗时。</li></ul><p>通过理解梯度下降及其变种和优化算法，可以更有效地训练机器学习和深度学习模型，提高模型的性能和收敛速度。如果有更多问题，请随时提问！</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LLM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Harmonyos基本知识点整理</title>
    <link href="/posts/49398/"/>
    <url>/posts/49398/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Harmonyos基本知识点整理"><a href="#Harmonyos基本知识点整理" class="headerlink" title="Harmonyos基本知识点整理"></a>Harmonyos基本知识点整理</h1><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><p>TypeScript中可以使用boolean来表示这个变量是布尔值，可以赋值为true或者false。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> isDone: <span class="hljs-built_in">boolean</span> = <span class="hljs-literal">false</span>;<br></code></pre></div></td></tr></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>TypeScript里的所有数字都是浮点数，这些浮点数的类型是 number。除了支持十进制，还支持二进制、八进制、十六进制。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> decLiteral: <span class="hljs-built_in">number</span> = <span class="hljs-number">2023</span>;<br><span class="hljs-keyword">let</span> binaryLiteral: <span class="hljs-built_in">number</span> = <span class="hljs-number">0b11111100111</span>;<br><span class="hljs-keyword">let</span> octalLiteral: <span class="hljs-built_in">number</span> = <span class="hljs-number">0o3747</span>;<br><span class="hljs-keyword">let</span> hexLiteral: <span class="hljs-built_in">number</span> = <span class="hljs-number">0x7e7</span>;<br></code></pre></div></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>TypeScript里使用 string表示文本数据类型， 可以使用双引号（ “）或单引号（’）表示字符串。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> name: <span class="hljs-built_in">string</span> = <span class="hljs-string">&quot;Jacky&quot;</span>;<br>name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>name = <span class="hljs-string">&#x27;Mick&#x27;</span>;<br></code></pre></div></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>TypeScrip有两种方式可以定义数组。 第一种，可以在元素类型后面接上 []，表示由此类型元素组成的一个数组。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> list: <span class="hljs-built_in">number</span>[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><p>第二种方式是使用数组泛型，Array&lt;元素类型&gt;。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> list: <span class="hljs-built_in">Array</span>&lt;<span class="hljs-built_in">number</span>&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br></code></pre></div></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 string和number类型的元组。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> x: [<span class="hljs-built_in">string</span>, <span class="hljs-built_in">number</span>];<br>x = [<span class="hljs-string">&#x27;hello&#x27;</span>, <span class="hljs-number">10</span>]; <span class="hljs-comment">// OK</span><br>x = [<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;hello&#x27;</span>]; <span class="hljs-comment">// Error</span><br></code></pre></div></td></tr></table></figure><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>enum类型是对JavaScript标准数据类型的一个补充，使用枚举类型可以为一组数值赋予友好的名字。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-built_in">enum</span> Color &#123;Red, Green, Blue&#125;;<br><span class="hljs-keyword">let</span> c: Color = Color.Green;<br></code></pre></div></td></tr></table></figure><h3 id="Unknown"><a href="#Unknown" class="headerlink" title="Unknown"></a>Unknown</h3><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。那么我们可以使用unknown类型来标记这些变量。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> notSure: unknown = <span class="hljs-number">4</span>;<br>notSure = <span class="hljs-string">&#x27;maybe a string instead&#x27;</span>;<br>notSure = <span class="hljs-literal">false</span>;<br></code></pre></div></td></tr></table></figure><h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>当一个函数没有返回值时，你通常会见到其返回值类型是 void。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>): <span class="hljs-title">void</span> </span>&#123;   <br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;This is function is void&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h3><p>TypeScript里，undefined和null两者各自有自己的类型分别叫做undefined和null。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> u: <span class="hljs-literal">undefined</span> = <span class="hljs-literal">undefined</span>;<br><span class="hljs-keyword">let</span> n: <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br></code></pre></div></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>联合类型（Union Types）表示取值可以为多种类型中的一种。</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">let</span> myFavoriteNumber: <span class="hljs-built_in">string</span> | <span class="hljs-built_in">number</span>;<br>myFavoriteNumber = <span class="hljs-string">&#x27;seven&#x27;</span>;<br>myFavoriteNumber = <span class="hljs-number">7</span>;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Harmonyos</tag>
      
      <tag>基本知识点</tag>
      
      <tag>ArkTs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apt/apt-get源配置</title>
    <link href="/posts/10888/"/>
    <url>/posts/10888/</url>
    
    <content type="html"><![CDATA[<p>在使用<a href="https://nerdvm.racknerd.com/">racknerd</a>家的服务器是出现了地址过时的问题，故整理</p><span id="more"></span><h1 id="apt-apt-get源配置"><a href="#apt-apt-get源配置" class="headerlink" title="apt/apt-get源配置"></a>apt/apt-get源配置</h1><h2 id="问题回顾"><a href="#问题回顾" class="headerlink" title="问题回顾"></a>问题回顾</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">E: Failed to fetch http://ftp.us.debian.org/debian/pool/main/c/cyrus-sasl2/libsasl2-2_2.1.26.dfsg1-13+deb8u1_amd64.deb  404  Not Found [IP: 64.50.233.100 80]<br>...<br><br>E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?<br></code></pre></div></td></tr></table></figure><p>基本上是这个问题，不断的更新原地址，发现这个问题一直复现，通过查阅得到以下解释：</p><blockquote><p>  这是一个错误消息，指出您尝试从某些软件源下载软件包时遇到了问题。错误消息中的“404 Not Found”和“403 Forbidden”表示您无法连接到软件源。</p><p>  您可以尝试检查您的网络连接是否正常，或者尝试使用其他软件源。如果您使用的是Debian操作系统，可以尝试使用Debian官方软件源。如果您使用的是Ubuntu操作系统，则可以尝试使用Ubuntu官方软件源或其他可用的软件源。</p></blockquote><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><p>我的思路是 软件的源出现问题，以至于404，所以解决方案是更换软件源。</p><p>解决中。。。。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java领域驱动模型</title>
    <link href="/posts/2585/"/>
    <url>/posts/2585/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="Java领域驱动模型"><a href="#Java领域驱动模型" class="headerlink" title="Java领域驱动模型"></a>Java领域驱动模型</h1><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>参考在MVC模式下的使用方式。</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202303221449889.jpg" alt="MVC模式视图"></p><blockquote><p><strong>简明扼要地综述如下</strong>：</p><ul><li>VO 用于后端向前端传输数据</li><li>DTO用于前端向后端传输数据</li><li>BO用于微服务之间传输数据</li><li>PO等同于Entity，DO是Entity的一种，三者用于表示数据库的一条记录，通常用Entity。</li></ul></blockquote><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="POJO-Plain-Ordinary-Java-Object"><a href="#POJO-Plain-Ordinary-Java-Object" class="headerlink" title="POJO (Plain Ordinary Java Object)"></a>POJO (Plain Ordinary Java Object)</h3><p>简单Java对象，POJO是指这样的java对象：</p><ul><li>访问修饰符</li><li>针对每一个参数定义get和set方法</li><li>没有继承任何类</li><li>没有实现任何接口</li><li>没有被其他框架侵入</li></ul><p>POJO严格地遵守简单对象的概念，而不具有业务逻辑处理的能力，而一些JavaBean中往往会封装一些简单逻辑，例如添加构造函数。</p><h3 id="VO-View-Object"><a href="#VO-View-Object" class="headerlink" title="VO(View Object)"></a>VO(View Object)</h3><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/east7/p/15057400.html">浅析领域驱动模型VO、DTO、BO、PO 等的概念、区别及其用法-楼兰胡杨</a></p><p><a href="https://mp.weixin.qq.com/s/nADrw8qukVKADJw7lQ5UKw">PO、VO、DAO、BO、DTO、POJO 能分清吗？-芋道源码</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL学习手册01</title>
    <link href="/posts/9190/"/>
    <url>/posts/9190/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>用户利用SQL命令与关系数据库进行交互时发生的事情。</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">CONNECT user@database<br></code></pre></div></td></tr></table></figure><h3 id="断开链接"><a href="#断开链接" class="headerlink" title="断开链接"></a>断开链接</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">DICCONNECT<br></code></pre></div></td></tr></table></figure><h2 id="命令类型"><a href="#命令类型" class="headerlink" title="命令类型"></a>命令类型</h2><ul><li>数据定义语言（DDL）</li><li>数据操作语言（DML)</li><li>数据查询语言（DQL）</li><li>数据控制语言（DCL）</li><li>数据管理语言 </li><li>事物控制语言</li></ul><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><ul><li>字段</li><li>记录</li><li>列</li><li>主键</li><li>NULL值</li></ul><h1 id="定义数据结构"><a href="#定义数据结构" class="headerlink" title="定义数据结构"></a>定义数据结构</h1>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/posts/1/"/>
    <url>/posts/1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker指令整理</title>
    <link href="/posts/51273/"/>
    <url>/posts/51273/</url>
    
    <content type="html"><![CDATA[<p>Docker指令整理。</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202211011104843.png" alt="docker"></p><span id="more"></span><h1 id="Docker指令整理"><a href="#Docker指令整理" class="headerlink" title="Docker指令整理"></a>Docker指令整理</h1><h2 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动镜像</span><br>systemctl start docker<br></code></pre></div></td></tr></table></figure><p>没有回显</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 查看版本信息</span><br>docker version<br><span class="hljs-meta">#</span><span class="bash"> 启动镜像为容器</span><br>docker run hello-world<br><span class="hljs-meta">#</span><span class="bash"> 查看已有镜像列表</span><br>docker images<br></code></pre></div></td></tr></table></figure><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202210251628792.png" alt="测试结果"></p><h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">systemctl stop docker<br>yum -y remove docker-ce docker-ce-cli containerd.io<br>rm -rf /var/lib/docker<br></code></pre></div></td></tr></table></figure><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 显示 Docker 版本信息。</span><br>docker version <br><span class="hljs-meta">#</span><span class="bash"> 显示 Docker 系统信息，包括镜像和容器数</span><br>docker info <br><span class="hljs-meta">#</span><span class="bash"> 帮助</span><br>docker --help <br></code></pre></div></td></tr></table></figure><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h4 id="查看-docker-images"><a href="#查看-docker-images" class="headerlink" title="查看 docker images"></a>查看 docker images</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker images<br><span class="hljs-meta">#</span><span class="bash"> 可选项</span><br>-a： 列出本地所有镜像<br>-q： 只显示镜像id<br>--digests： 显示镜像的摘要信息<br></code></pre></div></td></tr></table></figure><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202210251642709.png" alt="回显结果"></p><blockquote><p>同一个仓库源可以有多个 TAG，代表这个仓库源的不同版本，我们使用REPOSITORY：TAG 定义不同 的镜像。</p><p>如果你不定义镜像的标签版本，docker将默认使用 lastest 镜像！</p></blockquote><h4 id="搜索-docker-search"><a href="#搜索-docker-search" class="headerlink" title="搜索 docker search"></a>搜索 docker search</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 搜索镜像 在对应DockerHub中</span><br>docker search<br><span class="hljs-meta">#</span><span class="bash"> 可选项</span><br>--filter=stars=50 ： 列出收藏数不小于指定值的镜像。<br></code></pre></div></td></tr></table></figure><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202210251734012.png" alt="查询结果"></p><h4 id="下载-docker-pull"><a href="#下载-docker-pull" class="headerlink" title="下载 docker pull"></a>下载 docker pull</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 下载镜像</span><br>docker pull mysql<br><span class="hljs-meta">#</span><span class="bash"> 指定版本下载</span><br>docker pull mysql:5.7<br></code></pre></div></td></tr></table></figure><h4 id="删除-docker-rmi"><a href="#删除-docker-rmi" class="headerlink" title="删除 docker rmi"></a>删除 docker rmi</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">## 删除镜像</span></span><br><span class="hljs-meta">#</span><span class="bash"> 删除单个</span><br>docker rmi -f 镜像id <br><span class="hljs-meta">#</span><span class="bash"> 删除多个</span><br>docker rmi -f 镜像名:tag 镜像名:tag <br><span class="hljs-meta">#</span><span class="bash"> 删除全部</span><br>docker rmi -f $(docker images -qa) <br></code></pre></div></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><h3 id="新建并启动"><a href="#新建并启动" class="headerlink" title="新建并启动"></a>新建并启动</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span><br>docker run [OPTIONS] IMAGE [COMMAND][ARG...]<br><span class="hljs-meta">#</span><span class="bash"> 常用参数说明</span><br>--name=&quot;Name&quot; # 给容器指定一个名字<br>-d # 后台方式运行容器，并返回容器的id！<br>-i # 以交互模式运行容器，通过和 -t 一起使用<br>-t # 给容器重新分配一个终端，通常和 -i 一起使用<br>-P # 随机端口映射（大写）<br>-p # 指定端口映射（小结），一般可以有四种写法<br>    ip:hostPort:containerPort<br>    ip::containerPort<br>    hostPort:containerPort (常用)<br>    containerPort<br></code></pre></div></td></tr></table></figure><p><strong>示例</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使用centos进行用交互模式启动容器，在容器内执行/bin/bash命令！</span><br>[root@hecs-210950 ~]# docker run -it centos /bin/bash<br>Unable to find image &#x27;centos:latest&#x27; locally<br>latest: Pulling from library/centos<br>a1d0c7532777: Pull complete<br>Digest: sha256:a27fd8080b517143cbbbab9dfb7c8571c40d67d534bbdee55bd6c473f432b177<br>Status: Downloaded newer image for centos:latest<br>[root@517c2019a23b /]# whoami<br>root<br>[root@517c2019a23b /]# pwd<br>/<br>[root@517c2019a23b /]# ls<br>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br></code></pre></div></td></tr></table></figure><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202210260908542.png" alt="新建并进入容器"></p><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">exit # 容器停止退出<br>ctrl+P+Q # 容器不停止退出<br></code></pre></div></td></tr></table></figure><h3 id="列出"><a href="#列出" class="headerlink" title="列出"></a>列出</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span><br>docker ps [OPTIONS]<br><span class="hljs-meta">#</span><span class="bash"> 常用参数说明</span><br>-a # 列出当前所有正在运行的容器 + 历史运行过的容器<br>-l # 显示最近创建的容器<br>-n=? # 显示最近n个创建的容器<br>-q # 静默模式，只显示容器编号。<br></code></pre></div></td></tr></table></figure><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker start (容器id or 容器名) # 启动容器<br>docker restart (容器id or 容器名) # 重启容器<br>docker stop (容器id or 容器名) # 停止容器<br>docker kill (容器id or 容器名) # 强制停止容器<br>docker rm 容器id # 删除指定容器<br>docker rm -f $(docker ps -a -q) # 删除所有容器<br>docker ps -a -q|xargs docker rm # 删除所有容器<br></code></pre></div></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span><br>docker run -d 容器名<br><span class="hljs-meta">#</span><span class="bash"> 例子</span><br>docker run -d centos # 启动centos，使用后台方式启动<br><span class="hljs-meta">#</span><span class="bash"> 问题： 使用docker ps 查看，发现容器已经退出了！</span><br><span class="hljs-meta">#</span><span class="bash"> 解释：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命令，就会自动退出。</span><br><span class="hljs-meta">#</span><span class="bash"> 比如，你运行了nginx服务，但是docker前台没有运行应用，这种情况下，容器启动后，会立即自杀，因为他觉得没有程序了，所以最好的情况是，将你的应用使用前台进程的方式运行启动。</span><br></code></pre></div></td></tr></table></figure><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span><br>docker logs -f -t --tail 容器id<br><span class="hljs-meta">#</span><span class="bash"> 例子：我们启动 centos，并编写一段脚本来测试玩玩！最后查看日志</span><br><span class="hljs-meta">#</span><span class="bash"> -t 显示时间戳</span><br><span class="hljs-meta">#</span><span class="bash"> -f 打印最新的日志</span><br><span class="hljs-meta">#</span><span class="bash"> --tail 数字 显示多少条！</span><br></code></pre></div></td></tr></table></figure><p><strong>查看容器中运行的进程信息，支持 ps 命令参数</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span><br>docker top 容器id<br></code></pre></div></td></tr></table></figure><h4 id="查看容器-镜像的元数据"><a href="#查看容器-镜像的元数据" class="headerlink" title="查看容器/镜像的元数据"></a>查看容器/镜像的元数据</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span><br>docker inspect 容器id<br></code></pre></div></td></tr></table></figure><h4 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令1</span><br>docker exec -it 容器id bashShell<br><span class="hljs-meta">#</span><span class="bash"> 命令2</span><br>docker attach 容器id<br><span class="hljs-meta">#</span><span class="bash"> 区别</span><br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">exec</span> 是在容器中打开新的终端，并且可以启动新的进程</span><br><span class="hljs-meta">#</span><span class="bash"> attach 直接进入容器启动命令的终端，不会启动新的进程</span><br></code></pre></div></td></tr></table></figure><h4 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 命令</span><br>docker cp 容器id:容器内路径 目的主机路径<br></code></pre></div></td></tr></table></figure><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202210260954443.png" alt="小结"></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">attach #Attach to a running container # 当前 shell 下attach 连接指定运行镜像<br>build #Build an image from a Dockerfile # 通过 Dockerfile 定制镜像<br>commit #Create a new image from a container changes # 提交当前容器为新的镜像<br>cp Copy #files/folders from the containers filesystem to the host path #从容器中拷贝指定文件或者目录到宿主机中<br>create #Create a new container # 创建一个新的容器，同run，但不启动容器<br>diff #Inspect changes on a container&#x27;s filesystem # 查看 docker 容器变化<br>events #Get real time events from the server # 从 docker 服务获取容器实时事件<br>exec #Run a command in an existing container # 在已存在的容器上运行命令<br>export #Stream the contents of a container as a tar archive # 导出容器的内容流作为一个 tar 归档文件[对应 import ]<br>history #Show the history of an image # 展示一个镜像形成历史<br>images #List images # 列出系统当前镜像<br>import #Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]<br>info #Display system-wide information # 显示系统相关信息<br>inspect #Return low-level information on a container # 查看容器详细信息<br>kill #Kill a running container # kill 指定 docker 容器<br>load #Load an image from a tar archive # 从一个 tar 包中加载一个镜像[对应 save]<br>login #Register or Login to the docker registry server # 注册或者登陆一个docker 源服务器<br>logout #Log out from a Docker registry server # 从当前 Dockerregistry 退出<br>logs #Fetch the logs of a container # 输出当前容器日志信息<br>port #Lookup the public-facing port which is NAT-ed to PRIVATE_PORT #查看映射端口对应的容器内部源端口<br>pause #Pause all processes within a container # 暂停容器<br>ps #List containers # 列出容器列表<br>pull #Pull an image or a repository from the docker registry server #从docker镜像源服务器拉取指定镜像或者库镜像<br>push #Push an image or a repository to the docker registry server #推送指定镜像或者库镜像至docker源服务器<br>restart #Restart a running container # 重启运行的容器<br>rm #Remove one or more containers # 移除一个或者多个容器<br>rmi #Remove one or more images # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]<br>run #Run a command in a new container # 创建一个新的容器并运行<br>一个命令<br>save #Save an image to a tar archive # 保存一个镜像为一个 tar 包[对应 load]<br>search #Search for an image on the Docker Hub # 在 docker hub 中搜索镜像<br>start #Start a stopped containers # 启动容器<br>stop #Stop a running containers # 停止容器<br>tag #Tag an image into a repository # 给源中镜像打标签<br>top #Lookup the running processes of a container # 查看容器中运行的进程信息<br>unpause #Unpause a paused container # 取消暂停容器<br>version #Show the docker version information # 查看 docker 版本号<br>wait #Block until a container stops, then print its exit code # 截取容器停止时的退出状态值<br><br></code></pre></div></td></tr></table></figure><h2 id="镜像Commit"><a href="#镜像Commit" class="headerlink" title="镜像Commit"></a>镜像Commit</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker commit 提交容器副本使之成为一个新的镜像！<br><span class="hljs-meta">#</span><span class="bash"> 语法</span><br>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 要创建的目标镜像名:[标签名]<br></code></pre></div></td></tr></table></figure><h2 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>静态变量问题小记</title>
    <link href="/posts/15586/"/>
    <url>/posts/15586/</url>
    
    <content type="html"><![CDATA[<p>今天在公司和前辈讨论了一个代码规范的问题，是关于静态变量的，浅浅地记录一下讨论的结果。</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202303020918525.png" alt="要抱抱"></p><span id="more"></span><h1 id="静态变量问题小记"><a href="#静态变量问题小记" class="headerlink" title="静态变量问题小记"></a>静态变量问题小记</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>对于工具类等含有静态变量的类，其赋值方式最好用那种。</p><p>方案有两种：</p><ol><li>使用<code>Class.property = value</code> 直接进行赋值</li><li>使用get、set方法进行值的修改（等同使用Lombok）。</li></ol><h2 id="验证代码"><a href="#验证代码" class="headerlink" title="验证代码"></a>验证代码</h2><p>验证代码贴一下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> Class1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> by septzhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/10/24 21:08</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 测试static静态变量</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class1</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> flag = <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">getFlag</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setFlag</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span> flag)</span> </span>&#123;<br>        Class1.flag = flag;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Test1 test1 = <span class="hljs-keyword">new</span> Test1();<br>        Test2 test2 = <span class="hljs-keyword">new</span> Test2();<br><br>        test1.run();<br>        test2.run();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test1</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        Class1.flag = <span class="hljs-keyword">true</span>;<br>        Class1 class1 = <span class="hljs-keyword">new</span> Class1();<br>        System.out.println(<span class="hljs-string">&quot;test1-Class1.flag==&quot;</span> + Class1.flag);<br>        System.out.println(<span class="hljs-string">&quot;test1- class1.getFlag()==&quot;</span> + class1.getFlag());<br>        System.out.println(<span class="hljs-string">&quot;test1-Class1.flag == class1.getFlag()==&quot;</span> + Class1.flag == class1.getFlag() + <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test2</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br>        Class1 class1 = <span class="hljs-keyword">new</span> Class1();<br>        Class1 class2 = <span class="hljs-keyword">new</span> Class1();<br>        class1.setFlag(<span class="hljs-keyword">true</span>);<br>        class2.setFlag(<span class="hljs-keyword">false</span>);<br>        System.out.println(<span class="hljs-string">&quot;test2-class1.getFlag()==&quot;</span> + class1.getFlag());<br>        System.out.println(<span class="hljs-string">&quot;test2-class2.getFlag()==&quot;</span> + class2.getFlag());<br>        System.out.println(<span class="hljs-string">&quot;test2-class2.getFlag() == class2.getFlag()==&quot;</span> + class2.getFlag() == class2.getFlag()+<span class="hljs-string">&quot;&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;test2-Class1.flag == class1.getFlag()==&quot;</span> + Class1.flag == class1.getFlag() + <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="结果展示"><a href="#结果展示" class="headerlink" title="结果展示"></a>结果展示</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">test1-Class1.flag==true<br>test1- class1.getFlag()==true<br>false<br>test2-class1.getFlag()==false<br>test2-class2.getFlag()==false<br>false<br>false<br><br>Process finished with exit code 0<br></code></pre></div></td></tr></table></figure><h1 id="具体原因待整理"><a href="#具体原因待整理" class="headerlink" title="具体原因待整理"></a>具体原因待整理</h1>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>杂七杂八知识点</title>
    <link href="/posts/3198/"/>
    <url>/posts/3198/</url>
    
    <content type="html"><![CDATA[<p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202303020921241.png" alt="糖果罐"></p><span id="more"></span><h1 id="零碎知识点-装逼专用"><a href="#零碎知识点-装逼专用" class="headerlink" title="零碎知识点 装逼专用"></a>零碎知识点 装逼专用</h1><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li>SpringBoot 2.1 以上默认 MySQL8</li></ul><h2 id="MP"><a href="#MP" class="headerlink" title="MP"></a>MP</h2><ul><li>注入Mapper的三个注解：<code>@AutoWirte</code> 、<code>@Resource</code>、 <code>@QualiFiler</code> </li><li>Mapper类要么加<code>@Mapper</code>，要么在启动类加<code>@MapperScan()</code> </li><li><code>BaseMapper.insert(entity)</code> 成功（返回1）且回填id值到entity，且自动识别id属性，无需添加注解</li><li>提供日志输出，项目配置如下</li></ul><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># mybatis 日志</span><br><span class="hljs-meta">mybatis-plus.configuration.log-impl</span> = <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></div></td></tr></table></figure><ul><li>自带连接池-Hikari(光) 小日子过得不错的日本人发明的，据说世界最强</li><li>ID生成策略-主键策略：五个策略（AUTO、NONE、INPUT、<strong>ASSIGN_ID</strong>、ASSIGN_UUID）</li></ul><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202210102151436.png" alt="MP主键策略"></p><ul><li>MP自带分页功能<a href="#">使用示例</a>，</li></ul><ul><li></li></ul><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p>SpringBoot 2.1以上使用Junit5（以上）版本，包名改为<code>org.junit.jupiter.api</code> </p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>配置log4j详解</title>
    <link href="/posts/30399/"/>
    <url>/posts/30399/</url>
    
    <content type="html"><![CDATA[<p> 配置log4j详解</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202210072310466.jpeg" alt="log4j"></p><span id="more"></span><h1 id="log4j-简介"><a href="#log4j-简介" class="headerlink" title="log4j 简介"></a>log4j 简介</h1><p>主要三个重要组件：</p><ol><li>Loggers（记录器）： 日志类别和级别</li><li>Appenders（输出源）： 日志输出的位置</li><li>Layout（布局）： 日志的输出形式</li></ol><h2 id="Loggers-记录器"><a href="#Loggers-记录器" class="headerlink" title="Loggers-记录器"></a>Loggers-记录器</h2><p>根据日志信息的重要程度，存在五个级别（从高到低）：</p><ol><li>FATAL</li><li>ERROR</li><li>WARN</li><li>INFO</li><li>DEBUG</li></ol><p><strong>规则</strong></p><p>只输出级别不低于设定级别的日志。</p><p>若设定loogers 为INFO， 则DEBUG 级别不会输出 ，其余输出。</p><h2 id="Appends-输出源"><a href="#Appends-输出源" class="headerlink" title="Appends-输出源"></a>Appends-输出源</h2><p>log4j日志系统允许把日志输出到不同的地方，如控制台（Console）、文件（Files）等，可以根据天数或者文件大小产生新的文件，可以以流的形式发送到其它地方等等。</p><p>常用类：</p><ul><li>org.apache.log4j.ConsoleAppender（控制台）</li><li>org.apache.log4j.FileAppender（文件）</li><li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li><li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li><li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li></ul><h2 id="Layouts-输出格式"><a href="#Layouts-输出格式" class="headerlink" title="Layouts-输出格式"></a>Layouts-输出格式</h2><p>四中输出样式</p><ul><li>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</li><li>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</li><li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等信息）</li></ul><h1 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h1><p>要使Log4j在系统中运行须事先设定配置文件。配置文件事实上也就是对Logger、Appender及Layout进行相应设定。<br>Log4j支持两种配置文件格式:</p><ul><li>XML</li><li>properties</li></ul><h2 id="配置根Logger"><a href="#配置根Logger" class="headerlink" title="配置根Logger"></a>配置根Logger</h2><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">Copylog4j.rootLogger</span> = <span class="hljs-string">[ level ] , appenderName1, appenderName2, …</span><br><span class="hljs-meta">log4j.additivity.org.apache</span>=<span class="hljs-string">false：表示Logger不会在父Logger的appender里输出，默认为true。</span><br></code></pre></div></td></tr></table></figure><p><strong>1. level</strong> ：设定日志记录的最低级别，可设的值有OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL或者自定义的级别，Log4j<strong>建议只使用中间四个级别</strong>。通过在这里设定级别，您可以控制应用程序中相应级别的日志信息的开关，比如在这里设定了INFO级别，则应用程序中所有DEBUG级别的日志信息将不会被打印出来。</p><p><strong>2. appenderName</strong>：就是指定日志信息要输出到哪里。可以同时指定多个输出目的地，用逗号隔开。</p><p>例如：log4j.rootLogger＝INFO,A1,B2,C3</p><h3 id="配置日志信息输出目的地（appender）"><a href="#配置日志信息输出目的地（appender）" class="headerlink" title="配置日志信息输出目的地（appender）"></a>配置日志信息输出目的地（appender）</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">Copylog4j.appender.appenderName</span> = <span class="hljs-string">className</span><br></code></pre></div></td></tr></table></figure><p><strong>appenderName</strong>：自定义appderName，在log4j.rootLogger设置中使用；</p><p><strong>className：可设值如下：</strong></p><ol><li>org.apache.log4j.ConsoleAppender（控制台）</li><li>org.apache.log4j.FileAppender（文件）</li><li>org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）</li><li>org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）</li><li>org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）</li></ol><h3 id="ConsoleAppender选项"><a href="#ConsoleAppender选项" class="headerlink" title="ConsoleAppender选项"></a>ConsoleAppender选项</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="hljs-attr">Threshold</span>=<span class="hljs-string">WARN</span><br><span class="hljs-comment"># 表示所有消息都会被立即输出，设为false则不输出，默认值是true。</span><br><span class="hljs-attr">ImmediateFlush</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 默认值是System.out。</span><br><span class="hljs-attr">Target</span>=<span class="hljs-string">System.err</span><br></code></pre></div></td></tr></table></figure><h3 id="FileAppender选项"><a href="#FileAppender选项" class="headerlink" title="FileAppender选项"></a>FileAppender选项</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="hljs-attr">Threshold</span>=<span class="hljs-string">WARN</span><br><span class="hljs-comment"># 表示所有消息都会被立即输出，设为false则不输出，默认值是true。</span><br><span class="hljs-attr">ImmediateFlush</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</span><br><span class="hljs-attr">Append</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 指定消息输出到logging.log4j文件中。</span><br><span class="hljs-attr">File</span>=<span class="hljs-string">D:/logs/logging.log4j</span><br></code></pre></div></td></tr></table></figure><h3 id="DailyRollingFileAppender选项"><a href="#DailyRollingFileAppender选项" class="headerlink" title="DailyRollingFileAppender选项"></a>DailyRollingFileAppender选项</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="hljs-attr">Threshold</span>=<span class="hljs-string">WARN</span><br><span class="hljs-comment"># 表示所有消息都会被立即输出，设为false则不输出，默认值是true。</span><br><span class="hljs-attr">ImmediateFlush</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</span><br><span class="hljs-attr">Append</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 指定当前消息输出到logging.log4j文件中。</span><br><span class="hljs-attr">File</span>=<span class="hljs-string">D:/logs/logging.log4j</span><br><span class="hljs-comment"># 每月滚动一次日志文件，即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j，前一个月的日志文件名为logging.log4j.yyyy-MM。</span><br><span class="hljs-attr">DatePattern</span>=<span class="hljs-string">&#x27;.&#x27;yyyy-MM</span><br></code></pre></div></td></tr></table></figure><blockquote><p>按周、天、时、分等来滚动日志文件，对应的格式如下：</p><ol><li>‘.’yyyy-MM：每月</li><li>‘.’yyyy-ww：每周</li><li>‘.’yyyy-MM-dd：每天</li><li>‘.’yyyy-MM-dd-a：每天两次</li><li>‘.’yyyy-MM-dd-HH：每小时</li><li>‘.’yyyy-MM-dd-HH-mm：每分钟</li></ol></blockquote><h3 id="RollingFileAppender选项"><a href="#RollingFileAppender选项" class="headerlink" title="RollingFileAppender选项"></a>RollingFileAppender选项</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 指定日志信息的最低输出级别，默认为DEBUG。</span><br><span class="hljs-attr">Threshold</span>=<span class="hljs-string">WARN</span><br><span class="hljs-comment"># 表示所有消息都会被立即输出，设为false则不输出，默认值是true。</span><br><span class="hljs-attr">ImmediateFlush</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。</span><br><span class="hljs-attr">Append</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 指定消息输出到logging.log4j文件中。</span><br><span class="hljs-attr">File</span>=<span class="hljs-string">D:/logs/logging.log4j</span><br><span class="hljs-comment"># 后缀可以是KB, MB 或者GB。在日志文件到达该大小时，将会自动滚动，即将原来的内容移到logging.log4j.1文件中。</span><br><span class="hljs-attr">MaxFileSize</span>=<span class="hljs-string">100KB</span><br><span class="hljs-comment"># 指定可以产生的滚动文件的最大数，例如，设为2则可以产生logging.log4j.1，logging.log4j.2两个滚动文件和一个logging.log4j文件。</span><br><span class="hljs-attr">MaxBackupIndex</span>=<span class="hljs-string">2</span><br></code></pre></div></td></tr></table></figure><h2 id="配置日志信息的输出格式（Layout）"><a href="#配置日志信息的输出格式（Layout）" class="headerlink" title="配置日志信息的输出格式（Layout）"></a>配置日志信息的输出格式（Layout）</h2><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">Copylog4j.appender.appenderName.layout</span>=<span class="hljs-string">className</span><br></code></pre></div></td></tr></table></figure><p><strong>className：可设值如下：</strong></p><ol><li>org.apache.log4j.HTMLLayout（以HTML表格形式布局）</li><li>org.apache.log4j.PatternLayout（可以灵活地指定布局模式）</li><li>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）</li><li>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</li></ol><h3 id="HTMLLayout选项"><a href="#HTMLLayout选项" class="headerlink" title="HTMLLayout选项"></a>HTMLLayout选项</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 输出java文件名称和行号，默认值是false。</span><br><span class="hljs-attr">LocationInfo</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 默认值是Log4J Log Messages。</span><br><span class="hljs-attr">Title</span>=<span class="hljs-string">My Logging </span><br></code></pre></div></td></tr></table></figure><h3 id="PatternLayout选项"><a href="#PatternLayout选项" class="headerlink" title="PatternLayout选项"></a>PatternLayout选项</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 设定以怎样的格式显示消息。</span><br><span class="hljs-attr">ConversionPattern</span>=<span class="hljs-string">%m%n</span><br></code></pre></div></td></tr></table></figure><blockquote><p>格式化符号说明：</p><p>%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。</p><p>%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，</p><p>如：%d{yyyy/MM/dd HH:mm:ss,SSS}。</p><p>%r：输出自应用程序启动到输出该log信息耗费的毫秒数。</p><p>%t：输出产生该日志事件的线程名。</p><p>%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码</p><p>中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。</p><p>%c：输出日志信息所属的类目，通常就是所在类的全名。</p><p>%M：输出产生日志信息的方法名。</p><p>%F：输出日志消息产生时所在的文件名称。</p><p>%L:：输出代码中的行号。</p><p>%m:：输出代码中指定的具体日志信息。</p><p>%n：输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”。</p><p>%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用</p><p>中。</p><p>%%：输出一个”%”字符。</p></blockquote><blockquote><p>另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：</p><p>1）c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。</p><p>2）%-20c：”-“号表示左对齐。</p><p>3）%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。</p></blockquote><h1 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h1><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">Copy#############</span><br><span class="hljs-comment"># 输出到控制台</span><br><span class="hljs-comment">#############</span><br><br><span class="hljs-comment"># log4j.rootLogger日志输出类别和级别：只输出不低于该级别的日志信息DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span><br><span class="hljs-comment"># WARN：日志级别     CONSOLE：输出位置自己定义的一个名字       logfile：输出位置自己定义的一个名字</span><br><span class="hljs-meta">log4j.rootLogger</span>=<span class="hljs-string">WARN,CONSOLE,logfile</span><br><span class="hljs-comment"># 配置CONSOLE输出到控制台</span><br><span class="hljs-meta">log4j.appender.CONSOLE</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender </span><br><span class="hljs-comment"># 配置CONSOLE设置为自定义布局模式</span><br><span class="hljs-meta">log4j.appender.CONSOLE.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout </span><br><span class="hljs-comment"># 配置CONSOLE日志的输出格式  [frame] 2019-08-22 22:52:12,000  %r耗费毫秒数 %p日志的优先级 %t线程名 %C所属类名通常为全类名 %L代码中的行号 %x线程相关联的NDC %m日志 %n换行</span><br><span class="hljs-meta">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="hljs-string">[frame] %d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; - %-4r %-5p [%t] %C:%L %x - %m%n</span><br><br><span class="hljs-comment">################</span><br><span class="hljs-comment"># 输出到日志文件中</span><br><span class="hljs-comment">################</span><br><br><span class="hljs-comment"># 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生新的日志文件</span><br><span class="hljs-meta">log4j.appender.logfile</span>=<span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-comment"># 保存编码格式</span><br><span class="hljs-meta">log4j.appender.logfile.Encoding</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-comment"># 输出文件位置此为项目根目录下的logs文件夹中</span><br><span class="hljs-meta">log4j.appender.logfile.File</span>=<span class="hljs-string">logs/root.log</span><br><span class="hljs-comment"># 后缀可以是KB,MB,GB达到该大小后创建新的日志文件</span><br><span class="hljs-meta">log4j.appender.logfile.MaxFileSize</span>=<span class="hljs-string">10MB</span><br><span class="hljs-comment"># 设置滚定文件的最大值3 指可以产生root.log.1、root.log.2、root.log.3和root.log四个日志文件</span><br><span class="hljs-meta">log4j.appender.logfile.MaxBackupIndex</span>=<span class="hljs-string">3  </span><br><span class="hljs-comment"># 配置logfile为自定义布局模式</span><br><span class="hljs-meta">log4j.appender.logfile.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.logfile.layout.ConversionPattern</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n</span><br><br><span class="hljs-comment">##########################</span><br><span class="hljs-comment"># 对不同的类输出不同的日志文件</span><br><span class="hljs-comment">##########################</span><br><br><span class="hljs-comment"># club.bagedate包下的日志单独输出</span><br><span class="hljs-meta">log4j.logger.club.bagedate</span>=<span class="hljs-string">DEBUG,bagedate</span><br><span class="hljs-comment"># 设置为false该日志信息就不会加入到rootLogger中了</span><br><span class="hljs-meta">log4j.additivity.club.bagedate</span>=<span class="hljs-string">false</span><br><span class="hljs-comment"># 下面就和上面配置一样了</span><br><span class="hljs-meta">log4j.appender.bagedate</span>=<span class="hljs-string">org.apache.log4j.RollingFileAppender</span><br><span class="hljs-meta">log4j.appender.bagedate.Encoding</span>=<span class="hljs-string">UTF-8</span><br><span class="hljs-meta">log4j.appender.bagedate.File</span>=<span class="hljs-string">logs/bagedate.log</span><br><span class="hljs-meta">log4j.appender.bagedate.MaxFileSize</span>=<span class="hljs-string">10MB</span><br><span class="hljs-meta">log4j.appender.bagedate.MaxBackupIndex</span>=<span class="hljs-string">3</span><br><span class="hljs-meta">log4j.appender.bagedate.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><br><span class="hljs-meta">log4j.appender.bagedate.layout.ConversionPattern</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd HH:mm:ss&#125; %F %p %m%n</span><br><br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/marchxd/p/15941205.html">Log4j.properties配置详解</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>log4j</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nacos学习手册</title>
    <link href="/posts/44544/"/>
    <url>/posts/44544/</url>
    
    <content type="html"><![CDATA[<p> 关于nacos的基础知识学习手册</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202211011106974.png" alt="nacos"></p><span id="more"></span><h1 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>应用程序在启动和运行的时候往往需要读取一些<strong>配置信息</strong>。</p><ol><li>配置是独立于程序的 <strong>只读</strong> 变量</li><li>配置伴随应用的<strong>整个生命周期</strong></li><li>配置可以有多个加载方式<ul><li>常见：程序内部hard code、配置文件、环境变量、启动参数、基于数据库等方式</li></ul></li><li>配置需要治理<ul><li>同一程序在不同环境（开发、测试、生产）、不同集群需要管理治理</li></ul></li></ol><h2 id="配置中心-1"><a href="#配置中心-1" class="headerlink" title="配置中心"></a>配置中心</h2><p>微服务架构中，将各服务点（应用）的配置剥离出来，统一管理，应用不需要自身去配置管理。</p><h1 id="Nacos简介"><a href="#Nacos简介" class="headerlink" title="Nacos简介"></a>Nacos简介</h1><h2 id="主流的配置中心"><a href="#主流的配置中心" class="headerlink" title="主流的配置中心"></a>主流的配置中心</h2><ul><li>Spring Cloud Config</li><li>Apollo</li><li>Nacos</li><li>Discond（停止维护）</li></ul><p> 阿里的开源产品。</p><p>针对微服务架构中的服务发现（Nacos Discovery）、配置管理(Nacos Config)、服务治理提供综合性解决方案。</p><p>更新快 生命力强 性能高 </p><h2 id="Nacos特性"><a href="#Nacos特性" class="headerlink" title="Nacos特性"></a>Nacos特性</h2><p>四大特性</p><ol><li><p>服务发现与服务健康检查</p><p>是服务更容易注册，可以通过http和Dns接口发现其他服务提供服务的实时健康检查，防止向不健康的主机或服务实例发送请求。</p></li><li><p>动态配置管理</p><p>允许在所有环境中以集成和动态的方式管理所有服务的配置。不用因为更改配置而重新部署应用程序，使配置更改更加灵活和高效。</p></li><li><p>动态DNS服务</p><p>基于DNS协议的服务发现能力，旨在支持异构语言支持将注册在Nacos上的服务以域名的方式暴露端点，利于第三方应用的查阅及发现。 </p></li><li><p>服务和元数据管理</p><p>从微服务平台建设的视角管理数据中心的所有服务 及 元数据， 包括 管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略。</p></li></ol><h2 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h2><h3 id="Nacos注册中心"><a href="#Nacos注册中心" class="headerlink" title="Nacos注册中心"></a>Nacos注册中心</h3><h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>管理微服务、解决微服务之间调用关系错综复杂、难以维护的问题</p><iframe src="//player.bilibili.com/player.html?aid=299292776&bvid=BV1oF411L7wy&cid=726784272&page=2" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>注册中心存在注册表，存储服务提供者的信息</p><p>服务消费者可以利用 定时任务 在注册中心 服务获取接口 获取注册表缓存，减少Nacos并发。</p><p>服务提供者 利用定时任务 完成心跳检测，确保注册表信息的实时有效性。</p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><p>Alibaba-Discovery </p><h4 id="服务心跳"><a href="#服务心跳" class="headerlink" title="服务心跳"></a>服务心跳</h4><p>默5s/次。Nacos Client会维护一个定时心跳来持续通知Nacos Server，说明服务一直处于可用状态，防止被剔除。</p><h4 id="服务同步"><a href="#服务同步" class="headerlink" title="服务同步"></a>服务同步</h4><p>Nacos Server集群之间会相互同步服务实例，用来保证服务信息的一致性。</p><h4 id="服务发现-1"><a href="#服务发现-1" class="headerlink" title="服务发现"></a>服务发现</h4><p>服务消费者（Nacos Clint）在调用服务提供者时。会发送一个REST请求给Nacos Server 获取上面注册的服务清单，病患存在NacosClient本地，并在Nacos Client开启定时任务，定时拉取更新。</p><h4 id="服务健康检查"><a href="#服务健康检查" class="headerlink" title="服务健康检查"></a>服务健康检查</h4><p>Nacos开启定时任务来检测注册服务实例的健康，超时15s没有心跳，healthy改为false，超30s没有心跳，剔除。</p><h2 id="Server部署"><a href="#Server部署" class="headerlink" title="Server部署"></a>Server部署</h2><ol><li><p>下载<br><a href="https://github.com/alibaba/nacos/releases">GitHub下载地址</a></p></li><li><p>解压</p></li><li><p>修改配置<br>修改为单机启动</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202211021607011.png" alt="修改配置文件"></p></li></ol><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span> <span class="hljs-built_in">MODE</span>=&quot;cluster&quot;<br><span class="hljs-comment">rem 修改为</span><br><span class="hljs-comment">rem set MODE=&quot;standalone&quot;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习手册</tag>
      
      <tag>nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot配置环境隔离</title>
    <link href="/posts/4990/"/>
    <url>/posts/4990/</url>
    
    <content type="html"><![CDATA[<p>待补充</p><span id="more"></span><p>待补充</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring学习手册</title>
    <link href="/posts/45695/"/>
    <url>/posts/45695/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><p>Spring5</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><strong>轻量级</strong></p><p>jar包小，引用少</p><p><strong>开源</strong></p><p>免费提供源代码</p><p><strong>框架</strong></p><p>开发方便的工具</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>解决企业开封的复杂性</p><h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><p>控制反转。将对象的操作交给Spring进行管理。</p><h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>面向切面编程。在 不改变源代码的 条件下，经行功能增强</p><h3 id="webMVC、事务操作"><a href="#webMVC、事务操作" class="headerlink" title="webMVC、事务操作"></a>webMVC、事务操作</h3><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>AOP支持</li><li>方便程序测试</li><li>方便整合其他项目</li><li>降低 Java EE API 使用难度</li><li>方便事务操作</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p> Snapshot 快照版本</p><p>GA 稳定版</p></blockquote><p><a href="https://repo.spring.io/ui/repos/tree/General/release/org/springframework/spring">Spring repo ui</a></p><p><a href="https://repo.spring.io/ui/native/release/org/springframework/spring/">Spting repo</a></p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011518603.png" alt="仓库在Spring最新GA"></p><p>基础功能、核心模块</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011537037.png" alt="Spring核心模块"></p><p>对应核心模块</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011539586.png" alt="对应lib文件"></p><p>IOC功能所需基本包</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011546526.png" alt="ioc基本包"></p><p>手动给项目导入jar包</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011549780.png" alt="手动加包"></p><h1 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h1><h3 id="IOC-概念"><a href="#IOC-概念" class="headerlink" title="IOC 概念"></a>IOC 概念</h3><p>控制反转。把对象创建和对象之间的调用过程，交给Spring管理。</p><p>目的： 降低耦合性</p><h2 id="IOC底层原理"><a href="#IOC底层原理" class="headerlink" title="IOC底层原理"></a>IOC底层原理</h2><p>这要设计三个技术：：</p><h2 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h2><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>目的：降低耦合。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="IOC-过程"><a href="#IOC-过程" class="headerlink" title="IOC 过程"></a>IOC 过程</h3><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011922735.png" alt="第一步"></p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011922876.png" alt="第二部"> </p><h2 id="IOC接口（BeanFactory）"><a href="#IOC接口（BeanFactory）" class="headerlink" title="IOC接口（BeanFactory）"></a>IOC接口（BeanFactory）</h2><p>1.IOC 思想基于IOC容器完成，IOC容器底层就是对象工厂。</p><p>2.Spring提供IOC容器的两种实现方式（两个接口）：</p><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>IOC容器基本实现方式，是Spring内部使用接口，不提供开发人员使用（尽量，没有强规范）。</p><p><strong>特点</strong> 加载配置文件时，不会创建对象。在获取/使用对象时，才会创建对象。</p><h3 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h3><p>ApplicationContext 是BeanFactory的子接口，提供给开发人员使用。</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011943376.png" alt="BeanFactory 和 Application关系"></p><p><strong>特点</strong> 在加载配置文件时，已经完成对象创建。</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202209011935844.png" alt="ApplicationContext主要实现类"></p><p><strong>对比</strong></p><figure class="highlight abnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs abnf">FileSystemXmlApplicationContext(<span class="hljs-string">&quot;盘符路径&quot;</span>)<span class="hljs-comment">;</span><br>GenericApplicationContext(<span class="hljs-string">&quot;项目路径&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><h2 id="IOC操作-Bean-管理"><a href="#IOC操作-Bean-管理" class="headerlink" title="IOC操作 Bean 管理"></a>IOC操作 Bean 管理</h2><h3 id="什么是Bean管理"><a href="#什么是Bean管理" class="headerlink" title="什么是Bean管理"></a>什么是Bean管理</h3><p>Bean管理是两两个操作：</p><ol><li>Spring 创建对象</li><li>Spring 注入属性</li></ol><p>Bean管理方式有两种方式实现：</p><ol><li>基于XML配置文件方式</li><li>基于注解方式</li></ol><h3 id="基于xml"><a href="#基于xml" class="headerlink" title="基于xml"></a>基于xml</h3><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>在Spring配置文件中，使用<bean>标签，标签内添加对应属性，就可以实现对象创建。</p><p>常见的属性：</p><p>id属性： 唯一标识</p><p>class属性： 类的包名 </p><p>创建对象时候，默认也是执行无参构造方法完成对象创建。 </p><h3 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h3><p>DI：依赖注入，就是注入大属性</p><p>DI 是AOP 的一种具体实现。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>学习手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取配置文件变量工具类</title>
    <link href="/posts/27676/"/>
    <url>/posts/27676/</url>
    
    <content type="html"><![CDATA[<p>Springboot中获取配置文件变量的工具类。</p><p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202207252016637.png" alt="上天"></p><span id="more"></span><h1 id="YML配置文件"><a href="#YML配置文件" class="headerlink" title="YML配置文件"></a>YML配置文件</h1><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.config.YamlPropertiesFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.core.io.ClassPathResource;<br><span class="hljs-keyword">import</span> org.springframework.core.io.Resource;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> PropertiesUtil</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> by septzhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/7/25 18:20</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 获取配置文件变量工具</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesUtil</span> </span>&#123;<br>    <span class="hljs-comment">//配置常量配置文件，默认路径是 /resources/*。yml</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String PROPERTY_NAME = <span class="hljs-string">&quot;application-common.yml&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  获取参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key String参数key值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> String Value</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">getCommonYml</span><span class="hljs-params">(Object key)</span></span>&#123;<br>        Resource resource = <span class="hljs-keyword">new</span> ClassPathResource(PROPERTY_NAME);<br>        Properties properties = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            YamlPropertiesFactoryBean yamlFactory = <span class="hljs-keyword">new</span> YamlPropertiesFactoryBean();<br>            yamlFactory.setResources(resource);<br>            properties =  yamlFactory.getObject();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> properties.get(key);<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="Junit测试"><a href="#Junit测试" class="headerlink" title="Junit测试"></a>Junit测试</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> PropertiesUtilTest</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> by septzhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2022/7/25 18:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 测试工具类 PropertiesUtil</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PropertiesUtilTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testgetProperties</span><span class="hljs-params">()</span></span>&#123;<br>        assertEquals(PropertiesUtil.getCommonYml(<span class="hljs-string">&quot;tg.token&quot;</span>),<span class="hljs-string">&quot;********************&quot;</span>);<br>        assertEquals(PropertiesUtil.getCommonYml(<span class="hljs-string">&quot;tg.username&quot;</span>),<span class="hljs-string">&quot;ajie1024_bot&quot;</span>);<br> <br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>Spring boot</tag>
      
      <tag>工具类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>珍大户经济学学习笔记</title>
    <link href="/posts/11005/"/>
    <url>/posts/11005/</url>
    
    <content type="html"><![CDATA[<p><img src="https://picgo202207.oss-cn-shanghai.aliyuncs.com/img/202303020924340.png" alt="人没事"></p><span id="more"></span><h1 id="经济学核心原理"><a href="#经济学核心原理" class="headerlink" title="经济学核心原理"></a>经济学核心原理</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>经济学是研究个体<strong>如何配置有限的资源</strong>，以及这些<strong>不用的选择方案之后会有什么样的后果和影响</strong>的学科</p><p>微观经济学：洗脑需求控制供给</p><p>宏观经济学：经济危机暴涨暴跌</p><h3 id="经济学世界观"><a href="#经济学世界观" class="headerlink" title="经济学世界观"></a>经济学世界观</h3><p>目的：研究社会行为</p><p>方法：将人的行为简化为人的选择</p><p><strong>经济学和金融学的区别</strong></p><p>经济学：人类社会中个体的所有选择（研究范围广）</p><p>金融学：人类社会中人在金钱方面的选择（研究范围窄）</p><p>研究范围上，金融学是经济学的子学科。</p><p>研究方法上，是两个相互有交叉但彼此独立的学科。</p><p>辨识能力很重要，是学习进阶知识的基础。</p><h4 id="经济学的前提假设"><a href="#经济学的前提假设" class="headerlink" title="经济学的前提假设"></a>经济学的前提假设</h4><ol><li>资源是永远稀缺的（相对于人的欲望而言，资源是稀缺的）<ul><li>人对于精神的追求会阻碍对于物质的追求</li><li>资源的稀缺强迫我们做出更好的取舍</li></ul></li><li>人是理性的（只要我们冷静认真地去做选择，我们一定能做出更好的选择）</li></ol><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220705220858577.png" alt="模块关系图"></p><h4 id="宏观经济学和微观经济学"><a href="#宏观经济学和微观经济学" class="headerlink" title="宏观经济学和微观经济学"></a>宏观经济学和微观经济学</h4><p>个体：包括人以及各种能够独立作出决策的组织。</p><p>总体：国家</p><h4 id="关于经济学前提假设的思考"><a href="#关于经济学前提假设的思考" class="headerlink" title="关于经济学前提假设的思考"></a>关于经济学前提假设的思考</h4><p>1.人的欲望是无穷的吗？人类会不会进入低欲望社会？</p><p><a href="https://wiki.mbalib.com/wiki/%E4%BD%8E%E6%AC%B2%E6%9C%9B%E7%A4%BE%E4%BC%9A">低欲望社会</a>：低欲望社会就是人口减少、超高龄化、失去上进心和欲望的年轻人越来越多；国民持有大量的金融资产，企业也有高额的内部准备金，却未能有效运用资金，无论是货币宽松政策或公共投资，无法提升消费者信心，撒钱政策亦无力振兴经济的社会状态。</p><p>人的欲望在一定时间内是有限的，是增长的。将时间线无线拉长，一切会毫无意义。第二个问题不会。</p><p>2.资源是有限的的吗？人类会不会进入资源极大丰富的社会？</p><p>资源在目前人类可知的空间中是无限的，但人类获取资源的速度，相对于人类的渴求的速度，资源是有限的，会导致资源竞争的出现。当人类资源的获取速度大于人类欲望渴求的速度，会进入资源极大丰富的社会。要不是资源获取速度迅速提升，要不是人类欲望迅速衰减，或者两者相加。资源极大丰富可以解决大部分矛盾，我觉得这会导致人的欲望迅速上升，前后矛盾，所以人类不会进入资源极大丰富的社会。</p><p>3.人会是理性的吗？</p><p>个体容易是理性的，但群体容易是盲目的。牛群效应会使得人群的选择变得盲目，导致黑天鹅事件，作出错误的选择。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot使用PageHelper报错</title>
    <link href="/posts/2486/"/>
    <url>/posts/2486/</url>
    
    <content type="html"><![CDATA[<p>SprinBoot与PageHelper的版本冲突导致项目启动失败。</p><span id="more"></span><h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><br>***************************<br>APPLICATION FAILED TO START<br>***************************<br><br>Description:<br><br>The dependencies of some of the beans in the application context form a cycle:<br><br>┌──-&gt;──┐<br>|  com.github.pagehelper.autoconfigure.PageHelperAutoConfiguration<br>└──&lt;-──┘<br><br><br>Action:<br><br>Relying upon circular references is discouraged and they are prohibited by default. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to break the cycle automatically by setting spring.main.allow-circular-references to true.<br><br><br>Process finished with exit code 1<br></code></pre></div></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我是用的版本过低.</p><p>在SpringBoot2.6.4版本做项目的时间，中间用到了PageHelper做分页处理，引入依赖之后启动项目的时间报了上面的错误</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Boot pagehelper 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>升级版本</p><p>使用SpringBoot2.6及以上版本，对应的PageHelper版本应该在1.4.1及以上</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Spring Boot pagehelper 依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUG日志</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Error creating bean with name xxxxController</title>
    <link href="/posts/17074/"/>
    <url>/posts/17074/</url>
    
    <content type="html"><![CDATA[<p>记录并整理开发中遇到的报错信息，会先做记录，后续整理。</p><span id="more"></span><h1 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h1><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;noticeController&#x27;: Unsatisfied dependency expressed through field &#x27;noticeService&#x27;; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &#x27;noticeServiceImpl&#x27;: Unsatisfied dependency expressed through field &#x27;baseMapper&#x27;; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type &#x27;com.ajie.zndcxtwxapi.mapper.NoticeMapper&#x27; available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: &#123;@org.springframework.beans.factory.annotation.Autowired(required=true)&#125;<br></code></pre></div></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>添加<code>@Mapper</code>注解</p><p>就是因为没有扫描到Mapper类导致报错</p><p>在启动类添加 <code>MapperScanner（）</code>指定包名也可以。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>BUG日志</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>登录实现</title>
    <link href="/posts/3887/"/>
    <url>/posts/3887/</url>
    
    <content type="html"><![CDATA[<p>基于若依项目的登录实现。</p><span id="more"></span><h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>前端表单，记住密码需要存入Cookies缓存，密码需要加密。</p><p>后端</p><ol><li>校验验证码</li><li>校验用户名密码</li><li>生成token</li></ol><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//登陆事件</span><br><span class="hljs-function"><span class="hljs-title">handleLogin</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.$refs.loginForm.validate(<span class="hljs-function"><span class="hljs-params">valid</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (valid) &#123;<br>            <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">true</span>;<br>            <span class="hljs-comment">//判断是否记住密码</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.loginForm.rememberMe) &#123;<br>                <span class="hljs-comment">//存入Cookies，记住密码</span><br>                Cookies.set(<span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-built_in">this</span>.loginForm.username, &#123; <span class="hljs-attr">expires</span>: <span class="hljs-number">30</span> &#125;);<br>                <span class="hljs-comment">//密码加密</span><br>                Cookies.set(<span class="hljs-string">&quot;password&quot;</span>, encrypt(<span class="hljs-built_in">this</span>.loginForm.password), &#123; <span class="hljs-attr">expires</span>: <span class="hljs-number">30</span> &#125;);<br>                Cookies.set(<span class="hljs-string">&#x27;rememberMe&#x27;</span>, <span class="hljs-built_in">this</span>.loginForm.rememberMe, &#123; <span class="hljs-attr">expires</span>: <span class="hljs-number">30</span> &#125;);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Cookies.remove(<span class="hljs-string">&quot;username&quot;</span>);<br>                Cookies.remove(<span class="hljs-string">&quot;password&quot;</span>);<br>                Cookies.remove(<span class="hljs-string">&#x27;rememberMe&#x27;</span>);<br>            &#125;<br>            <span class="hljs-comment">//使用Login action</span><br>            <span class="hljs-built_in">this</span>.$store.dispatch(<span class="hljs-string">&quot;Login&quot;</span>, <span class="hljs-built_in">this</span>.loginForm).then(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">this</span>.$router.push(&#123; <span class="hljs-attr">path</span>: <span class="hljs-built_in">this</span>.redirect || <span class="hljs-string">&quot;/&quot;</span> &#125;).catch(<span class="hljs-function">()=&gt;</span>&#123;&#125;);<br>            &#125;).catch(<span class="hljs-function">() =&gt;</span> &#123;<br>                <span class="hljs-built_in">this</span>.loading = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.captchaOnOff) &#123;<br>                    <span class="hljs-built_in">this</span>.getCode();<br>                &#125;<br>            &#125;);<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 登录验证</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password 密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 验证码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uuid 唯一标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">(String username, String password, String code, String uuid)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">boolean</span> captchaOnOff = configService.selectCaptchaOnOff();<br>    <span class="hljs-comment">// 验证码开关</span><br>    <span class="hljs-keyword">if</span> (captchaOnOff)<br>    &#123;<br>        <span class="hljs-comment">// 校验验证码：根据key去redis中获取验证码答案</span><br>        validateCaptcha(username, code, uuid);<br>    &#125;<br>    <span class="hljs-comment">// 用户验证</span><br>    Authentication authentication = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">try</span><br>    &#123;<br>        <span class="hljs-comment">// 该方法会去调用UserDetailsServiceImpl.loadUserByUsername</span><br>        authentication = authenticationManager<br>            .authenticate(<span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(username, password));<br>    &#125;<br>    <span class="hljs-keyword">catch</span> (Exception e)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> BadCredentialsException)<br>        &#123;<br>            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="hljs-string">&quot;user.password.not.match&quot;</span>)));<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UserPasswordNotMatchException();<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, e.getMessage()));<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ServiceException(e.getMessage());<br>        &#125;<br>    &#125;<br>    AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_SUCCESS, MessageUtils.message(<span class="hljs-string">&quot;user.login.success&quot;</span>)));<br>    LoginUser loginUser = (LoginUser) authentication.getPrincipal();<br>    recordLoginInfo(loginUser.getUserId());<br>    <span class="hljs-comment">// 生成token</span><br>    <span class="hljs-keyword">return</span> tokenService.createToken(loginUser);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验验证码</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username 用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> code 验证码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> uuid 唯一标识</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 结果</span><br><span class="hljs-comment">     */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">validateCaptcha</span><span class="hljs-params">(String username, String code, String uuid)</span></span><br><span class="hljs-function"></span>&#123;<br>    String verifyKey = Constants.CAPTCHA_CODE_KEY + StringUtils.nvl(uuid, <span class="hljs-string">&quot;&quot;</span>);<br>    String captcha = redisCache.getCacheObject(verifyKey);<br>    redisCache.deleteObject(verifyKey);<br>    <span class="hljs-keyword">if</span> (captcha == <span class="hljs-keyword">null</span>)<br>    &#123;<br>        AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="hljs-string">&quot;user.jcaptcha.expire&quot;</span>)));<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CaptchaExpireException();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!code.equalsIgnoreCase(captcha))<br>    &#123;<br>       <span class="hljs-comment">// 异步日志，创建线程池记录日志</span><br>        AsyncManager.me().execute(AsyncFactory.recordLogininfor(username, Constants.LOGIN_FAIL, MessageUtils.message(<span class="hljs-string">&quot;user.jcaptcha.error&quot;</span>)));<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CaptchaException();<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1>]]></content>
    
    
    <categories>
      
      <category>项目学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>若依</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>验证码实现</title>
    <link href="/posts/20762/"/>
    <url>/posts/20762/</url>
    
    <content type="html"><![CDATA[<p>参考若依开源项目，学习验证码的实现。</p><span id="more"></span><h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220419195935669.png" alt="验证码"></p><p>后端生成表达式：6-4=2</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">6</span>-<span class="hljs-number">4</span>=？@<span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><ul><li><p>6-4=？（验证问题）生成图片，传给前端进行展示</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220419200228669.png" alt="前端问题"></p></li><li><p>2（答案）传给Redis</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220419200354382.png" alt="Redis答案">key值在前端，对应的答案在redis</p><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">getCode</span>(<span class="hljs-params"></span>)</span> &#123;<br>    getCodeImg().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.captchaOnOff = res.captchaOnOff === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">true</span> : res.captchaOnOff;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.captchaOnOff) &#123;<br>            <span class="hljs-comment">//获取验证图片</span><br>            <span class="hljs-built_in">this</span>.codeUrl = <span class="hljs-string">&quot;data:image/gif;base64,&quot;</span> + res.img;<br>            <span class="hljs-comment">//对应redis中验证码数据的key值</span><br>            <span class="hljs-built_in">this</span>.loginForm.uuid = res.uuid;<br>        &#125;<br>    &#125;);<br>&#125;,<br></code></pre></div></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//login.js</span><br><span class="hljs-comment">// 获取验证码</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCodeImg</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> request(&#123;<br>    url: <span class="hljs-string">&#x27;/captchaImage&#x27;</span>,<br>    headers: &#123;<br>      isToken: <span class="hljs-literal">false</span><br>    &#125;,<br>    method: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    timeout: <span class="hljs-number">20000</span><br>  &#125;)<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220419202807660.png" alt="请求验证码运行查看"></p><p><a href="http://localhost/dev-api/captchaImage">http://localhost/dev-api/captchaImage</a> 前端</p><p>Vue获取图片的对象，是前端还是后端</p><p><strong>反向代理</strong>，url请求前端，进行代理，映射到后端，解决<strong>跨域问题</strong></p><p>前端解决</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript"><span class="hljs-comment">//vue.config.js</span><br><span class="hljs-comment">//配置反向代理，解决跨域问题</span><br>    proxy: &#123;<br>      <span class="hljs-comment">// detail: https://cli.vuejs.org/config/#devserver-proxy</span><br>      [process.env.VUE_APP_BASE_API]: &#123;<br>        <span class="hljs-comment">//后端接口</span><br>        target: <span class="hljs-string">`http://localhost:8080`</span>,<br>        changeOrigin: <span class="hljs-literal">true</span>,<br>        <span class="hljs-comment">//路径重写</span><br>        pathRewrite: &#123;<br>          <span class="hljs-comment">//获取统一前缀：process.env.VUE_APP_BASE_API，并且替换成&#x27;&#x27;,在映射成http://localhost:8080</span><br>          [<span class="hljs-string">&#x27;^&#x27;</span> + process.env.VUE_APP_BASE_API]: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;,<br></code></pre></div></td></tr></table></figure><p><a href="http://localhost/dev-api/captchaImage">http://localhost/dev-api/captchaImage</a> 前端</p><p>//经过映射</p><p><a href="http://localhost:8080/dev-api/captchaImage">http://localhost:8080/dev-api/captchaImage</a>  后端</p><h1 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> com.ruoyi.common.config.RuoYiConfig;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.util.FastByteArrayOutputStream;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> com.google.code.kaptcha.Producer;<br><span class="hljs-keyword">import</span> com.ruoyi.common.constant.Constants;<br><span class="hljs-keyword">import</span> com.ruoyi.common.core.domain.AjaxResult;<br><span class="hljs-keyword">import</span> com.ruoyi.common.core.redis.RedisCache;<br><span class="hljs-keyword">import</span> com.ruoyi.common.utils.sign.Base64;<br><span class="hljs-keyword">import</span> com.ruoyi.common.utils.uuid.IdUtils;<br><span class="hljs-keyword">import</span> com.ruoyi.system.service.ISysConfigService;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 验证码操作处理</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> ruoyi</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CaptchaController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-meta">@Resource(name = &quot;captchaProducer&quot;)</span><br>    <span class="hljs-keyword">private</span> Producer captchaProducer;<br><br>    <span class="hljs-meta">@Resource(name = &quot;captchaProducerMath&quot;)</span><br>    <span class="hljs-keyword">private</span> Producer captchaProducerMath;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisCache redisCache;<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ISysConfigService configService;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成验证码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/captchaImage&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AjaxResult <span class="hljs-title">getCode</span><span class="hljs-params">(HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-comment">// 统一返回类，类似我的R类</span><br>        AjaxResult ajax = AjaxResult.success();<br>        <span class="hljs-comment">// 获取验证码是否打开</span><br>        <span class="hljs-keyword">boolean</span> captchaOnOff = configService.selectCaptchaOnOff();<br>        ajax.put(<span class="hljs-string">&quot;captchaOnOff&quot;</span>, captchaOnOff);<br>        <span class="hljs-keyword">if</span> (!captchaOnOff)<br>        &#123;<br>            <span class="hljs-comment">// 未开启直接返回</span><br>            <span class="hljs-keyword">return</span> ajax;<br>        &#125;<br><br>        <span class="hljs-comment">// 保存验证码信息</span><br>        <span class="hljs-comment">// 生成验证码UUID类型的key值</span><br>        String uuid = IdUtils.simpleUUID();<br>        <span class="hljs-comment">//拼接格式为 &quot;captcha_codes:&#123;&#123;uuid&#125;&#125;&quot;</span><br>        String verifyKey = Constants.CAPTCHA_CODE_KEY + uuid;<br><br>        String capStr = <span class="hljs-keyword">null</span>, code = <span class="hljs-keyword">null</span>;<br>        BufferedImage image = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-comment">// 生成验证码</span><br>        String captchaType = RuoYiConfig.getCaptchaType();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;math&quot;</span>.equals(captchaType))<br>        &#123;<br>            <span class="hljs-comment">//生成验证码文本：1+1=@2</span><br>            String capText = captchaProducerMath.createText();<br>            <span class="hljs-comment">// 获取问题</span><br>            capStr = capText.substring(<span class="hljs-number">0</span>, capText.lastIndexOf(<span class="hljs-string">&quot;@&quot;</span>));<br>            <span class="hljs-comment">// 获取答案</span><br>            code = capText.substring(capText.lastIndexOf(<span class="hljs-string">&quot;@&quot;</span>) + <span class="hljs-number">1</span>);<br>            image = captchaProducerMath.createImage(capStr);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;char&quot;</span>.equals(captchaType))<br>        &#123;<br>            capStr = code = captchaProducer.createText();<br>            image = captchaProducer.createImage(capStr);<br>        &#125;<br><br>        <span class="hljs-comment">// 将key值和答案存入redis缓存，有效期两分钟</span><br>        redisCache.setCacheObject(verifyKey, code, Constants.CAPTCHA_EXPIRATION, TimeUnit.MINUTES);<br>        <span class="hljs-comment">// 转换流信息写出</span><br>        FastByteArrayOutputStream os = <span class="hljs-keyword">new</span> FastByteArrayOutputStream();<br>        <span class="hljs-keyword">try</span><br>        &#123;<br>            <span class="hljs-comment">// 写成 jpg 图片</span><br>            ImageIO.write(image, <span class="hljs-string">&quot;jpg&quot;</span>, os);<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (IOException e)<br>        &#123;<br>            <span class="hljs-keyword">return</span> AjaxResult.error(e.getMessage());<br>        &#125;<br><br>        ajax.put(<span class="hljs-string">&quot;uuid&quot;</span>, uuid);<br>        ajax.put(<span class="hljs-string">&quot;img&quot;</span>, Base64.encode(os.toByteArray()));<br>        <span class="hljs-keyword">return</span> ajax;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1HT4y1d7oA?p=4&share_source=copy_web">bilibili-楠哥</a></p>]]></content>
    
    
    <categories>
      
      <category>项目学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>若依</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NuoYi-Vue使用手册</title>
    <link href="/posts/61268/"/>
    <url>/posts/61268/</url>
    
    <content type="html"><![CDATA[<p>若依开源项目的使用手册</p><span id="more"></span><h1 id="若依"><a href="#若依" class="headerlink" title="若依"></a>若依</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>jdk 1.8+</p><p>MySQL</p><p>Redis</p><h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h2><p><a href="https://gitee.com/y_project/RuoYi-Vue">码云</a></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git@gitee.com:y_project&#x2F;RuoYi-Vue.git<br></code></pre></div></td></tr></table></figure><ol><li><p>导入项目，更改<code>MySQL</code> 和 <code>Redis</code> 设置。</p></li><li><p>导入SQL文件</p></li><li><p>启动后端</p></li><li><p>启动文件</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install<br>nup run dev<br></code></pre></div></td></tr></table></figure></li></ol><h1 id="项目学习"><a href="#项目学习" class="headerlink" title="项目学习"></a>项目学习</h1>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx使用手册</title>
    <link href="/posts/33580/"/>
    <url>/posts/33580/</url>
    
    <content type="html"><![CDATA[<p>记录Nginx的使用</p><span id="more"></span><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>负载均衡</li><li>反向代理</li></ul><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h4 id="内置策略"><a href="#内置策略" class="headerlink" title="内置策略"></a>内置策略</h4><h5 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h5><p>依次循环访问</p><h5 id="加权轮询"><a href="#加权轮询" class="headerlink" title="加权轮询"></a>加权轮询</h5><p>权重循环访问</p><h4 id="拓展策略"><a href="#拓展策略" class="headerlink" title="拓展策略"></a>拓展策略</h4><p>。。。。</p><h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://nginx.org/en/download.html">官方地址</a></p><h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><p>直接解压就可以使用了</p><p>我是解压到统一的<code>Environmen</code>环境路径下，方便管理。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信AccessToken中控服务器开发</title>
    <link href="/posts/45710/"/>
    <url>/posts/45710/</url>
    
    <content type="html"><![CDATA[<p>微信官方对于每日接口调用的次数都做了限制，这其中包括了生成access_token的接口，因此官方建议开发者使用中控服务器统一获取和刷新access_token。</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis使用手册</title>
    <link href="/posts/16473/"/>
    <url>/posts/16473/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/R-C.jpg" alt="R-C"></p><p>MyBatis使用配置</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h1 id="基础搭建"><a href="#基础搭建" class="headerlink" title="基础搭建"></a>基础搭建</h1><h2 id="Maven导入依赖"><a href="#Maven导入依赖" class="headerlink" title="Maven导入依赖"></a>Maven导入依赖</h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mysql驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.26<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--mybatis--&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="编写MyBatis核心配置文件"><a href="#编写MyBatis核心配置文件" class="headerlink" title="编写MyBatis核心配置文件"></a>编写MyBatis核心配置文件</h2><p>在<code>resources</code> 下创建<code>mybatis-config.xml</code> 配置文件</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--5版本的com.mysql.jdbc.Driver；8版本的com.mysql.cj.jdbc.Driver --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=true<span class="hljs-symbol">&amp;amp;</span>useUnicode=true<span class="hljs-symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;******&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--每一个Mapper.XML都需要在Mybatis核心配置文件中注册！--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;com/ajie/dao/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h2 id="编写MyBatis工具类"><a href="#编写MyBatis工具类" class="headerlink" title="编写MyBatis工具类"></a>编写MyBatis工具类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisUtils</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//默认在resources路径下</span><br>            String resource = <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            InputStream inputStream = Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取SqlSession连接</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title">getSession</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> type name;<br>    ...<br>    &#123;<span class="hljs-comment">//构造,有参,无参</span><br>    <span class="hljs-comment">//set/get</span><br>    <span class="hljs-comment">//toString()</span><br>    &#125;<br>    <span class="hljs-comment">//或者LomBok的@Date</span><br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="编写Mapper接口类"><a href="#编写Mapper接口类" class="headerlink" title="编写Mapper接口类"></a>编写Mapper接口类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.ajie.pojo.User;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> </span>&#123;<br>    <span class="hljs-comment">//接口方法</span><br>    <span class="hljs-function">List&lt;User&gt; <span class="hljs-title">selectUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="编写Mapper-xml配置文件"><a href="#编写Mapper-xml配置文件" class="headerlink" title="编写Mapper.xml配置文件"></a>编写Mapper.xml配置文件</h2><p>namespace <strong>十分重要</strong>，不能写错！</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span></span><br><span class="hljs-meta">    <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.ajie.dao.UserMapper&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ajie.pojo.User&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--写SQL语句--&gt;</span><br>    select * from user<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ul><li>id <ul><li>命名空间中<strong>唯一的标识符</strong> </li><li><strong>接口中的方法名</strong>与映射文件中的SQL语句<strong>ID</strong> 一一对应 </li></ul></li><li>parameterType <ul><li>传入SQL语句的参数类型 。【万能的Map，可以多尝试使用】 </li></ul></li><li>resultType <ul><li>SQL语句返回值类型。【完整的类名或者别名】</li></ul></li></ul><h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><h4 id="思路一：直接在方法中传递参数"><a href="#思路一：直接在方法中传递参数" class="headerlink" title="思路一：直接在方法中传递参数"></a>思路一：直接在方法中传递参数</h4><ol><li>在接口方法的参数前加 @Param属性 </li><li>Sql语句编写的时候，直接取@Param中设置的值即可，不需要单独设置参数类型</li></ol><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//通过密码和名字查询用户</span><br><span class="hljs-function">User <span class="hljs-title">selectUserByNP</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username,<span class="hljs-meta">@Param(&quot;pwd&quot;)</span> String pwd)</span></span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    &lt;select id=&quot;selectUserByNP&quot; resultType=&quot;com.ajie.pojo.User&quot;&gt;</span><br><span class="hljs-comment">    select * from user where name = #&#123;username&#125; and pwd = #&#123;pwd&#125;</span><br><span class="hljs-comment">    &lt;/select&gt;</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><h4 id="思路二：使用万能的Map"><a href="#思路二：使用万能的Map" class="headerlink" title="思路二：使用万能的Map"></a>思路二：使用万能的Map</h4><ol><li><p>在接口方法中，参数直接传递Map；</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">User <span class="hljs-title">selectUserByNP2</span><span class="hljs-params">(Map&lt;String,Object&gt; map)</span></span>;<br></code></pre></div></td></tr></table></figure></li><li><p>编写sql语句的时候，需要传递参数类型，参数类型为map</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">&lt;select id=<span class="hljs-string">&quot;selectUserByNP2&quot;</span> parameterType=<span class="hljs-string">&quot;map&quot;</span> resultType=<span class="hljs-string">&quot;com.ajie.pojo.User&quot;</span>&gt;<br>    select * from user where name = #&#123;username&#125; and pwd = #&#123;pwd&#125;<br>&lt;/select&gt;<br></code></pre></div></td></tr></table></figure></li><li><p>在使用方法的时候，Map的 key 为 sql中取的值即可，没有顺序要求！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>map.put(<span class="hljs-string">&quot;username&quot;</span>,<span class="hljs-string">&quot;小明&quot;</span>);<br>map.put(<span class="hljs-string">&quot;pwd&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br>User user = mapper.selectUserByNP2(map);<br></code></pre></div></td></tr></table></figure><h3 id="事务提交"><a href="#事务提交" class="headerlink" title="事务提交"></a>事务提交</h3><p>增、删、改操作需要提交事务！</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddUser</span><span class="hljs-params">()</span> </span>&#123;<br>    SqlSession session = MybatisUtils.getSession();<br>    UserMapper mapper = session.getMapper(UserMapper.class);<br>    User user = <span class="hljs-keyword">new</span> User(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-string">&quot;zxcvbn&quot;</span>);<br>    <span class="hljs-keyword">int</span> i = mapper.addUser(user);<br>    System.out.println(i);<br>    session.commit(); <span class="hljs-comment">//提交事务,重点!不写的话不会提交到数据库</span><br>    session.close();<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserLike</span><span class="hljs-params">(String value)</span></span>;<br><br><span class="hljs-comment">//查询全部用户</span><br><span class="hljs-function">List&lt;User&gt; <span class="hljs-title">getUserList</span><span class="hljs-params">()</span></span>;<br>   <br><span class="hljs-comment">//根据ID查询用户</span><br><span class="hljs-function">User <span class="hljs-title">getUserById</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br>   <br><span class="hljs-comment">//User getUserById2(Map&lt;String,Object&gt; map);</span><br>   <br><span class="hljs-comment">//insert一个用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">addUser</span><span class="hljs-params">(User user)</span></span>;<br>   <br><span class="hljs-comment">//万能的Map</span><br><span class="hljs-comment">//int addUser2(Map&lt;String,Object&gt; map);</span><br>   <br><span class="hljs-comment">//修改用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateUser</span><span class="hljs-params">(User user)</span></span>;<br>   <br><span class="hljs-comment">//删除一个用户</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteUser</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ajie.pojo.User&quot;</span>&gt;</span><br>     select * from mybatis.user where name like &quot;%&quot;#&#123;value&#125;&quot;%&quot;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>   <br> <span class="hljs-comment">&lt;!--select查询语句--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ajie.pojo.User&quot;</span>&gt;</span><br>    select * from mybatis.user<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>   <br> <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ajie.pojo.User&quot;</span>&gt;</span><br>     select * from mybatis.user where id = #&#123;id&#125;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>   <br> <span class="hljs-comment">&lt;!--对象中的属性，可以直接取出来--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.ajie.pojo.User&quot;</span>&gt;</span><br>     insert into mybatis.user (id, name, pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);<br> <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br>   <br> <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.ajie.pojo.User&quot;</span>&gt;</span><br>     update mybatis.user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125;  where id = #&#123;id&#125; ;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br>   <br> <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>     delete from mybatis.user where id = #&#123;id&#125;;<br> <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="Like语句"><a href="#Like语句" class="headerlink" title="Like语句"></a>Like语句</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String wildcardname = “%smi%”;<br>List&lt;name&gt; names = mapper.selectlike(wildcardname);<br><br>&lt;select id=”selectlike”&gt;<br>select * from foo where bar like #&#123;value&#125;<br>&lt;/select&gt;<br><br></code></pre></div></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>所有的增删改操作都需要提交事务！</li><li> 接口所有的普通参数，尽量都写上@Param参数，尤其是多个参数时，必须写上！ </li><li>有时候根据业务的需求，可以考虑使用map传递参数！ </li><li>为了规范操作，在SQL的配置文件中，尽量将Parameter参数和resultType都写上！</li></ul></li></ol><h2 id="编写测试类"><a href="#编写测试类" class="headerlink" title="编写测试类"></a>编写测试类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> </span>&#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">selectUser</span><span class="hljs-params">()</span> </span>&#123;<br>        SqlSession session = MybatisUtils.getSession();<br>        <span class="hljs-comment">//方法一:</span><br>        <span class="hljs-comment">//List&lt;User&gt; users = session.selectList(&quot;com.ajie.mapper.UserMapper.selectUser&quot;);</span><br>        <span class="hljs-comment">//方法二:</span><br>        UserMapper mapper = session.getMapper(UserMapper.class);<br>        List&lt;User&gt; users = mapper.selectUser();<br>        <span class="hljs-keyword">for</span> (User user: users)&#123;<br>            System.out.println(user);<br>        &#125;<br>        session.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果参数过多，我们可以考虑直接使用Map实现，如果参数比较少，直接传递参数即可</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用手册</tag>
      
      <tag>MyBatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022蓝桥杯题解</title>
    <link href="/posts/21541/"/>
    <url>/posts/21541/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/01d19d5b2ca648a80121bbec5bddc3.jpg@1280w_1l_2o_100sh.jpg" alt="蓝桥杯"></p><p>题目： 第十三届蓝桥杯大赛JavaB组</p><span id="more"></span><h1 id="A：星期计算"><a href="#A：星期计算" class="headerlink" title="A：星期计算"></a>A：星期计算</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><blockquote><p>试题 A: 星期计算 本题总分：5 分 </p><p>【问题描述】 已知今天是星期六，请问 2022 天后是星期几？ 注意用数字 1 到 7 表示星期一到星期日。</p><p> 【答案提交】 这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一 个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h1 id="B-山"><a href="#B-山" class="headerlink" title="B:山"></a>B:山</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><blockquote><p>试题 B: 山 本题总分：5 分 </p><p>【问题描述】 这天小明正在学数数。 他突然发现有些正整数的形状像一座“山”，比如 123565321、145541，它 们左右对称（回文）且数位上的数字先单调不减，后单调不增。 小明数了很久也没有数完，他想让你告诉他在区间 [2022, 2022222022] 中有 多少个数的形状像一座“山”。 </p><p>【答案提交】 这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一 个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。</p></blockquote><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><h1 id="C-字符统计"><a href="#C-字符统计" class="headerlink" title="C: 字符统计"></a>C: 字符统计</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><blockquote><p>试题 C: 字符统计 时间限制: 1.0s 内存限制: 512.0MB 本题总分：10 分</p><p> 【问题描述】 给定一个只包含大写字母的字符串 S，请你输出其中出现次数最多的字母。 如果有多个字母均出现了最多次，按字母表顺序依次输出所有这些字母。 </p><p>【输入格式】 一个只包含大写字母的字符串 S . </p><p>【输出格式】 若干个大写字母，代表答案。 </p><p>【样例输入】 BABBACAC </p><p>【样例输出】 AB </p><p>【评测用例规模与约定】</p><p> 对于 100% 的评测用例，1 ≤ |S | ≤ 10e6 .</p></blockquote><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><h1 id="D-最少刷题数"><a href="#D-最少刷题数" class="headerlink" title="D: 最少刷题数"></a>D: 最少刷题数</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><blockquote><p>试题 D: 最少刷题数 时间限制: 1.0s 内存限制: 512.0MB 本题总分：10 分 </p><p>【问题描述】 小蓝老师教的编程课有 N 名学生，编号依次是 1 . . . N。第 i 号学生这学期 刷题的数量是 Ai。 对于每一名学生，请你计算他至少还要再刷多少道题，才能使得全班刷题 比他多的学生数不超过刷题比他少的学生数。 </p><p>【输入格式】 第一行包含一个正整数 N。 第二行包含 N 个整数：A1, A2, A3, . . . , AN. </p><p>【输出格式】 输出 N 个整数，依次表示第 1 . . . N 号学生分别至少还要再刷多少道题。 </p><p>【样例输入】 5 12 10 15 20 6 </p><p>【样例输出】 0 3 0 0 7 </p><p>【评测用例规模与约定】 </p><p>对于 30% 的数据，1 ≤ N ≤ 1000, 0 ≤ Ai ≤ 1000. </p><p>对于 100% 的数据，1 ≤ N ≤ 100000, 0 ≤ Ai ≤ 100000.</p></blockquote><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><h1 id="E-求阶乘"><a href="#E-求阶乘" class="headerlink" title="E:求阶乘"></a>E:求阶乘</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><blockquote><p>试题 E: 求阶乘 时间限制: 1.0s 内存限制: 512.0MB 本题总分：15 分 </p><p>【问题描述】 满足 N! 的末尾恰好有 K 个 0 的最小的 N 是多少? 如果这样的 N 不存在输出 −1。 </p><p>【输入格式】 一个整数 K。 </p><p>【输出格式】 一个整数代表答案。 </p><p>【样例输入】 2 </p><p>【样例输出】 10 </p><p>【评测用例规模与约定】</p><p> 对于 30% 的数据，1 ≤ K ≤ 106 .</p><p> 对于 100% 的数据，1 ≤ K ≤ 1018 .</p></blockquote><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><h1 id="F-最大子矩阵"><a href="#F-最大子矩阵" class="headerlink" title="F: 最大子矩阵"></a>F: 最大子矩阵</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><blockquote><p>试题 F: 最大子矩阵 时间限制: 1.0s 内存限制: 512.0MB 本题总分：15 分 </p><p>【问题描述】 小明有一个大小为 N × M 的矩阵，可以理解为一个 N 行 M 列的二维数组。 我们定义一个矩阵 m 的稳定度 f(m) 为 f(m) = max(m) − min(m)，其中 max(m) 表示矩阵 m 中的最大值，min(m) 表示矩阵 m 中的最小值。现在小明想要从这 个矩阵中找到一个稳定度不大于 limit 的子矩阵，同时他还希望这个子矩阵的面 积越大越好（面积可以理解为矩阵中元素个数）。 子矩阵定义如下：从原矩阵中选择一组连续的行和一组连续的列，这些行 列交点上的元素组成的矩阵即为一个子矩阵。 </p><p>【输入格式】 第一行输入两个整数 N，M，表示矩阵的大小。 接下来 N 行，每行输入 M 个整数，表示这个矩阵。 最后一行输入一个整数 limit，表示限制。 </p><p>【输出格式】 输出一个整数，分别表示小明选择的子矩阵的最大面积。 </p><p>【样例输入】 3 4 2 0 7 9 0 6 9 7 8 4 6 4 8 </p><p>【样例输出】 6</p><p>【样例说明】 满足稳定度不大于 8 的且面积最大的子矩阵总共有三个，他们的面积都是 6（粗体表示子矩阵元素）：</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220410131534541.png" alt="样例说明"></p><p>【评测用例规模与约定】</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220410131611724.png" alt="评测用例规模与约定"></p><p>对于所有评测用例，0 ≤ 矩阵元素值, limit ≤ 10e5。</p></blockquote><h2 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h2><h1 id="G-数组切分"><a href="#G-数组切分" class="headerlink" title="G: 数组切分"></a>G: 数组切分</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><blockquote><p>试题 G: 数组切分 时间限制: 1.0s 内存限制: 512.0MB 本题总分：20 分 </p><p>【问题描述】 已知一个长度为 N 的数组：A1, A2, A3, …AN 恰好是 1 ∼ N 的一个排列。现 在要求你将 A 数组切分成若干个 (最少一个，最多 N 个) 连续的子数组，并且 每个子数组中包含的整数恰好可以组成一段连续的自然数。</p><p>例如对于 A = {1, 3, 2, 4}, 一共有 5 种切分方法： </p><p>{1}{3}{2}{4}：每个单独的数显然是 (长度为 1 的) <strong>一段连续的自然数</strong>。</p><p>{1}{3, 2}{4}：{3, 2} 包含 2 到 3，是 <strong>一段连续的自然数</strong>，另外 {1} 和 {4} 显然 也是。</p><p>{1}{3, 2, 4}：{3, 2, 4} 包含 2 到 4，是 <strong>一段连续的自然数</strong>，另外 {1} 显然也是。 </p><p>{1, 3, 2}{4}：{1, 3, 2} 包含 1 到 3，是 <strong>一段连续的自然数</strong>，另外 {4} 显然也是。 </p><p>{1, 3, 2, 4}：只有一个子数组，包含 1 到 4，是 <strong>一段连续的自然数</strong>。 </p><p>【输入格式】</p><p> 第一行包含一个整数 N。第二行包含 N 个整数，代表 A 数组。 </p><p>【输出格式】 </p><p>输出一个整数表示答案。</p><p>由于答案可能很大，所以输出其对 1000000007 取 模后的值 </p><p>【样例输入】 </p><p>4 </p><p>1 3 2 4 </p><p>【样例输出】 5</p><p>【评测用例规模与约定】 </p><p>对于 30% 评测用例，1 ≤ N ≤ 20. 对于 100% 评测用例，1 ≤ N ≤ 10000.</p></blockquote><h1 id="H-回忆迷宫"><a href="#H-回忆迷宫" class="headerlink" title="H: 回忆迷宫"></a>H: 回忆迷宫</h1><h2 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h2><blockquote><p>试题 H: 回忆迷宫 时间限制: 1.0s 内存限制: 512.0MB 本题总分：20 分 </p><p>【问题描述】</p><p>​        爱丽丝刚从一处地下迷宫中探险归来，你能根据她对于自己行动路径的回 忆，帮她画出迷宫地图吗？</p><p>​        迷宫地图是基于二维网格的。爱丽丝会告诉你一系列她在迷宫中的移动步 骤，每个移动步骤可能是上下左右四个方向中的一种，表示爱丽丝往这个方向 走了一格。你需要根据这些移动步骤给出一个迷宫地图，并满足以下条件： </p><p>​        1、爱丽丝能在迷宫内的某个空地开始，顺利的走完她回忆的所有移动步 骤。 </p><p>​        2、迷宫内不存在爱丽丝没有走过的空地。 </p><p>​        3、迷宫是封闭的，即可通过墙分隔迷宫内与迷宫外。任意方向的无穷远处 视为迷宫外，所有不与迷宫外联通的空地都视为是迷宫内。（迷宫地图为四联 通，即只有上下左右视为联通） </p><p>​        4、在满足前面三点的前提下，迷宫的墙的数量要尽可能少。</p><p>【输入格式】 </p><p>​        第一行一个正整数 N，表示爱丽丝回忆的步骤数量。 </p><p>​        接下来一行 N 个英文字符，仅包含 UDLR 四种字符，分别表示上（Up）、 下（Down）、左（Left）、右（Right）。 </p><p>【输出格式】 </p><p>​        请通过字符画的形式输出迷宫地图。迷宫地图可能包含许多行，用字符 ‘*’ 表示墙，用 ‘ ’（空格）表示非墙。 你的输出需要保证以下条件： </p><p><em>1、至少有一行第一个字符为 ‘</em>’。 </p><p>2、第一行至少有一个字符为 ‘*’。</p><p>3、每一行的最后一个字符为 ‘*’。 *</p><p><em>4、最后一行至少有一个字符为 ‘</em>’。 </p><p>【样例输入】 </p><p>17</p><p> UUUULLLLDDDDRRRRU</p><p>【样例输出】 </p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"> <span class="hljs-strong">****</span><span class="hljs-emphasis">*  </span><br><span class="hljs-emphasis">*</span>     <span class="hljs-emphasis">*</span><br><span class="hljs-emphasis">*</span> <span class="hljs-strong">**<span class="hljs-emphasis">* *</span></span><br><span class="hljs-strong"><span class="hljs-emphasis">* <span class="hljs-strong">**<span class="hljs-emphasis">* *</span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">* <span class="hljs-strong">**<span class="hljs-emphasis">* *</span></span></span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis">*     *</span></span></span></span></span></span><br><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"><span class="hljs-emphasis"><span class="hljs-strong"> **</span><span class="hljs-strong">**<span class="hljs-emphasis">* </span></span></span></span></span></span><br></code></pre></div></td></tr></table></figure><p>【样例说明】</p><p> 爱丽丝可以把第六行第六个字符作为起点。</p><p>外墙墙墙墙墙外 </p><p>墙内内内内内墙 </p><p>墙内墙墙墙内墙 </p><p>墙内墙墙墙内墙 </p><p>墙内墙墙墙内墙 </p><p>墙内内内内内墙 </p><p>外墙墙墙墙墙外</p><p>【评测用例规模与约定】 </p><p>对于所有数据，0 &lt; N ≤ 100.</p></blockquote><h1 id="I-红绿灯"><a href="#I-红绿灯" class="headerlink" title="I: 红绿灯"></a>I: 红绿灯</h1><h2 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h2><p>试题 I: 红绿灯 时间限制: 1.0s 内存限制: 512.0MB 本题总分：25 分 </p><p>【问题描述】</p><p> 爱丽丝要开车去上班，上班的路上有许多红绿灯，这让爱丽丝很难过。为 了上班不迟到，她给自己的车安装了氮气喷射装置。现在她想知道自己上班最 短需要多少时间。 </p><p>爱丽丝的车最高速度是 1 V 米每秒，并且经过改装后，可以瞬间加速到小于 等于最高速的任意速度，也可以瞬间停止。 </p><p>爱丽丝家离公司有 N 米远，路上有 M 个红绿灯，第 i 个红绿灯位于离爱 丽丝家 Ai 米远的位置，绿灯持续 Bi 秒，红灯持续 Ci 秒。在初始时（爱丽丝开 始计时的瞬间），所有红绿灯都恰好从红灯变为绿灯。如果爱丽丝在绿灯变红的 瞬间到达红绿灯，她会停下车等红灯，因为她是遵纪守法的好市民。</p><p> 氮气喷射装置可以让爱丽丝的车瞬间加速到超光速（且不受相对论效应的 影响！），达到瞬移的效果，但是爱丽丝是遵纪守法的好市民，在每个红绿灯前 她都会停下氮气喷射，即使是绿灯，因为红绿灯处有斑马线，而使用氮气喷射 装置通过斑马线是违法的。此外，氮气喷射装置不能连续启动，需要一定时间 的冷却，表现为通过 K 个红绿灯后才能再次使用。（也就是说，如果 K = 1，就 能一直使用啦！）初始时，氮气喷射装置处于可用状态。 </p><p>【输入格式】</p><p> 第一行四个正整数 N、M、K、V，含义如题面所述。</p><p> 接下来 M 行，每行三个正整数 Ai、Bi、Ci，含义如题面所述。 </p><p>【输出格式】 </p><p>输出一个正整数 T，表示爱丽丝到达公司最短需要多少秒。 </p><p>【样例输入】</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">90 </span><span class="hljs-number">2</span> <span class="hljs-number">2</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">30 </span><span class="hljs-number">20</span> <span class="hljs-number">20</span><br><span class="hljs-symbol">60 </span><span class="hljs-number">20</span> <span class="hljs-number">20</span><br></code></pre></div></td></tr></table></figure><p>【样例输出】</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs plain">80<br></code></pre></div></td></tr></table></figure><p>【样例说明】</p><p>爱丽丝在最开始直接使用氮气喷射装置瞬间到达第一个红绿灯，然后绿灯 通过，以最高速行进 60 秒后到达第二个红绿灯，此时绿灯刚好变红，于是她等 待 20 秒再次变为绿灯后通过该红绿灯，此时氮气喷射装置冷却完毕，爱丽丝再 次使用瞬间到达公司，总共用时 80 秒。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220410133218681.png" alt="评测用例规模与约定"></p><h1 id="J-拉箱子"><a href="#J-拉箱子" class="headerlink" title="J: 拉箱子"></a>J: 拉箱子</h1><h2 id="题目-9"><a href="#题目-9" class="headerlink" title="题目"></a>题目</h2><blockquote><p>【问题描述】 </p><p>推箱子是一款经典电子游戏，爱丽丝很喜欢玩，但是她有点玩腻了，现在 她想设计一款拉箱子游戏。 拉箱子游戏需要玩家在一个 N × M 的网格地图中，控制小人上下左右移动， 将箱子拉到终点以获得胜利。 现在爱丽丝想知道，在给定地形（即所有墙的位置）的情况下，有多少种 不同的可解的初始局面。 </p><p>【初始局面】 的定义如下： 1、初始局面由排列成 N × M 矩形网格状的各种元素组成，每个网格中有 且只有一种元素。可能的元素有：空地、墙、小人、箱子、终点。 2、初始局面中有且只有一个小人。 3、初始局面中有且只有一个箱子。 4、初始局面中有且只有一个终点。 </p><p>【可解】 的定义如下： 通过有限次数的移动小人（可以在移动的同时拉箱子），箱子能够到达终点 所在的网格。 </p><p>【移动】 的定义如下： 在一次移动中，小人可以移动到相邻（上、下、左、右四种选项）的一个 网格中，前提是满足以下条件： </p><p>​        1、小人永远不能移动到 N × M 的网格外部。 </p><p>​        2、小人永远不能移动到墙上或是箱子上。 3、小人可以移动到空地或是终点上。 </p><p>【拉箱子】 的定义如下： 在一次合法移动的同时，如果小人初始所在网格沿小人移动方向的反方向上的相邻网格上恰好是箱子，小人可以拉动箱子一起移动，让箱子移动到小人 初始所在网格。 即使满足条件，小人也可以只移动而不拉箱子。</p><p>【输入格式】</p><p> 第一行两个正整数 N 和 M，表示网格的大小。 接下来 N 行，每行 M 个由空格隔开的整数 0 或 1 描述给定的地形。其中 1 表示墙，0 表示未知的元素，未知元素可能是小人或箱子或空地或终点，但不 能是墙。 </p><p>【输出格式】</p><p> 输出一个正整数，表示可解的初始局面数量。 </p><p>【样例输入】</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">2 </span><span class="hljs-number">4</span><br><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">1</span> <br></code></pre></div></td></tr></table></figure><p>【样例输出】</p><p> 13</p><p>【样例说明】 </p><p>13 种可解的初始局面示意图如下：<br><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220410133449981.png" alt="拉箱子1"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220410133524358.png" alt="拉箱子2"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220410133545877.png" alt="评测用例规模与约定"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
      <tag>题解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构基础概念</title>
    <link href="/posts/31611/"/>
    <url>/posts/31611/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/20140621093420796.png" alt="数据结构课程设计实习报告-CSDN-AdaAlpha"></p><p>基础常见的数据结构概念，防止遗忘。</p><span id="more"></span><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>数据是信息的载体，是描述客观事务属性的<strong>数</strong>、字符和<strong>能输入到计算机并被计算机识别和处理的符号集合</strong>。</p><h2 id="数据元素（节点NOde-记录Record）"><a href="#数据元素（节点NOde-记录Record）" class="headerlink" title="数据元素（节点NOde/记录Record）"></a>数据元素（节点NOde/记录Record）</h2><p>数据的基本单位，通常作为一个整体进行考虑和处理。</p><p>由若干数据项组成。</p><h2 id="数据项（域field）"><a href="#数据项（域field）" class="headerlink" title="数据项（域field）"></a>数据项（域field）</h2><p>构成数据元素不可分割的最小单位。</p><h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p>相同性质的数据元素的集合。</p><p>是数据的一个子集。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>一个值的集合和定义在次集合上一组操作的总称。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol><li>原子类型：其值不在分割</li><li>结构类型：可以分割为若干成分</li><li>抽象数据类型：抽象数据组织和与之相关的操作。</li></ol><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>数据元素之间的某种关系成为结构。</p><p>数据结构是相互之间存在一种或多种特定关系的元素集合。</p><h3 id="包含："><a href="#包含：" class="headerlink" title="包含："></a>包含：</h3><ol><li>逻辑结构</li><li>存储结构</li><li>数据的运算</li></ol>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
      <tag>基础概念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM知识点整理</title>
    <link href="/posts/37424/"/>
    <url>/posts/37424/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/images.png" alt="JVM"><br>JVM知识点的综合整理。</p><span id="more"></span><h1 id="JVM及JVM的位置"><a href="#JVM及JVM的位置" class="headerlink" title="JVM及JVM的位置"></a>JVM及JVM的位置</h1><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><p>​    <strong>Java虚拟机</strong>（英语：Java Virtual Machine，缩写为JVM）。JVM是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><p>​    JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码<strong>字节码（.class文件）</strong>，就可以在<strong>多种平台上</strong>(操作系统windows,linux,MAC)不加修改地运行。通过对中央处理器CPU所执行的软件实现，实现能执行编译过的Java程序码（Applet]与应用程序）。</p><p>是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。</p><h2 id="JVM的位置"><a href="#JVM的位置" class="headerlink" title="JVM的位置"></a>JVM的位置</h2><p>它是整个java实现跨平台的<strong>最核心</strong>的部分，由Java文件编译来的class文件，只有经过虚拟机<strong>解释</strong>才能被操作系统执行。<br><strong>一次编译,多处运行</strong>:JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的class文件（字节码），就可以在多种平台上不加修改地运行。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210312214406.png" alt="JVM的位置"></p><p>JVM，JRE，JDK的关系:JDK包含JRE,JRE包含JVM。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/JVM-JRE-JDK-Screenshot.png" alt="JVM，JRE，JDK的关系"></p><p>JVM高频面试题</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210312203824.png" alt="JVM面试题"></p><p><em>执行代码可以分为<strong>编译执行</strong>和<strong>解释执行</strong>。解释执行指的是边解释边运行代码。编译执行指的是先编译，后执行。</em></p><p><a href="https://septzhang.github.io/">欢迎浏览我其他的博客</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zh.wikipedia.org/wiki/Java%E8%99%9A%E6%8B%9F%E6%9C%BA">维基百科</a></p><p><a href="https://blog.csdn.net/weixin_43538934/article/details/86707053">CSDN-Serendipity-Lv的博客</a></p><!-- more --><h1 id="JVM（Java虚拟机）"><a href="#JVM（Java虚拟机）" class="headerlink" title="JVM（Java虚拟机）"></a>JVM（Java虚拟机）</h1><p>​    Java程序运行的<strong>底层平台</strong>，与==Java支持库==一起构成了Java程序的<strong>执行环境</strong>。</p><p>JRE = JVM + Java标准库</p><p>JDK= JRE + Java开发诊断工具</p><h1 id="JVM的跨平台和跨语言"><a href="#JVM的跨平台和跨语言" class="headerlink" title="JVM的跨平台和跨语言"></a>JVM的跨平台和跨语言</h1><h2 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h2><p>一个Java类，可以在不同的操作系统（windows、Linux、MACOS）上执行，结果都一样。</p><h2 id="跨语言（语言无关性）"><a href="#跨语言（语言无关性）" class="headerlink" title="跨语言（语言无关性）"></a>跨语言（语言无关性）</h2><p>与语言解耦。</p><p>JVM运行不是翻译Java文件，而是识别class文件。</p><p>可以运行Java、Groovy、Kotlin、Scala产生的class文件。</p><h1 id="JVM的体系结构"><a href="#JVM的体系结构" class="headerlink" title="JVM的体系结构"></a>JVM的体系结构</h1><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210313091149.png" alt="JVM的体系结构"></p><p>其中线程独占区不会有<strong>垃圾回收</strong>.</p><p><strong>JVM调优</strong>几乎都在线程共享区,其中大部分都在堆.</p><p><strong>类的加载过程：</strong>JVM将javac编译好的class字节码文件加载到内存中，并对该数据进行验证、解析和初始化、形成JVM可以直接使用的JAVA类，最终回收(卸载)的过程。</p><p>栈的空间大小远远小于堆。</p><p>栈也叫<strong>栈内存</strong>。</p><h2 id="相关的各组件"><a href="#相关的各组件" class="headerlink" title="相关的各组件"></a>相关的各组件</h2><h3 id="类加载器-ClassLoader-："><a href="#类加载器-ClassLoader-：" class="headerlink" title="类加载器(ClassLoader)："></a><strong>类加载器(ClassLoader)：</strong></h3><p>​    负责加载class文件(classs文件在文件开头有特定的文件标识)：将class文件字节码内容加载到<strong>内存</strong>中，并将这些内容转换成方法区中的运行时数据结构；</p><p>​    <strong>ClassLoader只负责加载class文件的加载，至于它是否可以运行，则由Execution Engine决定。</strong></p><p>​    </p><h2 id="方法区-Method-Area-："><a href="#方法区-Method-Area-：" class="headerlink" title="方法区(Method Area)："></a><strong>方法区(Method Area)：</strong></h2><ul><li>方法区是各个线程共享的内存区域；</li><li>方法区用于存储已被虚拟机加载的类的模板信息、常量、静态变量等；</li><li>虽然Java虚拟机规范把方法区描述为堆的一部分，但是他还有个别名叫做<strong>Non-heap（非堆）</strong>，目的应该是与Java堆区分开来；</li><li>根据Java虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出<strong>OutOfMemoryError 异常</strong>；</li><li>垃圾收集在这个区域是比<strong>较少出现</strong>的，但并非数据进入了方法区就如永久代的名字一样永久存在了。</li><li>这区域的<strong>内存回收目标</strong>主要是针对常量池的回收和类型的卸载。</li></ul><h2 id="PC寄存器-程序计数器-："><a href="#PC寄存器-程序计数器-：" class="headerlink" title="PC寄存器(程序计数器)："></a><strong>PC寄存器(程序计数器)：</strong></h2><ul><li>每个线程都有一个程序计数器，是线程私有的；</li><li>就是一个指针，指向方法区中的方法字节码（<strong>用来存储指向下一条指令的地址</strong>，既将要执行的指令代码），由执行引擎读取下一条指令。</li><li>是一个非常小的内存空间，几乎可以忽略不记；</li><li>它是当前线程所执行的字节码的行号指示器，字节码解释器通过改变这个计数器的值来选取下一条需要执行的字节码指令。</li><li>如果执行的是一个Native方法，那这个计数器是空的；</li><li>用以完成分支、循环、跳转、异常处理、线程恢复等基础功能。</li><li><strong>不会发生内存溢出OOM错误</strong>。</li></ul><h2 id="虚拟机栈-Vm-Stack"><a href="#虚拟机栈-Vm-Stack" class="headerlink" title="虚拟机栈(Vm Stack)"></a><strong>虚拟机栈(Vm Stack)</strong></h2><ul><li><p>虚拟机栈为虚拟机执行Java方法（也就是字节码）服务。</p></li><li><p>主管 Java 程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放。</p></li><li><p><strong>栈不存在垃圾回收问题</strong>，生命周期和线程一致，是线程私有的。</p></li><li><p>8种基木类型的变量＋对象的引用变量＋实例方法都是在函数的栈内存中分配。</p></li></ul><h2 id="本地方法栈（Native-Method-Stacks）："><a href="#本地方法栈（Native-Method-Stacks）：" class="headerlink" title="本地方法栈（Native Method Stacks）："></a><strong>本地方法栈（Native Method Stacks）：</strong></h2><ul><li>本地方法栈为虚拟机使用到的本地Native方法服务‘；</li><li>有的虚拟机（例如Sun HotSpot虚拟机）直接就把本地方法栈和虚拟机栈合二为一（在虚拟机规范中对本地方法栈中的使用方法、语言、数据结构并没有强制规定，因此具体的虚拟机可以自由实现它）</li><li>会抛出StackOverFlowError和OutOfmMemoryError异常。</li></ul><h2 id="Java堆（Java-Heap）："><a href="#Java堆（Java-Heap）：" class="headerlink" title="Java堆（Java Heap）："></a><strong>Java堆（Java Heap）</strong>：</h2><ul><li>Java虚拟机管理内存中的最大一块；</li><li>Java堆是所有线程共享的内存管理区域。此内存区域</li><li>唯一目的就是存放对象的实例，几乎所有对象实例都在堆中分配内存。（这一点在Java虚拟机规范中的描述是：所有对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也不是变的）。</li></ul><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="虚拟机栈与本地方法栈的区别："><a href="#虚拟机栈与本地方法栈的区别：" class="headerlink" title="虚拟机栈与本地方法栈的区别："></a>虚拟机栈与本地方法栈的区别：</h3><p>两者类似，区别是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，本地方法栈则为虚拟机使用到的本地Native方法服务‘；</p><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/jalja365/p/12184872.html">博客言-君子生非异也-JVM之堆的体系结构</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>JVM</tag>
      
      <tag>知识点整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring事务</title>
    <link href="/posts/8396/"/>
    <url>/posts/8396/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/OIP-C.jpg" alt="慕课网-Spring事务管理"></p><p>对于常见的Spring事务问题进行了总结。</p><span id="more"></span><h1 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h1><blockquote><p>事务这个概念是数据库层面的，Spring只是基于数据库中的事务进行了扩展，以及提供了一些能 让程序员更加方便操作事务的方式。</p></blockquote><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><ul><li>声明式（@Transactional注解）</li><li>编程式</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li><li>一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。</li><li>隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li><li>持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</li></ul><h2 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h2><p>通过在某个方法上增加@Transactional注解，就可以开启事务。在一个方法上加了@Transactional注解后，Spring会基于这个类生成一个代理对象，会将这个代理对象 作为bean，当在使用这个代理对象的方法时，如果这个方法上存在@Transactional注解，那么代理逻 辑会先把事务的自动提交设置为false，然后再去执行原本的业务逻辑方法，如果执行业务逻辑方法没有 出现异常，那么代理逻辑中就会将事务进行提交，如果执行业务逻辑方法出现了异常，那么则会将事务 进行回滚。</p><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><ul><li>默认级别 </li><li>read uncommitted（未提交读）</li><li>read committed（提交读、不可重复读）</li><li>repeatable read（可重复读）</li><li>serializable（可序列化）</li></ul><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>数据库的配置隔离级别是Read Commited,而Spring配置的隔离级别是Repeatable Read，请问这时隔离 级别是以哪一个为准？</p><p> <strong>以Spring配置的为准</strong>，如果spring设置的隔离级别数据库不支持，效果取决于数据库</p><h2 id="传播机制"><a href="#传播机制" class="headerlink" title="传播机制"></a>传播机制</h2><p>多个事务方法相互调用时,事务如何在这些方法间传播。</p><ul><li>REQUIRED(Spring默认的事务传播类型)：如果当前没有事务，则自己新建一个事务，如果当前存在事 务，则加入这个事务</li><li>SUPPORTS：当前存在事务，则加入当前事务，如果当前没有事务，就以非事务方法执行</li><li>MANDATORY：当前存在事务，则加入当前事务，如果当前事务不存在，则抛出异常。</li><li>REQUIRES_NEW：创建一个新事务，如果存在当前事务，则挂起该事务。</li><li>NOT_SUPPORTED：以非事务方式执行,如果当前存在事务，则挂起当前事务</li><li>NEVER：不使用事务，如果当前事务存在，则抛出异常 </li><li>NESTED：如果当前事务存在，则在嵌套事务中执行，否则REQUIRED的操作一样（开启一个事务）</li></ul><blockquote><p>NESTED和REQUIRES_NEW的区别 REQUIRES_NEW是新建一个事务并且新开启的这个事务与原有事务无关，而NESTED则是当前存在事务时（我 们把当前事务称之为父事务）会开启一个嵌套事务（称之为一个子事务）。 在NESTED情况下父事务回滚时， 子事务也会回滚，而在REQUIRES_NEW情况下，原有事务回滚，不会影响新开启的事务。</p></blockquote><blockquote><p>NESTED和REQUIRED的区别 REQUIRED情况下，调用方存在事务时，则被调用方和调用方使用同一事务，那么被调用方出现异常时，由于 共用一个事务，所以无论调用方是否catch其异常，事务都会回滚 而在NESTED情况下，被调用方发生异常 时，调用方可以catch其异常，这样只有子事务回滚，父事务不受影响</p></blockquote><h2 id="事务失效"><a href="#事务失效" class="headerlink" title="事务失效"></a>事务失效</h2><p>失效的根本原因是这个AOP不起作用了！</p><p>常见情况：</p><ul><li><p>发生自调用，类里面使用this调用本类的方法（this通常省略），此时这个this对象不是代理类，而 是UserService对象本身！</p><p> 解决方法很简单，让那个this变成UserService的代理类即可！ </p></li><li><p>方法不是public的</p><p>@Trans actional 只能用于 public 的方法上，否则事务不会失效，如果要用在非 public 方法上，可 以开启 AspectJ 代理模式</p></li><li><p>数据库不支持事务</p></li><li><p>没有被spring管理</p></li><li><p>异常被吃掉，事务不会回滚(或者抛出的异常没有被定义，默认为RuntimeException)</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring_boot七彩佛祖</title>
    <link href="/posts/7999/"/>
    <url>/posts/7999/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220314133228450.png" alt="七彩佛祖"></p><span id="more"></span><h1 id="快速设置"><a href="#快速设置" class="headerlink" title="快速设置"></a>快速设置</h1><h2 id="文件位置"><a href="#文件位置" class="headerlink" title="文件位置"></a>文件位置</h2><p>新建<code>banner.txt</code> 文件，程序会自动检索加载，覆盖原有banner。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220314131736647.png" alt="banner位置"></p><h2 id="banner-txt内容"><a href="#banner-txt内容" class="headerlink" title="banner.txt内容"></a>banner.txt内容</h2><figure class="highlight txt"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs txt">$&#123;AnsiColor.BRIGHT_GREEN&#125;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$<br>$&#123;AnsiColor.BRIGHT_YELLOW&#125;$$                                _.ooOoo._                               $$<br>$&#123;AnsiColor.BRIGHT_RED&#125;$$                               o888888888o                              $$<br>$&#123;AnsiColor.BRIGHT_CYAN&#125;$$                               88&quot;  .  &quot;88                              $$<br>$&#123;AnsiColor.BRIGHT_MAGENTA&#125;$$                               (|  ^_^  |)                              $$<br>$&#123;AnsiColor.BRIGHT_GREEN&#125;$$                               O\   =   /O                              $$<br>$&#123;AnsiColor.BRIGHT_RED&#125;$$                            ____/`-----&#x27;\____                           $$<br>$&#123;AnsiColor.BRIGHT_CYAN&#125;$$                          .&#x27;  \\|       |$$  `.                         $$<br>$&#123;AnsiColor.BRIGHT_MAGENTA&#125;$$                         /  \\|||   :   |||$$  \                        $$<br>$&#123;AnsiColor.BRIGHT_GREEN&#125;$$                        /  _|||||  -:-  |||||-  \                       $$<br>$&#123;AnsiColor.BRIGHT_YELLOW&#125;$$                        |   | \\\   -   $$/ |   |                       $$<br>$&#123;AnsiColor.BRIGHT_GREEN&#125;$$                        | \_|  &#x27;&#x27;\-----/&#x27;&#x27;  |   |                       $$<br>$&#123;AnsiColor.BRIGHT_YELLOW&#125;$$                        \  .-\___  `-`  ____/-. /                       $$<br>$&#123;AnsiColor.BRIGHT_CYAN&#125;$$                      ___`. .&#x27;   /--.--\   `. . ___                     $$<br>$&#123;AnsiColor.BRIGHT_RED&#125;$$                    .&quot;&quot; &#x27;&lt;  `.____\_&lt;|&gt;_/____.&#x27;  &gt;&#x27;&quot;&quot;.                  $$<br>$&#123;AnsiColor.BRIGHT_GREEN&#125;$$                  | | :  `- \`.;`.\ _ /``;.`/ - ` : | |                 $$<br>$&#123;AnsiColor.BRIGHT_YELLOW&#125;$$                  \  \ `-.   \_ ___\ /___ _/   .-` /  /                 $$<br>$&#123;AnsiColor.BRIGHT_CYAN&#125;$$            ========`-.____`-.____\_____/____.-`____.-&#x27;========         $$<br>$&#123;AnsiColor.BRIGHT_MAGENTA&#125;$$                                  `=---=&#x27;                               $$<br>$&#123;AnsiColor.BRIGHT_YELLOW&#125;$$            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        $$<br>$&#123;AnsiColor.BRIGHT_GREEN&#125;$$                     佛祖保佑          永无BUG         永不修改         $$<br>$&#123;AnsiColor.BRIGHT_YELLOW&#125;$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$<br>                     $&#123;AnsiColor.BRIGHT_YELLOW&#125;Spring Boot: $&#123;spring-boot.formatted-version&#125;<br></code></pre></div></td></tr></table></figure><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220314133228450.png" alt="效果图"></p><h1 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h1><h2 id="banner-txt配置"><a href="#banner-txt配置" class="headerlink" title="banner.txt配置"></a>banner.txt配置</h2><ul><li><code>$&#123;AnsiColor.BRIGHT_YELLOW&#125;</code>：设置控制台中输出内容的颜色</li><li><code>$&#123;application.version&#125;</code>：用来获取<code>MANIFEST.MF</code>文件中的版本号</li><li><code>$&#123;application.formatted-version&#125;</code>：格式化后的<code>$&#123;application.version&#125;</code>版本信息</li><li><code>$&#123;spring-boot.version&#125;</code>：Spring Boot的版本号</li><li><code>$&#123;spring-boot.formatted-version&#125;</code>：格式化后的<code>$&#123;spring-boot.version&#125;</code>版本信息</li></ul><h2 id="关闭banner"><a href="#关闭banner" class="headerlink" title="关闭banner"></a>关闭banner</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication springApplication = <span class="hljs-keyword">new</span> SpringApplication(Application.class);<br>        <span class="hljs-comment">//Banner.Mode.OFF 关闭</span><br>        springApplication.setBannerMode(Banner.Mode.OFF);<br>        springApplication.run(args);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="定制banner"><a href="#定制banner" class="headerlink" title="定制banner"></a>定制banner</h2><ul><li><a href="http://patorjk.com/software/taag">http://patorjk.com/software/taag</a></li><li><a href="http://www.network-science.de/ascii/">http://www.network-science.de/ascii/</a></li><li><a href="http://www.degraeve.com/img2txt.php">http://www.degraeve.com/img2txt.php</a></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.cnblogs.com/jxd283465/p/11720153.html">JavaSpringBoot 佛祖保佑banner.txt</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>墨奇科技（北京）面试整理</title>
    <link href="/posts/14116/"/>
    <url>/posts/14116/</url>
    
    <content type="html"><![CDATA[<p>墨奇科技（北京）公司</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/7cc86a6e754cf298df96cdb18ebed454.png@!f_200x200" alt="公司奇科技（北京）公司"></p><p>公司：奇科技（北京）公司</p><p>场次：2022春招应届一面</p><span id="more"></span><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="实习经历"><a href="#实习经历" class="headerlink" title="实习经历"></a>实习经历</h2><p>简述过程，略</p><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="索引的作用"><a href="#索引的作用" class="headerlink" title="索引的作用"></a>索引的作用</h3><h3 id="B-树是啥，优点"><a href="#B-树是啥，优点" class="headerlink" title="B+树是啥，优点"></a>B+树是啥，优点</h3><p>回答比较尴尬，没有说到点上</p><p>叶子节点的链表没有答出来</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="线程和进程的区别"><a href="#线程和进程的区别" class="headerlink" title="线程和进程的区别"></a>线程和进程的区别</h3><h3 id="线程切换的过程"><a href="#线程切换的过程" class="headerlink" title="线程切换的过程"></a>线程切换的过程</h3><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="rebase指令"><a href="#rebase指令" class="headerlink" title="rebase指令"></a>rebase指令</h3><h3 id="项目使用到的指令"><a href="#项目使用到的指令" class="headerlink" title="项目使用到的指令"></a>项目使用到的指令</h3><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>目录路径的处理</p>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中科星图面试整理</title>
    <link href="/posts/26513/"/>
    <url>/posts/26513/</url>
    
    <content type="html"><![CDATA[<p>公司：中科星图股份有限公司</p><p>身份：2022届应届生</p><p>时间：2022/03/02</p><span id="more"></span><h1 id="中科星图面试整理"><a href="#中科星图面试整理" class="headerlink" title="中科星图面试整理"></a>中科星图面试整理</h1><h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="Java的数据类型"><a href="#Java的数据类型" class="headerlink" title="Java的数据类型"></a>Java的数据类型</h3><p>略</p><h3 id="amp-和-amp-amp-的区别"><a href="#amp-和-amp-amp-的区别" class="headerlink" title="&amp;和&amp;&amp;的区别"></a>&amp;和&amp;&amp;的区别</h3><p>&amp;：<strong>按位与</strong>和<strong>逻辑与</strong></p><p>&amp;&amp;： <strong>短路与</strong></p><h3 id="序列化和反序列"><a href="#序列化和反序列" class="headerlink" title="序列化和反序列"></a>序列化和反序列</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><blockquote><p>Java序列化：把<strong>Java对象</strong>转换为<strong>字节序列</strong>的过程</p><p>Java反序列化：指把<strong>字节序列</strong>恢复为<strong>Java对象</strong>的过程。</p></blockquote><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><blockquote><p>序列化作用：</p><ul><li>在传递和保存对象，保证对象的<strong>完整性</strong>和<strong>可传递性</strong>。</li><li>对象转换为有序字节流,便于在网络上<strong>传输</strong>或者<strong>保存</strong>在本地文件中。</li></ul><p>反序列化的作用：</p><p>根据字节流中保存的<strong>对象状态</strong>及<strong>描述信息</strong>，通过反序列化<strong>重建对象</strong></p></blockquote><p>==核心作用就是<strong>对象状态</strong>的<strong>保存</strong>和<strong>重建</strong>==</p><h4 id="应用（json-xml的数据传递）"><a href="#应用（json-xml的数据传递）" class="headerlink" title="应用（json/xml的数据传递）"></a>应用（json/xml的数据传递）</h4><blockquote><p> 在数据传输(也可称为网络传输)前，先通过序列化工具类将Java对象序列化为json/xml文件。</p><p>在数据传输(也可称为网络传输)后，再将json/xml文件反序列化为对应语言的对象</p></blockquote><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>将对象转为<strong>字节流存储到硬盘</strong>上，当<strong>JVM停机</strong>的话，字节流还会在硬盘上默默等待，等待下一次JVM的启动，把序列化的对象，通过反序列化为原来的对象，并且序列化的二进制序列能够<strong>减少存储空间</strong>（永久性保存对象）。</li><li>序列化成字节流形式的对象可以进行<strong>网络传输</strong>(二进制形式)，方便了网络传输。</li><li>通过序列化<strong>可以在进程间传递对象</strong>。</li></ul><h4 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h4><p>   1、实现序列化的必备要求：</p><p>只有实现了==Serializable==或者==Externalizable==接口的类的对象才能被序列化为字节序列。（不是则会抛出异常）</p><p>   2、JDK中序列化和反序列化的API：</p><ul><li>  java.io.ObjectInputStream：对象输入流。</li></ul><p>   该类的readObject()方法从输入流中读取字节序列，然后将字节序列<strong>反序列化</strong>为一个对象并返回。</p><ul><li> java.io.ObjectOutputStream：对象输出流。</li></ul><p>  该类的writeObject(Object obj)方法将将传入的obj对象进行序列化，把得到的字节<strong>序列化</strong>写入到目标输出流中进行输出</p><p> 3、三种实现：</p><blockquote><ul><li>Student类仅仅实现了Serializable接口</li></ul><p>ObjectOutputStream采用默认的序列化方式，对Student对象的非transient的实例变量进行序列化。<br>ObjcetInputStream采用默认的反序列化方式，对Student对象的非transient的实例变量进行反序列化。</p><ul><li>若Student类仅仅实现了Serializable接口，并且还定义了readObject(ObjectInputStream in)和writeObject(ObjectOutputSteam out)，则采用以下方式进行序列化与反序列化。</li></ul><p>ObjectOutputStream调用Student对象的writeObject(ObjectOutputStream out)的方法进行序列化。<br>ObjectInputStream会调用Student对象的readObject(ObjectInputStream in)的方法进行反序列化。</p><ul><li>若Student类实现了Externalnalizable接口，且Student类必须实现readExternal(ObjectInput in)和writeExternal(ObjectOutput out)方法，则按照以下方式进行序列化与反序列化。</li></ul><p> ObjectOutputStream调用Student对象的writeExternal(ObjectOutput out))的方法进行序列化。<br> ObjectInputStream会调用Student对象的readExternal(ObjectInput in)的方法进行反序列化</p></blockquote><p>Java有很多基础类已经实现了serializable接口，比如String,Vector等</p><h3 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h3><ul><li><p>堆是运行时确定内存大小，而栈在编译时即可确定内存大小</p><p>理由便是第一节中提到的，这是区分堆和栈的初衷</p></li><li><p>堆内存由用户管理(Java中由JVM管理)，栈内存会被自动释放</p></li><li><p>栈实现方式采用数据结构中的栈实现，具有(LIFO)的顺序特点，堆为一块一块的内存</p></li><li><p>栈由于其实现方式，在分配速度上比堆快的多。分配一块栈内存不过是简单的移动一个指针</p></li><li><p>在JVM中，栈不会被程序员直接使用，程序员操作的一般都是堆。</p></li><li><p>栈为线程私有而堆为线程共享</p></li></ul><h3 id="类加载器有哪些"><a href="#类加载器有哪些" class="headerlink" title="类加载器有哪些"></a>类加载器有哪些</h3><p><strong>classLoader作用就是负责把磁盘上的.class文件</strong> ，<strong>加载到JVM内存中，并生成</strong> <strong>java.lang.Class类的一个实例</strong>。</p><h4 id="类加载器大致分成两类"><a href="#类加载器大致分成两类" class="headerlink" title="类加载器大致分成两类"></a>类加载器大致分成两类</h4><ol><li>系统提供的</li><li>由 Java 应用开发人员编写的。</li></ol><h4 id="系统提供的类加载器主要有下面三个："><a href="#系统提供的类加载器主要有下面三个：" class="headerlink" title="系统提供的类加载器主要有下面三个："></a>系统提供的类加载器主要有下面三个：</h4><p><strong>(1):</strong> <strong>引导类加载器(Bootstrap类加载器)</strong><br>它是由c++代码实现的，是虚拟机自身的一部分。拿不到他的引用，但实际存在，并且加载一些重要的类，它加载(%JAVA_HOME%\jre\lib),如rt.jar(runtime)、i18n.jar等，这些是Java的核心类。 他是用原生代码来实现的，并<strong>不继承自 java.lang.ClassLoader</strong>。<br><strong>(2): 扩展类加载器(Extension类加载器)</strong><br>虽说能拿到，但是我们在实践中很少用到它，它主要加载扩展目录下的jar包， %JAVA_HOME%\lib\ext<br><strong>(3):</strong> <strong>系统类加载器(System类加载器)</strong><br>它主要加载我们<strong>应用程序中的类</strong>，如Test,或者用到的<strong>第三方包</strong>,如jdbc驱动包等。</p><h4 id="理解双亲委派模式"><a href="#理解双亲委派模式" class="headerlink" title="理解双亲委派模式"></a>理解双亲委派模式</h4><p>双亲委派模式中的父子关系并非通常所说的类继承关系，而是采用组合关系来复用父类加载器的相关代码。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220311124711615.png" alt="双亲委派模式示意图"></p><blockquote><p>类加载器收到了类加载请求，它并不会自己先去加载，而是先委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式，即每个儿子都很懒，每次有活就丢给父亲去干，直到父亲说这件事我也干不了时，儿子自己想办法去完成。<br>引用：<a href="https://blog.csdn.net/javazejian/article/details/73413292">深入理解Java类加载器(ClassLoader)</a></p></blockquote><p><strong>优势</strong></p><ul><li>避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。</li><li>安全因素，java核心api中定义类型不会被随意替换，防止核心API库被随意篡改。</li></ul><h3 id="List的子类和Map的子类"><a href="#List的子类和Map的子类" class="headerlink" title="List的子类和Map的子类"></a>List的子类和Map的子类</h3><p>见博客<a href="https://septzhang.xyz/posts/16601/#Java%E9%9B%86%E5%90%88%E6%9C%89%E5%93%AA%E4%BA%9B"> Java集合有哪些</a></p><h3 id="HashMap的默认长度"><a href="#HashMap的默认长度" class="headerlink" title="HashMap的默认长度"></a>HashMap的默认长度</h3><p>默认HashMap内部数组的长度为<strong>16</strong>，负载因子为0.75，就是在构造函数里面传的两个值。 阈值就是12（16*0.75=12），这样当第十三个元素加入时，底层数组就会扩容。</p><h2 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h2><h3 id="controller的实现过程"><a href="#controller的实现过程" class="headerlink" title="controller的实现过程"></a>controller的实现过程</h3><h3 id="标记pojo的注"><a href="#标记pojo的注" class="headerlink" title="标记pojo的注"></a>标记pojo的注</h3><p>@Component</p><h3 id="AOP的通知"><a href="#AOP的通知" class="headerlink" title="AOP的通知"></a>AOP的通知</h3><p>前置通知：在我们执行目标方法之前运行（**@Before**）</p><p>后置通知：在我们目标方法运行结束之后，不管有没有异常（**@After**）</p><p>返回通知：在我们的目标方法正常返回值后运行（**@AfterReturning**）</p><p>异常通知：在我们的目标方法出现异常后运行（**@AfterThrowing**）</p><p>环绕通知：目标方法的调用由环绕通知决定，即你可以决定是否调用目标方法，joinPoint.procced()就是执行目标方法的代码 。环绕通知可以控制返回对象(<strong>@Around</strong>)</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><h3 id="Sleep和Write的区别"><a href="#Sleep和Write的区别" class="headerlink" title="Sleep和Write的区别"></a>Sleep和Write的区别</h3><p>sleep是线程类（Thread）的方法，导致此<strong>线程暂停</strong>执行并<strong>指定时间</strong>，将执行机会给其他线程，但是<strong>监控状态依然保持</strong>，到时后会<strong>自动恢复</strong>。调用sleep<strong>不会释放对象锁</strong>。</p><p>wait是Object类的方法，对此对象调用wait方法导致本线程<strong>放弃对象锁</strong>，进入等待此<strong>对象的等待锁定池</strong>。只有针对此对象发出==<code>notify</code>方法（或notifyAll）==后，本线程才进入对象锁定池准备获得对象锁进入运行状态。</p><h3 id="多线程的创建方法"><a href="#多线程的创建方法" class="headerlink" title="多线程的创建方法"></a>多线程的创建方法</h3><ol><li>继承Thread类创建线程类</li><li>实现Runnable接口创建线程类</li><li>通过Callable和Future接口创建线程</li></ol><blockquote><p><strong>继承Thread类：</strong></p><p>优点：</p><p>1、实现起来简单，而且要获取当前线程，无需调用Thread.currentThread()方法，直接使用this即可获取当前线程；</p><p>缺点：</p><p>1、线程类已经继承Thread类了，就不能再继承其他类；</p><p>2、多个线程不能共享同一份资源（如前面分析的成员变量 i ）；</p><p><strong>实现Runnable接口或者Callable接口：</strong></p><p>优点（推荐）：</p><p>1、线程类只是实现了接口，<strong>还可以继承其他类</strong>；</p><p>2、==线程间资源共享==。多个线程可以<strong>共用一个target对象</strong>，适合多个线程处理同一份资源的情况。</p><p>缺点：</p><p>1、通过这种方式实现多线程，相较于第一类方式，<strong>编程较复杂</strong>；</p><p>2、要<strong>访问当前线程</strong>，必须调用Thread.currentThread()方法。<br>————————————————<br>参考： <a href="https://blog.csdn.net/yangyechi/article/details/88079983">JAVA多线程的三种创建方式</a></p></blockquote><h3 id="run和start的区别"><a href="#run和start的区别" class="headerlink" title="run和start的区别"></a>run和start的区别</h3><p>start()能够异步调用run()，直接调用run()只能是同步的，要实现多线程**只能使用 start()**。</p><h3 id="用过哪些JUC的方法"><a href="#用过哪些JUC的方法" class="headerlink" title="用过哪些JUC的方法"></a>用过哪些JUC的方法</h3><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="DML的类型"><a href="#DML的类型" class="headerlink" title="DML的类型"></a>DML的类型</h3><h3 id="Like的匹配符"><a href="#Like的匹配符" class="headerlink" title="Like的匹配符"></a>Like的匹配符</h3><h3 id="Delete和Dort的区别"><a href="#Delete和Dort的区别" class="headerlink" title="Delete和Dort的区别"></a>Delete和Dort的区别</h3><h3 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h3><h3 id="隔离等级"><a href="#隔离等级" class="headerlink" title="隔离等级"></a>隔离等级</h3><h3 id="SQL执行计划"><a href="#SQL执行计划" class="headerlink" title="SQL执行计划"></a>SQL执行计划</h3><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p>略</p><h3 id="查看日志的指令"><a href="#查看日志的指令" class="headerlink" title="查看日志的指令"></a>查看日志的指令</h3><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/tree_ifconfig/article/details/82766587">序列化和反序列化的详解</a></p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java浅谈clone</title>
    <link href="/posts/23236/"/>
    <url>/posts/23236/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/default.jpeg" alt="default"></p><p>主要是java浅克隆和深克隆的区别和实现。</p><p>（内容丢失）</p><span id="more"></span><p>Student对象(浅克隆)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> clone;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> id;<br><span class="hljs-keyword">public</span> String name;<br><br><span class="hljs-keyword">public</span> Student student;<br><span class="hljs-comment">//引用对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayName</span><span class="hljs-params">()</span> </span>&#123;<br>System.out.println(<span class="hljs-keyword">this</span>.name);<br>System.out.println(<span class="hljs-keyword">this</span>.student.name);<br>&#125;<br><br><span class="hljs-comment">//实现浅克隆</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated constructor stub</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-comment">// TODO Auto-generated constructor stub</span><br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.name = name;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setStudent</span><span class="hljs-params">(Student student)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.student = student;<br>&#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> clone;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentText</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br><br>Student a = <span class="hljs-keyword">new</span> Student();<br>a.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br><span class="hljs-comment">//设置a的引用对象</span><br>a.setStudent(<span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;学孙1&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;学生a：&quot;</span>);<br>a.sayName();<br><br><span class="hljs-comment">//浅克隆 a 对象为 b</span><br>Student b = (Student) a.clone();<br>System.out.println(<span class="hljs-string">&quot;学生b：&quot;</span>);<br>b.sayName();<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL索引</title>
    <link href="/posts/33592/"/>
    <url>/posts/33592/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/default.png" alt="远山"></p><p>记录在学习数据库索引的过程中，经常遇到的问题。</p><p>（内容丢失）</p><span id="more"></span><h1 id="数据库的索引"><a href="#数据库的索引" class="headerlink" title="数据库的索引"></a>数据库的索引</h1>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>索引</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>山东华软金科面试题整理</title>
    <link href="/posts/48207/"/>
    <url>/posts/48207/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/6b2dc9d4d701350f5ddfe64b68d094ab.png" alt="普元数智"></p><p>对象：山东华软金科公司（简称“普元数智”）</p><p>待遇：3k（实习生）/4k-6k（转正）</p><p>难度：0.5（满分1）</p><p>项目：银行IT系统，手机银行、信贷系统等</p><span id="more"></span><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><h3 id="一个学生表，查询每个班级多少人-写出SQL语句"><a href="#一个学生表，查询每个班级多少人-写出SQL语句" class="headerlink" title="一个学生表，查询每个班级多少人,写出SQL语句"></a>一个学生表，查询每个班级多少人,写出SQL语句</h3><p>SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT COUNT(*) FROM table_name GROUP BY column_name<br></code></pre></div></td></tr></table></figure><h3 id="内链接和左连接的区别"><a href="#内链接和左连接的区别" class="headerlink" title="内链接和左连接的区别"></a>内链接和左连接的区别</h3><ul><li>内连接（等值连接）获取两表中字段匹配关系的记录。</li><li>左连接： 获取左表所有数据，即使右表无数据。</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">SELECT a.id, a.author, a.count FROM table_name a ,INNER JOIN table_name2 b ON a.author &#x3D; b.author;<br></code></pre></div></td></tr></table></figure><p><code>LEFT JOIN</code> 和 <code>RIGHT JOIN</code> 用法相似。</p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Mybatis中标记变量的符号，以及差别（SQL注入）"><a href="#Mybatis中标记变量的符号，以及差别（SQL注入）" class="headerlink" title="Mybatis中标记变量的符号，以及差别（SQL注入）"></a>Mybatis中标记变量的符号，以及差别（SQL注入）</h3><p>$和#</p><p>#可以防止SQL注入</p><h3 id="SSM从controller开始，从上往下分那几层"><a href="#SSM从controller开始，从上往下分那几层" class="headerlink" title="SSM从controller开始，从上往下分那几层"></a>SSM从controller开始，从上往下分那几层</h3><p>略</p><h3 id="数据库事务控制在那一层，事务控制有几种写法"><a href="#数据库事务控制在那一层，事务控制有几种写法" class="headerlink" title="数据库事务控制在那一层，事务控制有几种写法"></a>数据库事务控制在那一层，事务控制有几种写法</h3><p>Services层</p><h3 id="什么是AOP，那些事物适合AOP实现"><a href="#什么是AOP，那些事物适合AOP实现" class="headerlink" title="什么是AOP，那些事物适合AOP实现"></a>什么是AOP，那些事物适合AOP实现</h3><p>AOP为Aspect Oriented Programming的缩写。通过<strong>预编译方式</strong>和<strong>运行期间动态代理</strong>==实现程序功能的统一维护==的一种技术。</p><blockquote><p>应用：</p><p>​        日志记录，性能统计，安全控制，事务处理，异常处理等等。</p></blockquote><h3 id="什么是事务，阐述事物的原子性（回滚）"><a href="#什么是事务，阐述事物的原子性（回滚）" class="headerlink" title="什么是事务，阐述事物的原子性（回滚）"></a>什么是事务，阐述事物的原子性（回滚）</h3><p>事务是一种操作，用来==<strong>处理操作量大，复杂度高的数据</strong>== 。</p><blockquote><p>特点：</p><ol><li>MySQL只有InnoDB支持事务</li><li>保证事物的完整性</li><li>管理INSERT、UPDATAE、DELETE语句</li></ol></blockquote><h3 id="什么是声明式事务"><a href="#什么是声明式事务" class="headerlink" title="什么是声明式事务"></a>什么是声明式事务</h3><p><strong>声明式事务</strong>：该事务是建立在AOP之上的，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或加入一个事务，在执行完目标方法之后根据执行情况提交或回滚事务。</p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="前端页面数据的提交方式"><a href="#前端页面数据的提交方式" class="headerlink" title="前端页面数据的提交方式"></a>前端页面数据的提交方式</h3><ol><li>通过网络连接提交——GET URL</li><li>通过表单提交——POST multipart/form-data</li><li>通过AJAX（Asynchronous JavaScript and XML）提交——POST application/json</li><li>文件上传——POST application/x-www-form-urlencode</li></ol><p>一个GET三个POST</p><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><ol><li>POST相对<strong>安全</strong>。GET提交的数据放在URL中，POST则不会（POST也不安全，因为HTTP是明文传输抓包就能获取数据内容，要想安全还得加密）。</li><li>GET<strong>回退</strong>浏览器无害，POST会再次提交请求（GET方法回退后浏览器再<strong>缓存</strong>中拿结果，POST每次都会<strong>创建新资源</strong>）。</li><li>GET提交的<strong>数据大小</strong>有限制（是因为==浏览器==对URL的长度有限制，GET本身没有限制），POST没有。</li><li>GET可以被保存为<strong>书签</strong>和浏览器历史记录中，POST不可以。</li><li>GET能被<strong>缓存</strong>，POST不能。</li><li>GET只允许<strong>ASCII字符</strong>，POST没有限制。</li></ol><h3 id="表单数据的提交方法"><a href="#表单数据的提交方法" class="headerlink" title="表单数据的提交方法"></a>表单数据的提交方法</h3><ol><li><p>json格式提交</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&quot;#button_submit&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> name = $(<span class="hljs-string">&quot;#userName&quot;</span>).val();<br>        <span class="hljs-keyword">var</span> pass = $(<span class="hljs-string">&quot;#password&quot;</span>).val();<br>   <br>        <span class="hljs-keyword">var</span> user = &#123;<span class="hljs-attr">userName</span>:name,<span class="hljs-attr">password</span>:pass&#125;;<span class="hljs-comment">//拼装成json格式</span><br>        <br>        $.ajax(&#123;<br>            type:<span class="hljs-string">&quot;POST&quot;</span>,<br>            url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/addUser4&quot;</span>,<br>            data:user,<br>            success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>                alert(<span class="hljs-string">&quot;成功&quot;</span>);<br>            &#125;,<br>            error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                alert(<span class="hljs-string">&quot;出错：&quot;</span>+e);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li><li><p>序列化表单提交</p><p>如果表单元素很多，手工拼装成json数据非常麻烦，可以使用jQuery提供的serializeArray()方法序列化表单元素，返回json数据结构数据。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    $(<span class="hljs-string">&quot;#button_submit&quot;</span>).click(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <br>        <span class="hljs-comment">//序列化表单元素，返回json数据</span><br>        <span class="hljs-keyword">var</span> params = $(<span class="hljs-string">&quot;#userForm&quot;</span>).serializeArray();<br>   <br>        <span class="hljs-comment">//也可以把表单之外的元素按照name value的格式存进来</span><br>        <span class="hljs-comment">//params.push(&#123;name:&quot;hello&quot;,value:&quot;man&quot;&#125;);</span><br>   <br>        $.ajax(&#123;<br>            type:<span class="hljs-string">&quot;POST&quot;</span>,<br>            url:<span class="hljs-string">&quot;$&#123;pageContext.request.contextPath&#125;/user/addUser5&quot;</span>,<br>            data:params,<br>            success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>                alert(<span class="hljs-string">&quot;成功&quot;</span>);<br>            &#125;,<br>            error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>                alert(<span class="hljs-string">&quot;出错：&quot;</span>+e);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;);<br></code></pre></div></td></tr></table></figure></li></ol><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><h3 id="项目依赖jar包的配置文件-依赖jar包的存放位置"><a href="#项目依赖jar包的配置文件-依赖jar包的存放位置" class="headerlink" title="项目依赖jar包的配置文件,依赖jar包的存放位置"></a>项目依赖jar包的配置文件,依赖jar包的存放位置</h3><p>配置文件： <code>pom.xml</code></p><p>存放位置： 本地maven仓库，在<code>setting.xml</code> 中可以更改。</p><h2 id="版本管理工具"><a href="#版本管理工具" class="headerlink" title="版本管理工具"></a>版本管理工具</h2><h3 id="有哪些"><a href="#有哪些" class="headerlink" title="有哪些"></a>有哪些</h3><ul><li>Git</li><li>SVN</li><li>HG</li><li>CVS</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>面试后端和数据库的内容回答的不错，但是MyBatis回答的一般，事务操作和前端知识回答的一塌糊度。询问问题时可能会有面临全干工程师的危险。。。。。。。</p><p>面试官态度很友善，主动帮助捋顺思路。</p>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库设计的字段选择</title>
    <link href="/posts/37843/"/>
    <url>/posts/37843/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/a58cbbffd2aa49c1b1e99990be912f30.jpg" alt="远山"></p><p>记录数据库设计时，字段设计的一些原则。</p><span id="more"></span><h1 id="数据库设计时，字段如何选择"><a href="#数据库设计时，字段如何选择" class="headerlink" title="数据库设计时，字段如何选择"></a>数据库设计时，字段如何选择</h1><h2 id="类型优先级"><a href="#类型优先级" class="headerlink" title="类型优先级"></a>类型优先级</h2><p>整形 &gt; date/time &gt; enum char &gt; varchar &gt; blob,text</p><ol><li>字段长度最小</li><li>优先使用定长</li><li>数值型字段避免使用<code>ZEROFILL</code></li></ol><blockquote><ul><li>time：定长运算快，节省时间，考虑时区，写SQL不方便</li><li>enum：能起到约束值的目的，内部用整形存储，但是使用<code>char</code>联查时，内部需要经历串与值的转换</li><li>char： 定长，考虑字符集和校对集</li><li>varchar： 不定长，考虑字符集的转换和排序时的校对，速度慢</li><li>text/blob： 无法使用内存临时表（排序操作只能在磁盘上进行）</li><li></li></ul></blockquote><h2 id="能用整型就不用字符串"><a href="#能用整型就不用字符串" class="headerlink" title="能用整型就不用字符串"></a>能用整型就不用字符串</h2><ul><li>整型是定长的，没有没有字符集差异（没有国家和地区差异）。</li><li>字符串（char）需要考虑字符集和校对集（比如相同长度的tinyint和varchar（1），tinyint的分组更快）</li></ul><h2 id="够用就行，刚刚好就行"><a href="#够用就行，刚刚好就行" class="headerlink" title="够用就行，刚刚好就行"></a>够用就行，刚刚好就行</h2><p>大的字段影响内存速度。</p><table><thead><tr><th>内容</th><th>字段</th></tr></thead><tbody><tr><td>年龄</td><td>TINYINT UNSIGNED NOT NULL;</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p>VARCHAR（n）中n越小越好。</p><h2 id="尽量避免用NULL"><a href="#尽量避免用NULL" class="headerlink" title="尽量避免用NULL"></a>尽量避免用NULL</h2><p>NULL不利于索引，也不利于查询。可以在创建字段时使用<code>NOT NULL DEFAULT</code>。</p><h2 id="char和vachar"><a href="#char和vachar" class="headerlink" title="char和vachar"></a>char和vachar</h2><ul><li>CHAR：    <ul><li>定长</li><li>处理速度更快</li><li>费存储空间</li></ul></li><li>VARCHAR：<ul><li>不定长</li><li>处理速度较慢</li><li>节省存储空间</li></ul></li></ul><p>根据<strong>处理速度</strong>和<strong>存储空间</strong>做出两者的选择</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL的存储引擎</title>
    <link href="/posts/23763/"/>
    <url>/posts/23763/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/5af17f7f881b11ebb6edd017c2d2eca2.jpg" alt="你在瞅啥"></p><p>主要介绍MySQL 的常见的四种储存引擎的特点。</p><span id="more"></span><h1 id="MySQL体系架构"><a href="#MySQL体系架构" class="headerlink" title="MySQL体系架构"></a>MySQL体系架构</h1><p><strong>插件式</strong>的表存储引擎。</p><p><strong>优势:可以根据具体的应用建立不同的存储引擎表。</strong></p><h2 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h2><ul><li>默认引擎。</li><li>事务型引擎。</li><li>最重要、使用最广泛。</li><li>处理大量短期（short-live）事务。</li></ul><h2 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h2><ul><li>高速引擎</li><li>前默认引擎（5.1之前）</li><li>不支持事务和行级锁</li><li>崩溃后无法安全修复</li><li>表级锁，容易产生性能问题</li></ul><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><ul><li>极高速引擎。比MyISAM快一个数量级（10倍）</li><li>支持插入、更新、查询</li><li>文件存储在内存中</li><li>重启表结构保存，数据丢失</li><li>应用： 查找（lookup）/映射表（mapping）、缓存周期性聚合数据（periodically aggregated data）的结果、保存数据分析的中间数据。</li></ul><h2 id="Archive"><a href="#Archive" class="headerlink" title="Archive"></a>Archive</h2><ul><li>仅支持INSERT和SELECT操作。缓存所有写。</li><li>磁盘IO少（较其他）。利用zlib对插入的行进行压缩。</li><li>SELECT是全表扫描</li><li>应用： 日志、数据采集类应用</li></ul><h2 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h2><ul><li>可以直接处理CSV文件</li><li>不支持索引</li><li>应用： 跨平台数据交换</li></ul><h2 id="FaIcon"><a href="#FaIcon" class="headerlink" title="FaIcon"></a>FaIcon</h2><ul><li>支持事务</li></ul><h1 id="InnoDB和MyISAM对比"><a href="#InnoDB和MyISAM对比" class="headerlink" title="InnoDB和MyISAM对比"></a>InnoDB和MyISAM对比</h1><ol><li>事务。InnoDB支持事务。</li><li>外键。InnoDb支持外键。（包含外键的InnoDB转换MyISAM会失败）</li><li>聚集索引。InnoDB支持聚集索引。<ul><li>InnoDB<ol><li>聚集索引文件保存在<strong>主键索引的叶子节点</strong>上，因此InnoDB必须要有主键。</li><li>主键索引效率高，但是辅助索引要查询两次（先查询主键，再通过主键查询数据）</li><li>因此主键不能太大，防止其他索引也会很大</li></ol></li><li>MyISAM<ul><li>数据文件分离</li><li>索引保存数据文件的指针</li><li>主键索引和辅助索引相互独立</li></ul></li></ul></li><li>查询速度。<ul><li>InnoDB不保存集体行数，执行<code>SELECT COUNT(*) FROM table</code>，全表搜索。</li><li>MyISAM使用变量记录表的行数，对于上述语句执行很快。</li></ul></li><li>最小锁粒度。<ul><li>InnoDB是行锁</li><li>MyISAM是表锁，会导致其他操作被阻塞，因此并发访问受限。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>MySLQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>存储引擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>上海万得面试整理</title>
    <link href="/posts/16601/"/>
    <url>/posts/16601/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/pexels-skylar-kang-6378158.jpg" alt="Pexels 上的 Skylar Kang 拍摄的图片"></p><p>参加上海万得信息技术股份有限公司的面试整理。</p><span id="more"></span><h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><p>完成一个程序设计。已上传GitHub：</p><p>题目在仓库的readme.md文档</p><p><a href="https://github.com/septzhang/FTPServer">服务端</a></p><p><a href="https://github.com/septzhang/FTPClient">客户端</a></p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><p>连续使用腾讯会议参加了两场技术面试，第一场还是一个学长，表现不错；第二场是一个稍微年长一些的面试官，表现不好，这次比较抓基础，算法和框架原理一类的。</p><h3 id="Java集合有哪些"><a href="#Java集合有哪些" class="headerlink" title="Java集合有哪些"></a>Java集合有哪些</h3><ul><li><code>Collection</code> 接口和 <code>Map</code> 接口是所有集合框架的父接口</li><li>Set 不重复元素</li><li>List 有序可重复集合，索引访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220218141549483.png" alt="collection"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20220218141524461.png" alt="Map"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/20181025231543126.png" alt="比较表格"></p><h3 id="MySQL的调优方案"><a href="#MySQL的调优方案" class="headerlink" title="MySQL的调优方案"></a>MySQL的调优方案</h3><h4 id="SQL调优"><a href="#SQL调优" class="headerlink" title="SQL调优"></a>SQL调优</h4><p>获取有性能问题的 SQL </p><ul><li><p>通过慢查<strong>日志</strong>获取存在性能问题的 SQL；</p><blockquote><h5 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h5><ul><li>性能开销比较低，主要关注<strong>磁盘空间</strong>。主要性能开销在磁盘 IO 和存储日志所需要的磁盘空间。对于磁盘 IO 来说，由于写日志是顺序存储，<strong>IO开销基本上忽略不计</strong>。</li><li>日志记录<strong>所有符合条件的 SQL</strong>。包括查询语句、数据修改语句、已经回滚的 SQL。</li></ul></blockquote></li><li><p><strong>实时获取</strong>存在性能问题的 SQL</p><p>通过information_schema库中的processlist表进行查看 </p></li></ul><h4 id="数据库引擎调优"><a href="#数据库引擎调优" class="headerlink" title="数据库引擎调优"></a>数据库引擎调优</h4><h5 id="选择引擎"><a href="#选择引擎" class="headerlink" title="选择引擎"></a>选择引擎</h5><h6 id="InnoDB（行锁）："><a href="#InnoDB（行锁）：" class="headerlink" title="InnoDB（行锁）："></a>InnoDB（行锁）：</h6><p>行锁：仅支持一个事务操作数据库表的某一行数据，当一个事务拿到行锁，另一事物无法操作此行数据包括select</p><p>优点：粒度小、支持CRUD事务</p><p>缺点：获取锁和释放锁需要花费资源、容易发生死锁</p><h6 id="共享锁（读）："><a href="#共享锁（读）：" class="headerlink" title="共享锁（读）："></a>共享锁（读）：</h6><p>允许多个事务共用一行数据，在修改表数据时不能使用此情况</p><h6 id="排他锁（写，默认）："><a href="#排他锁（写，默认）：" class="headerlink" title="排他锁（写，默认）："></a>排他锁（写，默认）：</h6><p>一个事务拿到行锁后，另一事务无法操作查询此行数据，直到提交或回滚释放锁。容易发生死锁</p><h6 id="优化："><a href="#优化：" class="headerlink" title="优化："></a>优化：</h6><p>1.控制事务的大小不宜过大，否则会占用行锁时间过长，影响其他事务的效率</p><p>2.尽可能使用索引作为过滤条件，提升sql操作的效率，减少事务花费的时间</p><p>3.合理设计索引</p><p>4.业务允许的话，可以适当降低隔离级别</p><h3 id="JVM的了解"><a href="#JVM的了解" class="headerlink" title="JVM的了解"></a>JVM的了解</h3><h3 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h3><h3 id="数据库的索引"><a href="#数据库的索引" class="headerlink" title="数据库的索引"></a>数据库的索引</h3><ul><li></li></ul><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><h3 id="Linux的使用经验"><a href="#Linux的使用经验" class="headerlink" title="Linux的使用经验"></a>Linux的使用经验</h3><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>项目没有问</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/baidu_34122324/article/details/83388175">Java常见集合有哪些？</a></p>]]></content>
    
    
    <categories>
      
      <category>面试题</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客更改日记</title>
    <link href="/posts/60073/"/>
    <url>/posts/60073/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/5848e4a37f5e4fb39f4c4384a9c27523.jpg" alt="静"></p><p>记录我对HEXO博客的配置更改记录，作换系统时还原配置使用。</p><span id="more"></span><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>‘hexo d’ 上传失败，停留在writing objects。</p><h2 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h2><p>2020/02/17</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>有上传比较大的文件。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">$ git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global http.postBuffer 524288000</span><br></code></pre></div></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p> 因为http.postBuffer默认上限为1M,上面的命令是把git的配置里http.postBuffer的变量改大为500M</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="Hexo-abbrlink-生成唯一永久文章链接"><a href="#Hexo-abbrlink-生成唯一永久文章链接" class="headerlink" title="Hexo-abbrlink 生成唯一永久文章链接"></a>Hexo-abbrlink 生成唯一永久文章链接</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">npm install hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">permalink:</span> posts/:abbrlink.html  <span class="hljs-meta"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="hljs-symbol">abbrlink:</span><br><span class="hljs-symbol">    alg:</span> crc32   <span class="hljs-meta">#算法： crc16(default) and crc32</span><br><span class="hljs-symbol">    rep:</span> hex     <span class="hljs-meta">#进制： dec(default) and hex</span><br></code></pre></div></td></tr></table></figure><p>示例(官方)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">crc16 &amp; hex<br>https:<span class="hljs-regexp">//</span>post.zz173.com<span class="hljs-regexp">/posts/</span><span class="hljs-number">66</span>c8.html<br><br>crc16 &amp; dec<br>https:<span class="hljs-regexp">//</span>post.zz173.com<span class="hljs-regexp">/posts/</span><span class="hljs-number">65535</span>.html<br>crc32 &amp; hex<br>https:<span class="hljs-regexp">//</span>post.zz173.com<span class="hljs-regexp">/posts/</span><span class="hljs-number">8</span>ddf18fb.html<br><br>crc32 &amp; dec<br>https:<span class="hljs-regexp">//</span>post.zz173.com<span class="hljs-regexp">/posts/</span><span class="hljs-number">1690090958</span>.html<br></code></pre></div></td></tr></table></figure><h2 id="hexo-generator-feed-生成-RSS-文件的插件"><a href="#hexo-generator-feed-生成-RSS-文件的插件" class="headerlink" title="hexo-generator-feed 生成 RSS 文件的插件"></a>hexo-generator-feed 生成 RSS 文件的插件</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> hexo-generator-feed<br></code></pre></div></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dts">YAML<br><span class="hljs-meta"># Extensions</span><br><span class="hljs-symbol">plugins:</span><br>    hexo-generator-feed<br><span class="hljs-meta">#Feed Atom</span><br><span class="hljs-symbol">feed:</span><br><span class="hljs-symbol">    type:</span> atom <span class="hljs-meta"># 生成的类型，RSS对应atom</span><br><span class="hljs-symbol">    path:</span> atom.xml <span class="hljs-meta"># 生成的文件名</span><br><span class="hljs-symbol">    limit:</span> <span class="hljs-number">20</span> <span class="hljs-meta"># 选取推送的文章数量</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>零散Java知识点</title>
    <link href="/posts/54344/"/>
    <url>/posts/54344/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/286484bdc06b47dab2f5cdb9a3ca86e2%20(1).jpg"></p><p>笔者在复习Java基础知识时，整理的高频知识点。</p><span id="more"></span><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h2><table><thead><tr><th>变量名称</th><th>字节</th><th>位数</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>8</td></tr><tr><td>short</td><td>2</td><td>16</td></tr><tr><td>int</td><td>4</td><td>32</td></tr><tr><td>long</td><td>8</td><td>64</td></tr><tr><td>float</td><td>4</td><td>32</td></tr><tr><td>double</td><td>8</td><td>64</td></tr><tr><td>char</td><td>2</td><td>16</td></tr><tr><td>boolean</td><td>1</td><td>8</td></tr></tbody></table><p><strong>字节数记忆口诀</strong></p><p>1bb，2cs，4if，8ld</p><blockquote><p>boolean类型占据一个字节或者四个字节。在java规范2中，如果boolean用于声明一个基本类型变量时是占四个字节，如果用于声明一个数组类型时，那么数组中的每个元素占一个字节。</p></blockquote><h2 id="jjava中创建对象的方法"><a href="#jjava中创建对象的方法" class="headerlink" title="jjava中创建对象的方法"></a>jjava中创建对象的方法</h2><p>1.用<strong>new语句</strong>创建对象，这是最常用的创建对象的方式。</p><p>2.运用<strong>反射手段</strong>，调用java.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。</p><p>3.调用对象的<strong>clone()方法</strong>。</p><p>4.运用<strong>反序列化</strong>手段，调用java.io.ObjectInputStream对象的readObject()方法.</p><h2 id="Final修饰成员变量"><a href="#Final修饰成员变量" class="headerlink" title="Final修饰成员变量"></a>Final修饰成员变量</h2><p>final修饰的成员变量为基本数据类型是，在赋值之后无法改变。当final修饰的成员变量为引用数据类型时，在赋值后其指向地址无法改变，但是对象内容还是可以改变的。</p><p>final修饰的成员变量在赋值时可以有三种方式。1、在声明时直接赋值。2、在构造器中赋值。3、在初始代码块中进行赋值。</p><h2 id="解决哈希冲突的方法"><a href="#解决哈希冲突的方法" class="headerlink" title="解决哈希冲突的方法"></a>解决哈希冲突的方法</h2><p>ThreadLocalMap中使用开放地址法来处理散列冲突，而HashMap中使用的是分离链表法。</p><p>之所以采用不同的方式主要是因为：在ThreadLocalMap中的散列值分散得十分均匀，很少会出现冲突。并且ThreadLocalMap经常需要清除无用的对象，使用纯数组更加方便。</p><h2 id="Java中的流"><a href="#Java中的流" class="headerlink" title="Java中的流"></a>Java中的流</h2><p>按照流是否直接与特定的地方（如磁盘、内存、设备等）相连，分为节点流和处理流两类。</p><ul><li>节点流：可以从或向一个特定的地方（节点）读写数据。如FileReader.</li><li>处理流：是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如BufferedReader.处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，称为流的链接。</li></ul><p><strong>JAVA常用的节点流：</strong></p><ul><li>文 件 FileInputStream、 FileOutputStrean FileReader FileWriter 文件进行处理的节点流。</li><li>字符串 StringReader、 StringWriter 对字符串进行处理的节点流。</li><li>数 组 ByteArrayInputStream、 ByteArrayOutputStream、CharArrayReader、 CharArrayWriter、 对数组进行处理的节点流（对应的不再是文件，而是内存中的一个数组）。</li><li>管 道 PipedInputStream、 PipedOutputStream、 PipedReaderPipedWriter对管道进行处理的节点流。</li></ul><p><strong>常用处理流（关闭处理流使用关闭里面的节点流）</strong></p><ul><li><p>缓冲流：==BufferedInputStrean==， ==BufferedOutputStream==， ==BufferedReader==， ==BufferedWriter== 增加缓冲功能，避免频繁读写硬盘。</p></li><li><p>转换流：==InputStreamReader==， ==OutputStreamReader== 实现字节流和字符流之间的转换。</p></li><li><p>数据流 ==DataInputStream==， ==DataOutputStream== 等-提供将基础数据类型写入到文件中，或者读取出来.</p></li></ul><h3 id="流的关闭顺序"><a href="#流的关闭顺序" class="headerlink" title="流的关闭顺序"></a>流的关闭顺序</h3><ol><li>一般情况下是：先打开的后关闭，后打开的先关闭（嵌套式）</li><li>另一种情况：看依赖关系，如果流a依赖流b，应该先关闭流a，再关闭流b。例如，处理流a依赖节点流b，应该先关闭处理流a，再关闭节点流b</li><li>可以只关闭处理流，不用关闭节点流。处理流关闭的时候，会调用其处理的节点流的关闭方法。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式使用手册</title>
    <link href="/posts/38605/"/>
    <url>/posts/38605/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/a202c44c2075478dbfac39baeb800046.png"></p><p>本文主要介绍正则表达式的使用方法，学习过程的笔记。</p><span id="more"></span><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote><p>通过使用正则表达式，可以：</p><ul><li>测试字符串内的模式。<br>例如，可以测试输入字符串，以查看字符串内是否出现电话号码模式或信用卡号码模式。这称为数据验证。</li><li>替换文本。<br>可以使用正则表达式来识别文档中的特定文本，完全删除该文本或者用其他文本替换它。</li><li>基于模式匹配从字符串中提取子字符串。<br>可以查找文档内或输入域内特定的文本。</li></ul></blockquote><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p></blockquote><p>正则表达式是由==<strong>普通字符</strong>==（例如字符 a 到 z）以及==<strong>特殊字符</strong>（称为”<strong>元字符</strong>“）==组成的文字模式。</p><p><a href="https://www.runoob.com/regexp/regexp-syntax.html">参考</a></p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>标记也称为修饰符，正则表达式的标记用于指定额外的匹配策略。</p><p><code>/正则表达式/修饰符</code></p><table><thead><tr><th align="left">修饰符</th><th align="left">含义</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">ignore - 不区分大小写</td><td align="left">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td align="left">g</td><td align="left">global - 全局匹配</td><td align="left">可以查找字符串中所有的匹配项。</td></tr><tr><td align="left">m</td><td align="left">multi line - 多行匹配</td><td align="left">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td align="left">s</td><td align="left">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\n</strong></td><td align="left">默认情况下的圆点 <strong>.</strong> 是 匹配除换行符 <strong>\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \n。</td></tr></tbody></table><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><table><thead><tr><th align="left">字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。例如，’n’ 匹配字符 “n”。’\n’ 匹配一个换行符。序列 ‘\‘ 匹配 “&quot; 而 “(“ 则匹配 “(“。</td></tr><tr><td align="left">^</td><td align="left">匹配输入字符串的开始位置。如果设置了 RegExp 对象的 Multiline 属性，^ 也匹配 ‘\n’ 或 ‘\r’ 之后的位置。</td></tr><tr><td align="left">$</td><td align="left">匹配输入字符串的结束位置。如果设置了RegExp 对象的 Multiline 属性，$ 也匹配 ‘\n’ 或 ‘\r’ 之前的位置。</td></tr><tr><td align="left">*</td><td align="left">匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="left">+</td><td align="left">匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="left">?</td><td align="left">匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</td></tr><tr><td align="left">{n}</td><td align="left">n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="left">{n,}</td><td align="left">n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="left">{n,m}</td><td align="left">m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td align="left">?</td><td align="left">当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</td></tr><tr><td align="left">.</td><td align="left">匹配除换行符（\n、\r）之外的任何单个字符。要匹配包括 ‘\n’ 在内的任何字符，请使用像”<strong>(.|\n)</strong>“的模式。</td></tr><tr><td align="left">(pattern)</td><td align="left">匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在VBScript 中使用 SubMatches 集合，在JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 ‘(‘ 或 ‘)‘。</td></tr><tr><td align="left">(?:pattern)</td><td align="left">匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用 “或” 字符 (|) 来组合一个模式的各个部分是很有用。例如， ‘industr(?:y|ies) 就是一个比 ‘industry|industries’ 更简略的表达式。</td></tr><tr><td align="left">(?=pattern)</td><td align="left">正向肯定预查（look ahead positive assert），在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，”Windows(?=95|98|NT|2000)”能匹配”Windows2000”中的”Windows”，但不能匹配”Windows3.1”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?!pattern)</td><td align="left">正向否定预查(negative assert)，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如”Windows(?!95|98|NT|2000)”能匹配”Windows3.1”中的”Windows”，但不能匹配”Windows2000”中的”Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td align="left">(?&lt;=pattern)</td><td align="left">反向(look behind)肯定预查，与正向肯定预查类似，只是方向相反。例如，”`(?&lt;=95</td></tr><tr><td align="left">(?&lt;!pattern)</td><td align="left">反向否定预查，与正向否定预查类似，只是方向相反。例如”`(?&lt;!95</td></tr><tr><td align="left">x|y</td><td align="left">匹配 x 或 y。例如，’z|food’ 能匹配 “z” 或 “food”。’(z|f)ood’ 则匹配 “zood” 或 “food”。</td></tr><tr><td align="left">[xyz]</td><td align="left">字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’。</td></tr><tr><td align="left">[^xyz]</td><td align="left">负值字符集合。匹配未包含的任意字符。例如， ‘[^abc]’ 可以匹配 “plain” 中的’p’、’l’、’i’、’n’。</td></tr><tr><td align="left">[a-z]</td><td align="left">字符范围。匹配指定范围内的任意字符。例如，’[a-z]’ 可以匹配 ‘a’ 到 ‘z’ 范围内的任意小写字母字符。</td></tr><tr><td align="left">[^a-z]</td><td align="left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，’[^a-z]’ 可以匹配任何不在 ‘a’ 到 ‘z’ 范围内的任意字符。</td></tr><tr><td align="left">\b</td><td align="left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配”never” 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td></tr><tr><td align="left">\B</td><td align="left">匹配非单词边界。’er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td></tr><tr><td align="left">\cx</td><td align="left">匹配由 x 指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="left">\d</td><td align="left">匹配一个数字字符。等价于 [0-9]。</td></tr><tr><td align="left">\D</td><td align="left">匹配一个非数字字符。等价于 [^0-9]。</td></tr><tr><td align="left">\f</td><td align="left">匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="left">\n</td><td align="left">匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="left">\r</td><td align="left">匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="left">\s</td><td align="left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。</td></tr><tr><td align="left">\S</td><td align="left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td></tr><tr><td align="left">\t</td><td align="left">匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="left">\v</td><td align="left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr><tr><td align="left">\w</td><td align="left">匹配字母、数字、下划线。等价于’[A-Za-z0-9_]’。</td></tr><tr><td align="left">\W</td><td align="left">匹配非字母、数字、下划线。等价于 ‘[^A-Za-z0-9_]’。</td></tr><tr><td align="left">\xn</td><td align="left">匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，’\x41’ 匹配 “A”。’\x041’ 则等价于 ‘\x04’ &amp; “1”。正则表达式中可以使用 ASCII 编码。</td></tr><tr><td align="left">\num</td><td align="left">匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，’(.)\1’ 匹配两个连续的相同字符。</td></tr><tr><td align="left">\n</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字 (0-7)，则 n 为一个八进制转义值。</td></tr><tr><td align="left">\nm</td><td align="left">标识一个八进制转义值或一个向后引用。如果 \nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字 (0-7)，则 \nm 将匹配八进制转义值 nm。</td></tr><tr><td align="left">\nml</td><td align="left">如果 n 为八进制数字 (0-3)，且 m 和 l 均为八进制数字 (0-7)，则匹配八进制转义值 nml。</td></tr><tr><td align="left">\un</td><td align="left">匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如， \u00A9 匹配版权符号 (?)。</td></tr></tbody></table><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p>先高后低，从左到右。</p><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">\</td><td align="left">转义符</td></tr><tr><td align="left">(), (?:), (?=), []</td><td align="left">圆括号和方括号</td></tr><tr><td align="left">*, +, ?, {n}, {n,}, {n,m}</td><td align="left">限定符</td></tr><tr><td align="left">^, $, \任何元字符、任何字符</td><td align="left">定位点和序列（即：位置和顺序）</td></tr><tr><td align="left">|</td><td align="left">替换，”或”操作 字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</td></tr></tbody></table><h1 id="Java-正则表达式"><a href="#Java-正则表达式" class="headerlink" title="Java 正则表达式"></a>Java 正则表达式</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegexMatches</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String args[])</span> </span>&#123;<br>String str = <span class="hljs-string">&quot;&quot;</span>;<br>String pattern = <span class="hljs-string">&quot;/(0-9)&#123;1,2&#125;/&quot;</span>;<br><br>Pattern r = Pattern.compile(pattern);<br>Matcher m = r.matcher(str);<br>System.out.println(m.matches());<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>更详细知识点，请参考<a href="https://www.runoob.com/java/java-regular-expressions.html">菜鸟教程|Java正则表达式</a>。</p><h1 id="参考表达式"><a href="#参考表达式" class="headerlink" title="参考表达式"></a>参考表达式</h1><h2 id="校验数字"><a href="#校验数字" class="headerlink" title="校验数字"></a>校验数字</h2><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs taggerscript">数字：^[0-9]*$<br>n位的数字：^<span class="hljs-symbol">\d</span>&#123;n&#125;$<br>至少n位的数字：^<span class="hljs-symbol">\d</span>&#123;n,&#125;$<br>m-n位的数字：^<span class="hljs-symbol">\d</span>&#123;m,n&#125;$<br>零和非零开头的数字：^(0|[1-9][0-9]*)$<br>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(<span class="hljs-symbol">\.</span>[0-9]&#123;1,2&#125;)?$<br>带1-2位小数的正数或负数：^(<span class="hljs-symbol">\-</span>)?<span class="hljs-symbol">\d</span>+(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>&#123;1,2&#125;)$<br>正数、负数、和小数：^(<span class="hljs-symbol">\-</span>|<span class="hljs-symbol">\+</span>)?<span class="hljs-symbol">\d</span>+(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>+)?$<br>有两位小数的正实数：^[0-9]+(<span class="hljs-symbol">\.</span>[0-9]&#123;2&#125;)?$<br>有1~3位小数的正实数：^[0-9]+(<span class="hljs-symbol">\.</span>[0-9]&#123;1,3&#125;)?$<br>非零的正整数：^[1-9]<span class="hljs-symbol">\d</span>*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^<span class="hljs-symbol">\+</span>?[1-9][0-9]*$<br>非零的负整数：^<span class="hljs-symbol">\-</span>[1-9][]0-9&quot;*$ 或 ^-[1-9]<span class="hljs-symbol">\d</span>*$<br>非负整数：^<span class="hljs-symbol">\d</span>+$ 或 ^[1-9]<span class="hljs-symbol">\d</span>*|0$<br>非正整数：^-[1-9]<span class="hljs-symbol">\d</span>*|0$ 或 ^((-<span class="hljs-symbol">\d</span>+)|(0+))$<br>非负浮点数：^<span class="hljs-symbol">\d</span>+(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>+)?$ 或 ^[1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*|0?<span class="hljs-symbol">\.</span>0+|0$<br>非正浮点数：^((-<span class="hljs-symbol">\d</span>+(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>+)?)|(0+(<span class="hljs-symbol">\.</span>0+)?))$ 或 ^(-([1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*))|0?<span class="hljs-symbol">\.</span>0+|0$<br>正浮点数：^[1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*$ 或 ^(([0-9]+<span class="hljs-symbol">\.</span>[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*<span class="hljs-symbol">\.</span>[0-9]+)|([0-9]*[1-9][0-9]*))$<br>负浮点数：^-([1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*)$ 或 ^(-(([0-9]+<span class="hljs-symbol">\.</span>[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*<span class="hljs-symbol">\.</span>[0-9]+)|([0-9]*[1-9][0-9]*)))$<br>浮点数：^(-?<span class="hljs-symbol">\d</span>+)(<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>+)?$ 或 ^-?([1-9]<span class="hljs-symbol">\d</span>*<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*|0<span class="hljs-symbol">\.</span><span class="hljs-symbol">\d</span>*[1-9]<span class="hljs-symbol">\d</span>*|0?<span class="hljs-symbol">\.</span>0+|0)$<br></code></pre></div></td></tr></table></figure><h2 id="校验字符"><a href="#校验字符" class="headerlink" title="校验字符"></a>校验字符</h2><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$<br><br>英文和数字：^[A-Za-z0<span class="hljs-number">-9</span>]+<span class="hljs-variable">$ </span>或 ^[A-Za-z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">40</span>&#125;$<br><br>长度为<span class="hljs-number">3</span><span class="hljs-number">-20</span>的所有字符：^.&#123;<span class="hljs-number">3</span>,<span class="hljs-number">20</span>&#125;$<br><br>由<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-Za-z]+$<br>由<span class="hljs-number">26</span>个大写英文字母组成的字符串：^[A-Z]+$<br>由<span class="hljs-number">26</span>个小写英文字母组成的字符串：^[a-z]+$<br><br>由数字和<span class="hljs-number">26</span>个英文字母组成的字符串：^[A-Za-z0<span class="hljs-number">-9</span>]+$<br><br>由数字、<span class="hljs-number">26</span>个英文字母或者下划线组成的字符串：^\w+<span class="hljs-variable">$ </span>或 ^\w&#123;<span class="hljs-number">3</span>,<span class="hljs-number">20</span>&#125;$<br><br>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9_</span>]+$<br><br>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>]+<span class="hljs-variable">$ </span>或 ^[\u4E00-\u9FA5A-Za-z0<span class="hljs-number">-9</span>]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">20</span>&#125;$<br><br>可以输入含有^%&amp;<span class="hljs-string">&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;</span>,;=?<span class="hljs-variable">$\</span>x22]+<br><br>禁止输入含有~的字符：[^~\x22]+<br></code></pre></div></td></tr></table></figure><h2 id="特殊格式"><a href="#特殊格式" class="headerlink" title="特殊格式"></a>特殊格式</h2><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gherkin">Email地址：^\w+([-+.]\w+)<span class="hljs-symbol">*</span><span class="hljs-meta">@\w+([-.]\w+)*\.\w+([-.]\w+)*$</span><br><br>域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\.?<br><br>InternetURL：[a-zA-z]+://[^\s]<span class="hljs-symbol">*</span> 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]<span class="hljs-symbol">*</span>)?$<br><br>手机号码：^(13[0-9]|<span class="hljs-string">14[5</span>|<span class="hljs-string">7]</span>|<span class="hljs-string">15[0</span>|<span class="hljs-string">1</span>|<span class="hljs-string">2</span>|<span class="hljs-string">3</span>|<span class="hljs-string">4</span>|<span class="hljs-string">5</span>|<span class="hljs-string">6</span>|<span class="hljs-string">7</span>|<span class="hljs-string">8</span>|<span class="hljs-string">9]</span>|<span class="hljs-string">18[0</span>|<span class="hljs-string">1</span>|<span class="hljs-string">2</span>|<span class="hljs-string">3</span>|<span class="hljs-string">5</span>|<span class="hljs-string">6</span>|<span class="hljs-string">7</span>|<span class="hljs-string">8</span>|<span class="hljs-string">9])\d&#123;8&#125;$</span><br><br><span class="hljs-string">电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)</span>|<span class="hljs-string">\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</span><br><br><span class="hljs-string">国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;</span>|<span class="hljs-string">\d&#123;4&#125;-\d&#123;7&#125;</span><br><br><span class="hljs-string">身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\d&#123;15&#125;$)</span>|<span class="hljs-string">(^\d&#123;18&#125;$)</span>|<span class="hljs-string">(^\d&#123;17&#125;(\d</span>|<span class="hljs-string">X</span>|<span class="hljs-string">x)$)</span><br><br><span class="hljs-string">帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</span><br><br><span class="hljs-string">密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$</span><br><br><span class="hljs-string">强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]&#123;8,10&#125;$</span><br><br><span class="hljs-string">强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</span><br><br><span class="hljs-string">日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="hljs-string">一年的12个月(01～09和1～12)：^(0?[1-9]</span>|<span class="hljs-string">1[0-2])$</span><br><span class="hljs-string">一个月的31天(01～09和1～31)：^((0?[1-9])</span>|<span class="hljs-string">((1</span>|<span class="hljs-string">2)[0-9])</span>|<span class="hljs-string">30</span>|<span class="hljs-string">31)$</span><br><br><span class="hljs-string">中文字符的正则表达式：[\u4e00-\u9fa5]</span><br><br><span class="hljs-string">腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)</span><br><br><span class="hljs-string">中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)</span><br><br><br></code></pre></div></td></tr></table></figure><h1 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.runoob.com/regexp/regexp-tutorial.html">菜鸟教程|正则表达式教程</a></p><p><a href="https://www.runoob.com/java/java-regular-expressions.html">菜鸟教程|Java正则表达式</a></p><p><a href="https://www.zhihu.com/question/48219401/answer/742444326">知乎|你是如何学会正则表达式的？</a></p><h2 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h2><p><a href="https://c.runoob.com/front-end/854/">菜鸟工具|在线正则代码生成器</a></p>]]></content>
    
    
    <categories>
      
      <category>通识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客更换域名</title>
    <link href="/posts/42904/"/>
    <url>/posts/42904/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/5848e4a37f5e4fb39f4c4384a9c27523.jpg"></p><p>旧域名到期了，续费有点贵。于是直接买了3年的新域名，写了这篇博客记录换域名的过程。</p><span id="more"></span><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="购买新域名"><a href="#购买新域名" class="headerlink" title="购买新域名"></a>购买新域名</h2><p>请自行购买，建议一次性购买多年，因为续期会比较贵。</p><h2 id="转移新域名（可选）"><a href="#转移新域名（可选）" class="headerlink" title="转移新域名（可选）"></a>转移新域名（可选）</h2><p>我习惯转移到了<a href="https://dash.cloudflare.com/">cloudflare</a>网站。配置挺简单的，他们网站自带教程。注意转以后需要几个小时生效。</p><h2 id="解析新域名"><a href="#解析新域名" class="headerlink" title="解析新域名"></a>解析新域名</h2><p>将解析信息复制到新域名之下</p><h2 id="配置博客仓库"><a href="#配置博客仓库" class="headerlink" title="配置博客仓库"></a>配置博客仓库</h2><p>打开博客仓库的Setting页面，更改为新域名，点击save。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211123163007135.png" alt="更改新域名的位置"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211123163050385.png" alt="仓库更改成功"></p><p>访问新域名测试一下，已经可以成功访问。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211123163555299.png" alt="成功访问"></p><h2 id="配置hexo文件"><a href="#配置hexo文件" class="headerlink" title="配置hexo文件"></a>配置hexo文件</h2><p>在相对路径下<code>\source\</code>找到CNAME文件，文本打开，更改为新的域名地址。</p><p>该步骤是防止提交新博客文件后，出现错误。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211123161718242.png" alt="更改CNAME文件的域名"></p><h2 id="配置证书"><a href="#配置证书" class="headerlink" title="配置证书"></a>配置证书</h2><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>新域名是不受信任的，连接不安全。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211123161425833.png" alt="不安全链接"></p><p>是没有点击仓库配置页面的<strong>Enforce HTTPS</strong> 按钮。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211123163808484.png" alt="勾选Enforce HTTPS"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AJAX使用手册</title>
    <link href="/posts/10625/"/>
    <url>/posts/10625/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/ce329083a43b4526ac6129f8c651bae5.jpg"></p><span id="more"></span><h1 id="AJAX（Asynchronous-JavaScript-And-XML）"><a href="#AJAX（Asynchronous-JavaScript-And-XML）" class="headerlink" title="AJAX（Asynchronous JavaScript And XML）"></a>AJAX（<em>A</em>synchronous <em>J</em>avaScript <em>A</em>nd <em>X</em>ML）</h1><p>AJAX不是JavaScript的规范，它只是Asynchronous JavaScript and XML的缩写，意思就是用==<strong>JavaScript执行异步网络请求</strong>==。</p><blockquote><p>AJAX 是开发者的梦想，因为您能够：</p><ul><li>不刷新页面更新网页</li><li>在页面加载后从服务器请求数据</li><li>在页面加载后从服务器接收数据</li><li>在后台向服务器发送数据</li></ul></blockquote><p>AJAX 并非编程语言。</p><p>AJAX 仅仅组合了：</p><ul><li>浏览器内建的 XMLHttpRequest 对象（从 web 服务器请求数据）</li><li>JavaScript 和 HTML DOM（显示或使用数据）</li></ul><p>Ajax 是一个令人误导的名称。Ajax 应用程序可能使用 XML 来传输数据，但将数据作为纯文本或 JSON 文本传输也同样常见。</p><p>Ajax 允许通过与场景后面的 Web 服务器交换数据来异步更新网页。这意味着可以更新网页的部分，而不需要重新加载整个页面。</p><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>在现代浏览器上写AJAX主要依靠<code>XMLHttpRequest</code>对象：</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">success</span>(<span class="hljs-params">text</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> textarea = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test-ie-response-text&#x27;</span>);<br>    textarea.value = text;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fail</span>(<span class="hljs-params">code</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> textarea = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test-ie-response-text&#x27;</span>);<br>    textarea.value = <span class="hljs-string">&#x27;Error code: &#x27;</span> + code;<br>&#125;<br><br><span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>); <span class="hljs-comment">// 新建Microsoft.XMLHTTP对象</span><br><br>request.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// 状态发生变化时，函数被回调</span><br>    <span class="hljs-keyword">if</span> (request.readyState === <span class="hljs-number">4</span>) &#123; <span class="hljs-comment">// 成功完成</span><br>        <span class="hljs-comment">// 判断响应结果:</span><br>        <span class="hljs-keyword">if</span> (request.status === <span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-comment">// 成功，通过responseText拿到响应的文本:</span><br>            <span class="hljs-keyword">return</span> success(request.responseText);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 失败，根据响应码判断失败原因:</span><br>            <span class="hljs-keyword">return</span> fail(request.status);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// HTTP请求还在继续...</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 发送请求:</span><br>request.open(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;/api/categories&#x27;</span>);<span class="hljs-comment">//参数一：指定GET或者PST方法；参数二：指定URL地址</span><br><span class="hljs-comment">//request.open(&#x27;GET&#x27;, &#x27;/api/categories&#x27;,true);//参数三：指定是否需要使用异步，默认true，可以不写</span><br>request.send();<br><br>alert(<span class="hljs-string">&#x27;请求已发送，请等待响应...&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p><code>XMLHttpRequest</code>对象的<code>open()</code>方法有3个参数，第一个参数指定是<code>GET</code>还是<code>POST</code>，第二个参数指定URL地址，第三个参数指定是否使用异步，默认是<code>true</code>，所以不用写。</p><p><em>注意</em>，千万不要把第三个参数指定为<code>false</code>，否则浏览器将停止响应，直到AJAX请求完成。如果这个请求耗时10秒，那么10秒内你会发现浏览器处于“假死”状态。</p><p>最后调用<code>send()</code>方法才真正发送请求。<code>GET</code>请求不需要参数，<code>POST</code>请求需要把body部分以字符串或者<code>FormData</code>对象传进去。</p><h3 id="通用写法"><a href="#通用写法" class="headerlink" title="通用写法"></a>通用写法</h3><p>如果你想把标准写法和IE(低版本的IE)写法混在一起，可以这么写：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> request;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123;<br>    request = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    request = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&#x27;Microsoft.XMLHTTP&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过检测<code>window</code>对象是否有<code>XMLHttpRequest</code>属性来确定浏览器是否支持标准的<code>XMLHttpRequest</code>。</p><p>注意，<em>不要</em>根据浏览器的<code>navigator.userAgent</code>来检测浏览器是否支持某个JavaScript特性，一是因为这个字符串本身可以伪造，二是通过IE版本判断JavaScript特性将非常复杂。</p><p>当创建了<code>XMLHttpRequest</code>对象后，要先设置<code>onreadystatechange</code>的回调函数。在回调函数中，通常我们只需通过<code>readyState === 4</code>判断请求是否完成，如果已完成，再根据<code>status === 200</code>判断是否是一个成功的响应。</p><blockquote></blockquote><h3 id="安全限制"><a href="#安全限制" class="headerlink" title="安全限制"></a>安全限制</h3><p>上面代码的URL使用的是相对路径。如果你把它改为<code>&#39;http://www.sina.com.cn/&#39;</code>，再运行，肯定报错。这是由于跨域问题，关于跨域问题的服务端解决方案，请参考<a href="https://septzhang.xyz/posts/51245/">一步解决CORS（跨域）问题</a>。</p><p>前端的解决方法有JSONP，他有个限制，及只能通过<code>Get</code> 请求，并且要求返回JavaScript。这种方式跨域实际上是利用了浏览器允许跨域引用JavaScript资源。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;script src=<span class="hljs-string">&quot;http://example.com/abc.js&quot;</span>&gt;&lt;/script&gt;<br>    ...<br>&lt;/head&gt;<br>&lt;body&gt;<br>...<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></div></td></tr></table></figure><p>JSONP通常以函数调用的形式返回，例如，返回JavaScript内容如下：</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs haskell"><span class="hljs-title">foo</span>(&#x27;<span class="hljs-class"><span class="hljs-keyword">data</span>&#x27;);</span><br></code></pre></div></td></tr></table></figure><p>这样一来，我们如果在页面中先准备好<code>foo()</code>函数，然后给页面动态加一个<code>&lt;script&gt;</code>节点，相当于动态读取外域的JavaScript资源，最后就等着接收回调了。</p><blockquote><p>以163的股票查询URL为例，对于URL：<a href="http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice%EF%BC%8C%E4%BD%A0%E5%B0%86%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%EF%BC%9A">http://api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice，你将得到如下返回：</a></p><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lasso">refreshPrice(&#123;<span class="hljs-string">&quot;0000001&quot;</span>:&#123;<span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-string">&quot;0000001&quot;</span>, <span class="hljs-params">...</span> &#125;);<br></code></pre></div></td></tr></table></figure><p>因此我们需要首先在页面中准备好回调函数：</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">refreshPrice</span>(<span class="hljs-params">data</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> p = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;test-jsonp&#x27;</span>);<br>    p.innerHTML = <span class="hljs-string">&#x27;当前价格：&#x27;</span> +<br>        data[<span class="hljs-string">&#x27;0000001&#x27;</span>].name +<span class="hljs-string">&#x27;: &#x27;</span> + <br>        data[<span class="hljs-string">&#x27;0000001&#x27;</span>].price + <span class="hljs-string">&#x27;；&#x27;</span> +<br>        data[<span class="hljs-string">&#x27;1399001&#x27;</span>].name + <span class="hljs-string">&#x27;: &#x27;</span> +<br>        data[<span class="hljs-string">&#x27;1399001&#x27;</span>].price;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后用<code>getPrice()</code>函数触发：</p><figure class="highlight reasonml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> get<span class="hljs-constructor">Price()</span> &#123;<br>    var<br>        js = document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">script</span>&#x27;)</span>,<br>        head = document.get<span class="hljs-constructor">ElementsByTagName(&#x27;<span class="hljs-params">head</span>&#x27;)</span><span class="hljs-literal">[<span class="hljs-number">0</span>]</span>;<br>    js.src = &#x27;http:<span class="hljs-comment">//api.money.126.net/data/feed/0000001,1399001?callback=refreshPrice&#x27;;</span><br>    head.append<span class="hljs-constructor">Child(<span class="hljs-params">js</span>)</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>就完成了跨域加载数据。</p></blockquote><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>原理见<a href="https://septzhang.xyz/posts/51245/">一步解决CORS（跨域）问题</a>。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用手册</tag>
      
      <tag>AJAX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle使用手册</title>
    <link href="/posts/51118/"/>
    <url>/posts/51118/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/b1aa91cb881c11ebb6edd017c2d2eca2.jpg"></p><p>整理常用的Oracle数据库命令。</p><span id="more"></span><h1 id="Oracle命令手册"><a href="#Oracle命令手册" class="headerlink" title="Oracle命令手册"></a>Oracle命令手册</h1><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>有两种使用方法，使用反斜杠转义和自己制定转义字符（escape ）两种方法。</p><h4 id="反斜杠-转义"><a href="#反斜杠-转义" class="headerlink" title="反斜杠( \ )转义"></a>反斜杠( \ )转义</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%\%%&#x27;</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询含有<span class="hljs-operator">%</span>的name<br></code></pre></div></td></tr></table></figure><h4 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h4><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> name <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%$%%&#x27;</span> <span class="hljs-keyword">escape</span> <span class="hljs-string">&#x27;$&#x27;</span>;<span class="hljs-operator">/</span><span class="hljs-operator">/</span>自己制定转义字符<br></code></pre></div></td></tr></table></figure><h3 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-operator">%</span><br><span class="hljs-operator">-</span><br>?<br>#<br>`<br>&quot;<br>&amp;<br>||<br>*<br>/<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Oracle</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PL/SQL的使用</title>
    <link href="/posts/32854/"/>
    <url>/posts/32854/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/374910cb55964fd8ae3aab8420a82bdf.jpg"></p><p>关于数据库可视化工具，PL/SQL的使用和配置。</p><span id="more"></span><h1 id="PL-SQL的使用"><a href="#PL-SQL的使用" class="headerlink" title="PL/SQL的使用"></a>PL/SQL的使用</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="乱码"><a href="#乱码" class="headerlink" title="乱码"></a>乱码</h3><p>查询出来的Oracal中文数据出现乱码。</p><p>修改 PL/SQL 软件的编码；</p><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p>配置系统的环境变量</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">NLS_LANG</span> <span class="hljs-string"></span><br><span class="hljs-attr">SIMPLIFIED</span> <span class="hljs-string">CHINESE_CHINA.ZHS16GBK</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211020160531285.png" alt="配置环境变量"></p><p>重启程序，解决问题</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>PL/SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo安装</title>
    <link href="/posts/15969/"/>
    <url>/posts/15969/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/61cfdd6b42d079d8370656fe32632d27f2a2389798fbd" alt="鱼啊你一直游"></p><p>前两天Node.js重新安装了，又重新安装了一下Hexo。</p><span id="more"></span><h1 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h1><h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211012194612353.png" alt="Hexo安装成功"></p><h2 id="安装Hexo-abbrlink"><a href="#安装Hexo-abbrlink" class="headerlink" title="安装Hexo-abbrlink"></a>安装Hexo-abbrlink</h2><p>安装命令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">npm install hexo-abbrlink --save<br></code></pre></div></td></tr></table></figure><p>安装成功截图</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20211012195621788.png" alt="安装Hexo-abbrlink成功截图"></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JSON学习</title>
    <link href="/posts/51594/"/>
    <url>/posts/51594/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/792a4b6934fc491b81342206e3192e59.png" alt="孔明灯男孩"></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用手册</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>什么是NoSQL</title>
    <link href="/posts/30695/"/>
    <url>/posts/30695/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/v2-eff18c2750f437e04d0324b09dac48ea_b.png" alt="v2-eff18c2750f437e04d0324b09dac48ea_b"></p><p>NoSQL是Not Only SQL,即不仅仅是SQL。</p><span id="more"></span><h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><h2 id="关系型数据库的瓶颈与发展"><a href="#关系型数据库的瓶颈与发展" class="headerlink" title="关系型数据库的瓶颈与发展"></a>关系型数据库的瓶颈与发展</h2><h3 id="单机MySQL的美好年代"><a href="#单机MySQL的美好年代" class="headerlink" title="单机MySQL的美好年代"></a>单机MySQL的美好年代</h3><h4 id="静态页面时代"><a href="#静态页面时代" class="headerlink" title="静态页面时代"></a>静态页面时代</h4><ul><li>90年代，网站的访问量小，用单个数据库完全足够；</li><li>多是静态网页，动态交互类型的网站少。</li></ul><h4 id="数据存储的瓶颈"><a href="#数据存储的瓶颈" class="headerlink" title="数据存储的瓶颈"></a>数据存储的瓶颈</h4><ol><li>数据量的总大小，一个机器放不下时；</li><li>数据的索引（B+ Tree）一个机器的内存放不下时；</li><li>访问量（读写混合）一个实例不能承受；</li></ol><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20210926101110299.png" alt="单机MySQL"></p><h3 id="Memcached（缓存）-MySQL-垂直拆分"><a href="#Memcached（缓存）-MySQL-垂直拆分" class="headerlink" title="Memcached（缓存）+ MySQL + 垂直拆分"></a>Memcached（缓存）+ MySQL + 垂直拆分</h3><blockquote><p>随着访问量的上升，使用单机MySQL架构网站的数据库出现了<strong>性能问题</strong>，程序猿们开始使用<strong>缓存技术</strong>来缓解数据库的压力，优化数据库的结构和索引，主要是通过文件缓存来缓解数据库压力，当访问量继续增大的时候，Memcached（缓存）技术产品就出现了。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210926101356564.png" alt="缓存"></p><h3 id="MySQL主从读写分离"><a href="#MySQL主从读写分离" class="headerlink" title="MySQL主从读写分离"></a>MySQL主从读写分离</h3><blockquote><p>由于数据库的写入压力增加，<strong>Memcached只能缓解数据库的读取压力</strong>，读写集中在一个数据库上让数据库不堪重负，大部分网站开始使用<strong>主从复制技术</strong>来达到读写分离，以提高读写性能和读库的可扩展性，MySQL的<strong>master-slave</strong>模式成为这个时候的网站标配了。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20210926101548473.png" alt="MySQL主从读写分离"></p><h3 id="分表分库-水平拆分-Mysql-集群"><a href="#分表分库-水平拆分-Mysql-集群" class="headerlink" title="分表分库 + 水平拆分 + Mysql 集群"></a>分表分库 + 水平拆分 + Mysql 集群</h3><blockquote><p>在Memcached的高速缓存，MySQL的主从复制，读写分离的基础之上，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于<strong>MyISAM使用表锁</strong>，在<strong>高并发下会出现严重的锁问题</strong>，大量的高并发MySQL应用开始使用<strong>InnoDB引擎</strong>。</p><p>同时，开始流行使用<strong>分表分库</strong>来缓解写压力和数据增长的扩展问题。当时，MySQL推出了<strong>表分区</strong>（MySQL Cluster集群），但性能也不能很好满足互联网的需求，只是很好的保证了高可靠性。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210926101710351.png" alt="分表分库 + 水平拆分 + Mysql 集群"></p><h3 id="MySQL-的扩展性瓶颈"><a href="#MySQL-的扩展性瓶颈" class="headerlink" title="MySQL 的扩展性瓶颈"></a>MySQL 的扩展性瓶颈</h3><p>MySQL数据库 存储的大文本的字段，导致数据库表非常的大，使得在数据库恢复的时候非常的慢。关系数据库很强大，但是MySQL的扩展性差（需要复杂的技术来实现），大数据下IO压力大，表结构更改困难。</p><h3 id="如今的数据库"><a href="#如今的数据库" class="headerlink" title="如今的数据库"></a>如今的数据库</h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20210926103141903.png" alt="如今的数据库"></p><h2 id="为什么用NoSQL"><a href="#为什么用NoSQL" class="headerlink" title="为什么用NoSQL"></a>为什么用NoSQL</h2><blockquote><p>NoSQL最常见的解释是“non-relational”， “Not Only SQL”也被很多人接受。NoSQL仅仅是一个概念，泛指非关系型的数据库，区别于关系数据库，它们不保证关系数据的ACID特性。</p></blockquote><h3 id="NoSQL的特点"><a href="#NoSQL的特点" class="headerlink" title="NoSQL的特点"></a>NoSQL的特点</h3><h4 id="易扩展"><a href="#易扩展" class="headerlink" title="易扩展"></a>易扩展</h4><p>NoSQL 数据库去掉关系数据库的<strong>关系型特性</strong>。</p><p>数据之间无关系，这样就<strong>非常容易扩展</strong>，在架构的层面上也带来了可扩展的能力。</p><h4 id="大数据量高性能"><a href="#大数据量高性能" class="headerlink" title="大数据量高性能"></a>大数据量高性能</h4><p>NoSQL数据库都具有<strong>非常高的读写性能</strong>，在<strong>大数据量</strong>下，同样==具有非常高的读写性能==。</p><blockquote><p>一般MySQL使用<strong>Query Cache</strong>（<strong>大粒度</strong>），每次<strong>表更新Cache失效</strong>，在针对Web2.0的交互频繁应用，Cache<strong>性能不高</strong>；</p><p>而NoSQL的Cache是<strong>记录级</strong>（细粒度）的，所以NoSQL在这个层面上来说就要性能高很多了。</p></blockquote><p>官方记录：Redis 一秒可以写8万次，读11万次！</p><h4 id="多样灵活的数据模型"><a href="#多样灵活的数据模型" class="headerlink" title="多样灵活的数据模型"></a>多样灵活的数据模型</h4><p>无需事先为要存储的数据建立字段，随时可以存储自定义的数据格式，而在关系数据库里，增删<br>字段一件非常麻烦。</p><h4 id="传统的RDBMS-和-NoSQL对比"><a href="#传统的RDBMS-和-NoSQL对比" class="headerlink" title="传统的RDBMS 和 NoSQL对比"></a>传统的RDBMS 和 NoSQL对比</h4><h5 id="传统的关系型数据库-RDBMS"><a href="#传统的关系型数据库-RDBMS" class="headerlink" title="传统的关系型数据库 RDBMS"></a>传统的关系型数据库 RDBMS</h5><ul><li>高度组织化结构化数据</li><li>结构化查询语言（SQL）</li><li>数据和关系都存储在单独的表中</li><li>数据操纵语言，数据定义语言</li><li>严格的一致性</li><li>基础事务</li></ul><h5 id="NoSQL-1"><a href="#NoSQL-1" class="headerlink" title="NoSQL"></a>NoSQL</h5><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式</li><li>键值对存储，列存储，文档存储，图形数据库</li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理</li><li>高性能，高可用性 和 可伸缩性</li></ul><blockquote><p>大数据时代的3V（主要是对问题的描述） ： </p><p>海量 Volume</p><p>多样 Variety</p><p>实时 Velocity</p><p>互联网需求的3高（ 主要是对程序的要求） ：</p><p>高并发</p><p>高可用</p><p>高性能</p></blockquote><p>==当下的应用是 SQL 和 NoSQL 一起使用==</p><h2 id="NoSQL四大分类"><a href="#NoSQL四大分类" class="headerlink" title="NoSQL四大分类"></a>NoSQL四大分类</h2><h3 id="KV键值："><a href="#KV键值：" class="headerlink" title="KV键值："></a>KV键值：</h3><p>新浪：BerkeleyDB+redis</p><p>美团：tair+redis</p><p>阿里、百度：memcache+redis</p><h3 id="文档型数据库-bson格式比较多-："><a href="#文档型数据库-bson格式比较多-：" class="headerlink" title="文档型数据库(bson格式比较多)："></a>文档型数据库(bson格式比较多)：</h3><ul><li>CouchDB</li><li>MongoDB</li></ul><p>MongoDB 是一个<strong>基于分布式文件存储的数据库</strong>。由 <strong>C++</strong> 语言编写。旨在为 WEB 应用提供可<br>扩展的高性能数据存储解决方案。</p><p>MongoDB 是一个<strong>介于关系数据库和非关系数据库之间</strong>的产品，是非关系数据库当中==功能最丰<br>富，最像关系数据库的==。</p><h3 id="列存储数据库："><a href="#列存储数据库：" class="headerlink" title="列存储数据库："></a>列存储数据库：</h3><ul><li>Cassandra, HBase</li><li>分布式文件系统</li></ul><h3 id="图关系数据库"><a href="#图关系数据库" class="headerlink" title="图关系数据库"></a>图关系数据库</h3><ul><li>不存放放图形的，存放关系（比如:朋友圈社交网络、广告推荐系统）</li><li>社交网络，推荐系统等。专注于构建关系图谱</li><li>Neo4J, InfoGrid</li></ul><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting2/img/image-20210926105311806.png" alt="4类NoSQL的对比"></p><h2 id="NoSQL遵循CAP-BASE原则"><a href="#NoSQL遵循CAP-BASE原则" class="headerlink" title="NoSQL遵循CAP + BASE原则"></a>NoSQL遵循CAP + BASE原则</h2><p><strong>关系型数据库遵循ACID规则</strong>，事务在英文中是transaction。</p><h4 id="传统ACID"><a href="#传统ACID" class="headerlink" title="传统ACID"></a>传统ACID</h4><ul><li>A (Atomicity) 原子性（事务里的所有操作要么全部做完，要么都不做。事务里只要有一个操作失败，整个事务就失败，事务回滚）</li><li>C (Consistency) 一致性（事务前后数据的完整性必须保持一致）</li><li>I (Isolation) 隔离性（并发的事务之间不会互相影响）</li><li>D (Durability) 持久性(持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失)</li></ul><h4 id="CAP（三进二）"><a href="#CAP（三进二）" class="headerlink" title="CAP（三进二）"></a>CAP（三进二）</h4><ul><li>C : Consistency（强一致性）</li><li>A : Availability（可用性）</li><li>P : Partition tolerance（分区容错性）</li></ul><p>==在分布式存储系统中，<strong>最多只能实现上面的两点</strong>，没有NoSQL系统能同时保证这三点。==</p><p><strong>分区容错性</strong>是我们必须需要实现（由于当前的网络硬件肯定会出现延迟丢包等问题）。</p><p>一致性和可用性之间取一个平衡。多余大多数web应用，其实并不需要强一致性。</p><p><strong>CAP理论的核心</strong>是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，<br>最多只能同时较好的满足两个。因此，根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP<br>原则和满足 AP 原则三 大类：</p><p>CA - 单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</p><p>CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。</p><p>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</p><h4 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h4><p>BASE是对CAP中一致性和可用性权衡的结果，是基于CAP定律逐步演化而来。</p><p>核心思想是即使无法做到强一致性，但<strong>每个应用根据自身业务特点，采用适当的方式来使系统达到最终一致性</strong>。</p><p>为了解决关系数据库强一致性引起的问题而引起的可用性降低而提出的解决方案。</p><ul><li><strong>基本可用(Basically Available)<strong>： 基本可用是指==分布式系统在出现故障的时候，允许损失部分可用性，即</strong>保证核心可用</strong>==。电商大促时，为了应对访问量激增，部分用户可能会被引导到降级页面，服务层也可能只提供降级服务。这就是损失部分可用性的体现。</li><li>软状态(Soft State)： 软状态是指==允许系统存在中间状态，而该中间状态不会影响<strong>系统整体可用性</strong>==。分布式存储中一般一份数据至少会有三个副本，允许不同节点间副本同步的延时就是软状态的体现。MySQL Replication 的异步复制也是一种体现。</li><li><strong>最终一致性(Eventual Consistency)<strong>： 最终一致性是指==系统中的所有数据副本经过一定时间后，</strong>最终达到一致的状态</strong>==。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</li></ul><h1 id="分布式和集群的不同"><a href="#分布式和集群的不同" class="headerlink" title="分布式和集群的不同"></a>分布式和集群的不同</h1><p>1、分布式：通过Rpc通信和调用，使不同的多台服务器上面部署<strong>不同的服务模块（工程）</strong>，可以对外<br>提供服务和组内协作。</p><p>2、集群：通过通过分布式调度软件进行统一的调度，使不同的多台服务器上面部署<strong>相同的服务模块</strong>，可以对外提供<br>服务和访问。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
      <tag>NoSQl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis基础知识</title>
    <link href="/posts/33245/"/>
    <url>/posts/33245/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/v2-78bd2155a75c3b5e73e255a9ef77bf17_720w.jpg" alt="Redis"></p><span id="more"></span><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Redis是什么"><a href="#Redis是什么" class="headerlink" title="Redis是什么"></a>Redis是什么</h3><p>Redis：<strong>RE</strong>mote <strong>D</strong>Ict<strong>i</strong>onary <strong>S</strong>erver（远程字典服务器）</p><blockquote><ul><li>完全<strong>开源免费</strong>的</li><li>用<strong>C语言</strong>编写的</li><li>遵守<strong>BSD协议</strong></li><li><strong>高性能</strong>的（Key/Value）<strong>分布式</strong> <strong>内存</strong>数据库</li><li>基于<strong>内存运行</strong></li><li><strong>支持持久化</strong></li><li>当前最<strong>热门</strong>的NoSQL数据库之一，也被称为数据结构服务器</li></ul></blockquote><h3 id="Redis与其他key-value缓存产品有以下三个特点"><a href="#Redis与其他key-value缓存产品有以下三个特点" class="headerlink" title="Redis与其他key-value缓存产品有以下三个特点"></a>Redis与其他key-value缓存产品有以下三个特点</h3><ul><li>Redis<strong>支持数据的持久化</strong>，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis<strong>不仅仅支持简单的 key-value 类型的数据</strong>，同时还提供list、set、zset、hash等数据结构的存储。</li><li>Redis<strong>支持数据的备份</strong>（master-slave模式）。</li></ul><h3 id="Redis作用"><a href="#Redis作用" class="headerlink" title="Redis作用"></a>Redis作用</h3><blockquote><p>内存存储和持久化：redis支持异步将内存中的数据写到硬盘上，同时不影响继续服务</p><p>取最新N个数据的操作，如：可以将最新的10条评论的ID放在Redis的List集合里面</p><p>发布、订阅消息系统</p><p>地图信息分析</p><p>定时器、计数器</p><p>……</p></blockquote><h3 id="Redis特性"><a href="#Redis特性" class="headerlink" title="Redis特性"></a>Redis特性</h3><p>数据类型及基本操作和配置</p><p>持久化和复制，RDB、AOF</p><p>事务的控制</p><h2 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h2><p>环境（华为云HECS：1vCPUs | 2GB CentOS 8.2 64bit）</p><p>1、下载获得<code>redis-5.0.7.tar.gz</code>后将它放到我们Linux的目录下 /opt</p><p>2、/opt 目录下，解压命令 ： <code>tar -zxvf redis-5.0.7.tar.gz</code></p><p>3、解压完成后出现文件夹：redis-5.0.7</p><p>4、进入目录： <code>cd   redis-5.0.7</code></p><p>5、在 redis-5.0.7 目录下执行 <code>make </code>命令</p><p>成功后可以使用<code>Redis Test</code> 测试一下</p><p>6、如果make完成后继续执行 make install</p><p>7、查看默认安装目录：usr/local/bin</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">/usr 这是一个非常重要的目录，类似于windows下的Program Files,存放用户的程序<br></code></pre></div></td></tr></table></figure><p>8、拷贝配置文件（备用）</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">cd /usr/local/bin<br>ls -l<br><span class="hljs-meta">#</span><span class="bash"> 在redis的解压目录下备份redis.conf</span><br>mkdir myredis<br>cp redis.conf myredis  # 拷一个备份，养成良好的习惯，我们就修改这个文件<br><span class="hljs-meta">#</span><span class="bash"> 修改配置保证可以后台应用</span><br>vim redis.conf<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210926125843514.png" alt="守护进程配置"></p><ul><li>A、redis.conf配置文件中daemonize守护线程，默认是NO。</li><li>B、daemonize是用来指定redis是否要用守护线程的方式启动。</li></ul><h3 id="daemonize-设置yes或者no区别"><a href="#daemonize-设置yes或者no区别" class="headerlink" title="daemonize 设置yes或者no区别"></a>daemonize 设置yes或者no区别</h3><ul><li>daemonize:yes<ul><li>redis采用的是单进程多线程的模式。当redis.conf中选项daemonize设置成yes时，代表开启守护进程模式。在该模式下，redis会在后台运行，并将进程pid号写入至redis.conf选项pidfile设置的文件中，此时redis将一直运行，除非手动kill该进程。</li></ul></li><li>daemonize:no<ul><li>当daemonize选项设置成no时，当前界面将进入redis的命令行界面，exit强制退出或者关闭连接工具(putty,xshell等)都会导致redis进程退出。</li></ul></li></ul><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 【shell】启动redis服务</span><br>[root@192 bin]# cd /usr/local/bin<br>[root@192 bin]# redis-server /opt/redis-5.0.7/redis.conf<br><span class="hljs-meta">#</span><span class="bash"> redis客户端连接===&gt; 观察地址的变化，如果连接ok,是直接连上的，redis默认端口号 6379</span><br>[root@192 bin]# redis-cli -p 6379<br>127.0.0.1:6379&gt; ping<br>PONG<br>127.0.0.1:6379&gt; set k1 helloworld<br>OK<br>127.0.0.1:6379&gt; get k1<br>&quot;helloworld&quot;<br><span class="hljs-meta">#</span><span class="bash"> 【shell】ps显示系统当前进程信息</span><br>[root@192 myredis]# ps -ef|grep redis<br>root      16005      1  0 04:45 ?        00:00:00 redis-server <br>127.0.0.1:6379<br>root      16031  15692  0 04:47 pts/0    00:00:00 redis-cli -p 6379<br>root      16107  16076  0 04:51 pts/2    00:00:00 grep --color=auto redis<br><span class="hljs-meta">#</span><span class="bash"> 【redis】关闭连接</span><br>127.0.0.1:6379&gt; shutdown<br>not connected&gt; exit<br><span class="hljs-meta">#</span><span class="bash"> 【shell】ps显示系统当前进程信息</span><br>[root@192 myredis]# ps -ef|grep redis<br>root      16140  16076  0 04:53 pts/2    00:00:00 grep --color=auto redis<br><br></code></pre></div></td></tr></table></figure><h2 id="redis压力测试工具-Redis-benchmark"><a href="#redis压力测试工具-Redis-benchmark" class="headerlink" title="redis压力测试工具(Redis-benchmark)"></a>redis压力测试工具(Redis-benchmark)</h2><p>Redis-benchmark是官方自带的Redis性能测试工具，可以有效的测试Redis服务的性能。</p><p>可选参数如下所示：</p><table><thead><tr><th>序号</th><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>1</td><td>-h</td><td>指定服务器主机名</td><td>127.0.0.1</td></tr><tr><td>2</td><td>-p</td><td>指定服务器端口</td><td>6379</td></tr><tr><td>3</td><td>-s</td><td>指定服务器 socket</td><td></td></tr><tr><td>4</td><td>-c</td><td>指定并发连接数</td><td>50</td></tr><tr><td>5</td><td>-n</td><td>指定请求数</td><td>10000</td></tr><tr><td>6</td><td>-d</td><td>以字节的形式指定 SET/GET 值的数据大小</td><td>2</td></tr><tr><td>7</td><td>-k</td><td>1=keep alive ；0=reconnect</td><td>1</td></tr><tr><td>8</td><td>-r</td><td>SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td></td></tr><tr><td>9</td><td>-P</td><td>通过管道传输 请求</td><td>1</td></tr><tr><td>10</td><td>-q</td><td>强制退出 redis。仅显示 query/sec 值</td><td></td></tr><tr><td>11</td><td>–csv</td><td>以 CSV 格式输出</td><td></td></tr><tr><td>12</td><td>-I</td><td>生成循环，永久执行测试</td><td></td></tr><tr><td>13</td><td>-t</td><td>仅运行以逗号分隔的测试命令列表。</td><td></td></tr><tr><td>14</td><td>-I</td><td>Idle 模式。仅打开 N 个 idle 连接并等待。</td><td></td></tr></tbody></table><p>测试</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 测试一：100个并发连接，100000个请求，检测host为localhost 端口为6379的redis服务器性</span><br>能 <br>redis-benchmark -h localhost -p 6379 -c 100 -n 100000 <br><span class="hljs-meta">#</span><span class="bash"> 测试出来的所有命令只举例一个！</span><br>====== SET ======<br>  100000 requests completed in 1.88 seconds # 对集合写入测试<br>  100 parallel clients # 每次请求有100个并发客户端<br>  3 bytes payload # 每次写入3个字节的数据，有效载荷<br>  keep alive: 1   # 保持一个连接，一台服务器来处理这些请求<br>17.05% &lt;= 1 milliseconds<br>97.35% &lt;= 2 milliseconds<br>99.97% &lt;= 3 milliseconds<br>100.00% &lt;= 3 milliseconds # 所有请求在 3 毫秒内完成<br>53248.14 requests per second # 每秒处理 53248.14 次请求<br></code></pre></div></td></tr></table></figure><h2 id="基本数据库常识"><a href="#基本数据库常识" class="headerlink" title="基本数据库常识"></a>基本数据库常识</h2><p>默认<strong>16个数据库</strong>，类似数组下标==从零开始==，初始默认使用零号库</p><h3 id="查看-redis-conf-，里面有默认的配置"><a href="#查看-redis-conf-，里面有默认的配置" class="headerlink" title="查看 redis.conf ，里面有默认的配置"></a>查看 redis.conf ，里面有默认的配置</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">databases</span> <span class="hljs-string">16</span><br><span class="hljs-comment"># Set the number of databases. The default database is DB 0, you can select</span><br><span class="hljs-comment"># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span><br><span class="hljs-comment"># dbid is a number between 0 and &#x27;databases&#x27;-1</span><br><span class="hljs-attr">databases</span> <span class="hljs-string">16</span><br></code></pre></div></td></tr></table></figure><h3 id="Select命令切换数据库"><a href="#Select命令切换数据库" class="headerlink" title="Select命令切换数据库"></a>Select命令切换数据库</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; select 7<br>OK<br>127.0.0.1:6379[7]&gt;<br><span class="hljs-meta">#</span><span class="bash"> 不同的库可以存不同的数据</span><br></code></pre></div></td></tr></table></figure><h3 id="Dbsize查看当前数据库的key的数量"><a href="#Dbsize查看当前数据库的key的数量" class="headerlink" title="Dbsize查看当前数据库的key的数量"></a>Dbsize查看当前数据库的key的数量</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; select 7<br>OK<br>127.0.0.1:6379[7]&gt; DBSIZE<br>(integer) 0<br>127.0.0.1:6379[7]&gt; select 0<br>OK<br>127.0.0.1:6379&gt; DBSIZE<br>(integer) 5<br>127.0.0.1:6379&gt; keys * # 查看具体的key<br>1) &quot;counter:__rand_int__&quot;<br>2) &quot;mylist&quot;<br>3) &quot;k1&quot;<br>4) &quot;myset:__rand_int__&quot;<br>5) &quot;key:__rand_int__&quot;<br></code></pre></div></td></tr></table></figure><h3 id="Flushdb：清空当前库"><a href="#Flushdb：清空当前库" class="headerlink" title="Flushdb：清空当前库"></a>Flushdb：清空当前库</h3><h3 id="Flushall：清空全部的库"><a href="#Flushall：清空全部的库" class="headerlink" title="Flushall：清空全部的库"></a>Flushall：清空全部的库</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; DBSIZE<br>(integer) 5<br>127.0.0.1:6379&gt; FLUSHDB<br>OK<br>127.0.0.1:6379&gt; DBSIZE<br>(integer) 0<br></code></pre></div></td></tr></table></figure><blockquote><p>为什么默认端口是6379</p><p>因为6379是手机按键上MERZ对应的号码键，而MERZ取自意大利歌女Alessia Merz的名字。</p></blockquote><h2 id="redis是单线程"><a href="#redis是单线程" class="headerlink" title="redis是单线程"></a>redis是单线程</h2><p>Redis很快。Redis是基于内存的操作，CPU不是Redis的瓶颈（可能是机器内存的大小或者网络带宽）。单线程容易实现，且CPU不会成为瓶颈，就地采用单线程。</p><p>Redis不比采用单进程多线程的同样基于内存的 KV 数据库 Memcached 差。</p><h2 id="Redis快的原因"><a href="#Redis快的原因" class="headerlink" title="Redis快的原因"></a><strong>Redis快的原因</strong></h2><ol><li>运行的快慢与单线程和多线程无关</li><li>redis 的数据都储存在<strong>内存</strong>里，<strong>单线程操作效率最高</strong>。因为多线程的本质就是 CPU 通过<strong>上下文的切换</strong>模拟出多线程的情况，对于一个内存的系统来说，它没有上下文的切换就是效率最高的。redis 用单个CPU 绑定一块内存的数据，然后针对这块内存的数据进行多次读写的时候，都是在一个CPU上完成的，所以它是单线程处理这个事。在内存的情况下，这个方案就是最佳方案。</li></ol><h2 id="五大数据类型"><a href="#五大数据类型" class="headerlink" title="==五大数据类型=="></a>==五大数据类型==</h2><blockquote><p>Redis 是一个开源的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。</p><p> 它支持多种类型的数据结构（ <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a>） 与范围查询（ <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询）。</p><p> Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）</p></blockquote><h3 id="String-（字符串类型）"><a href="#String-（字符串类型）" class="headerlink" title="String （字符串类型）"></a>String （字符串类型）</h3><p>String是redis<strong>最基本的类型</strong>，你可以理解成Memcached一模一样的类型，一个key对应一个value。</p><p>String类型是<strong>二进制安全</strong>的，意思是redis的string可以包含任何数据，比如==jpg图片或者序列化的对象==。</p><p>String类型在redis中value最多可以是<strong>512M</strong>。</p><h3 id="Hash（哈希，-类似-Java里的Map-）"><a href="#Hash（哈希，-类似-Java里的Map-）" class="headerlink" title="Hash（哈希，==类似 Java里的Map==）"></a>Hash（哈希，==类似 Java里的Map==）</h3><p>Redis hash 是一个<strong>键值对集合</strong>。</p><p>Redis hash 是一个<strong>String类型的field和value的映射表</strong>，hash特别适合用于<strong>存储对象</strong>。</p><p>类似Java里面的Map&lt;String,Object&gt;</p><h3 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h3><p>Redis列表是<strong>简单的字符串列表</strong>，按照<strong>插入顺序排序</strong>，你可以添加一个元素到列表的头部（左边）或者尾<br>部（右边）。</p><p>它的<strong>底层实际是个链表</strong> !</p><h3 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h3><p>Redis的Set是<strong>String类型的无序集合</strong>，它是通过<strong>HashTable实现</strong>的 !</p><h3 id="Zset（sorted-set：有序集合）"><a href="#Zset（sorted-set：有序集合）" class="headerlink" title="Zset（sorted set：有序集合）"></a>Zset（sorted set：有序集合）</h3><p>Redis zset 和 set 一样，也是<strong>String类型元素的集合</strong>，且<strong>不允许重复的成员</strong>。</p><p>每个元素都会<strong>关联一个double类型的分数</strong>。</p><p>Redis通过<strong>分数</strong>来为集合中的成员进行从小到大的排序，zset的成员是<strong>唯一</strong>的，但是<strong>分数（Score）却可以重复。</strong></p><h2 id="Redis键（key）"><a href="#Redis键（key）" class="headerlink" title="Redis键（key）"></a>Redis键（key）</h2><h3 id="常用命令说明："><a href="#常用命令说明：" class="headerlink" title="常用命令说明："></a>常用命令说明：</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> keys * 查看所有的key</span><br>127.0.0.1:6379&gt; keys *<br>(empty list or set)<br>127.0.0.1:6379&gt; set name ajie<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) &quot;name&quot;<br><span class="hljs-meta">#</span><span class="bash"> exists key 的名字，判断某个key是否存在</span><br>127.0.0.1:6379&gt; EXISTS name<br>(integer) 1<br>127.0.0.1:6379&gt; EXISTS name1<br>(integer) 0<br><span class="hljs-meta">#</span><span class="bash"> move key db ---&gt; 当前库就没有了，被移除了</span><br>127.0.0.1:6379&gt; move name 1<br>(integer) 1<br>127.0.0.1:6379&gt; keys *<br>(empty list or set)<br><span class="hljs-meta">#</span><span class="bash"> expire key 秒钟：为给定 key 设置生存时间，当 key 过期时(生存时间为 0 )，它会被自动删</span><br>除。<br><span class="hljs-meta">#</span><span class="bash"> ttl key 查看还有多少秒过期，-1 表示永不过期，-2 表示已过期</span><br>127.0.0.1:6379&gt; set name ajie<br>OK<br>127.0.0.1:6379&gt; EXPIRE name 10<br>(integer) 1<br>127.0.0.1:6379&gt; ttl name<br>(integer) 4<br>127.0.0.1:6379&gt; ttl name<br>(integer) 3<br>127.0.0.1:6379&gt; ttl name<br>(integer) 2<br>127.0.0.1:6379&gt; ttl name<br>(integer) 1<br>127.0.0.1:6379&gt; ttl name<br>(integer) -2<br>127.0.0.1:6379&gt; keys *<br>(empty list or set)<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">type</span> key 查看你的key是什么类型</span><br>127.0.0.1:6379&gt; set name ajie<br>OK<br>127.0.0.1:6379&gt; get name<br>&quot;ajie&quot;<br>127.0.0.1:6379&gt; type name<br>string<br></code></pre></div></td></tr></table></figure><h2 id="字符串String"><a href="#字符串String" class="headerlink" title="字符串String"></a>字符串String</h2><p>单值单Value</p><h3 id="常用命令说明：-1"><a href="#常用命令说明：-1" class="headerlink" title="常用命令说明："></a>常用命令说明：</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"> ===================================================<br><span class="hljs-meta">#</span><span class="bash"> <span class="hljs-built_in">set</span>、get、del、append、strlen</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; set key1 value1   # 设置值<br>OK<br>127.0.0.1:6379&gt; get key1          # 获得key<br>&quot;value1&quot;<br>127.0.0.1:6379&gt; del key1          # 删除key<br>(integer) 1<br>127.0.0.1:6379&gt; keys *            # 查看全部的key<br>(empty list or set)<br>127.0.0.1:6379&gt; exists key1       # 确保 key1 不存在<br>(integer) 0<br>127.0.0.1:6379&gt; append key1 &quot;hello&quot;  # 对不存在的 key 进行 APPEND ，等同于 SET <br>key1 &quot;hello&quot;<br>(integer) 5     # 字符长度<br>127.0.0.1:6379&gt; APPEND key1 &quot;-2333&quot;  # 对已存在的字符串进行 APPEND<br>(integer) 10    # 长度从 5 个字符增加到 10 个字符<br>127.0.0.1:6379&gt; get key1<br>&quot;hello-2333&quot;<br>127.0.0.1:6379&gt; STRLEN key1       # # 获取字符串的长度<br>(integer) 10   <br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> incr、decr      一定要是数字才能进行加减，+1 和 -1。</span><br><span class="hljs-meta">#</span><span class="bash"> incrby、decrby  命令将 key 中储存的数字加上指定的增量值。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; set views 0       # 设置浏览量为0<br>OK<br>127.0.0.1:6379&gt; incr views        # 浏览 + 1<br>(integer) 1<br>127.0.0.1:6379&gt; incr views        # 浏览 + 1<br>(integer) 2<br>127.0.0.1:6379&gt; decr views        # 浏览 - 1<br>(integer) 1<br>127.0.0.1:6379&gt; incrby views 10   # +10<br>(integer) 11<br>127.0.0.1:6379&gt; decrby views 10   # -10<br>(integer) 1<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> range [范围]</span><br><span class="hljs-meta">#</span><span class="bash"> getrange 获取指定区间范围内的值，类似between...and的关系，从零到负一表示全部</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; set key2 abcd123456  # 设置key2的值<br>OK<br>127.0.0.1:6379&gt; getrange key2 0 -1   # 获得全部的值<br>&quot;abcd123456&quot;<br>127.0.0.1:6379&gt; getrange key2 0 2    # 截取部分字符串<br>&quot;abc&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> setrange 设置指定区间范围内的值，格式是setrange key值 具体值</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; get key2<br>&quot;abcd123456&quot;<br>127.0.0.1:6379&gt; SETRANGE key2 1 xx   # 替换值<br>(integer) 10<br>127.0.0.1:6379&gt; get key2<br>&quot;axxd123456&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> setex（<span class="hljs-built_in">set</span> with expire）键秒值</span><br><span class="hljs-meta">#</span><span class="bash"> setnx（<span class="hljs-built_in">set</span> <span class="hljs-keyword">if</span> not exist）</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; setex key3 60 expire  # 设置过期时间<br>OK<br>127.0.0.1:6379&gt; ttl key3  # 查看剩余的时间<br>(integer) 55<br>127.0.0.1:6379&gt; setnx mykey &quot;redis&quot;   # 如果不存在就设置，成功返回1<br>(integer) 1<br>127.0.0.1:6379&gt; setnx mykey &quot;mongodb&quot;  # 如果存在就设置，失败返回0<br>(integer) 0<br>127.0.0.1:6379&gt; get mykey<br>&quot;redis&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> mset      Mset 命令用于同时设置一个或多个 key-value 对。</span><br><span class="hljs-meta">#</span><span class="bash"> mget      Mget 命令返回所有(一个或多个)给定 key 的值。</span> <br><span class="hljs-meta">#</span><span class="bash">           如果给定的 key 里面，有某个 key 不存在，那么这个 key 返回特殊值 nil 。</span><br><span class="hljs-meta">#</span><span class="bash"> msetnx    当所有 key 都成功设置，返回 1 。</span> <br><span class="hljs-meta">#</span><span class="bash">           如果所有给定 key 都设置失败(至少有一个 key 已经存在)，那么返回 0 。原子操</span><br>作<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; mset k10 v10 k11 v11 k12 v12<br>OK<br>127.0.0.1:6379&gt; keys *<br>1) &quot;k12&quot;<br>2) &quot;k11&quot;<br>3) &quot;k10&quot;<br>127.0.0.1:6379&gt; mget k10 k11 k12 k13<br>1) &quot;v10&quot;<br>2) &quot;v11&quot;<br>3) &quot;v12&quot;<br>4) (nil)<br>127.0.0.1:6379&gt; msetnx k10 v10 k15 v15 # 原子性操作！<br>(integer) 0<br>127.0.0.1:6379&gt; get key15<br>(nil)<br><span class="hljs-meta">#</span><span class="bash"> 传统对象缓存</span><br>set user:1 value(json数据)<br><span class="hljs-meta">#</span><span class="bash"> 可以用来缓存对象</span><br>mset user:1:name zhangsan user:1:age 2<br>mget user:1:name user:1:age<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> getset（先get再<span class="hljs-built_in">set</span>）</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; getset db mongodb   # 没有旧值，返回 nil<br>(nil)<br>127.0.0.1:6379&gt; get db<br>&quot;mongodb&quot;<br>127.0.0.1:6379&gt; getset db redis     # 返回旧值 mongodb<br>&quot;mongodb&quot;<br>127.0.0.1:6379&gt; get db<br>&quot;redis&quot;<br></code></pre></div></td></tr></table></figure><p>String数据结构是简单的<strong>key-value类型</strong>，==value其实不仅可以是String，也可以是数字==。 </p><p>常规key-value缓存应用：</p><p>常规计数：微博数，粉丝数等。</p><h2 id="列表List"><a href="#列表List" class="headerlink" title="列表List"></a>列表List</h2><h3 id="常用命令说明：-2"><a href="#常用命令说明：-2" class="headerlink" title="常用命令说明："></a>常用命令说明：</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> Lpush：将一个或多个值插入到列表头部。（左）</span><br><span class="hljs-meta">#</span><span class="bash"> rpush：将一个或多个值插入到列表尾部。（右）</span><br><span class="hljs-meta">#</span><span class="bash"> lrange：返回列表中指定区间内的元素，区间以偏移量 START 和 END 指定。</span><br><span class="hljs-meta">#</span><span class="bash"> 其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。</span><br><span class="hljs-meta">#</span><span class="bash"> 你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</span> <br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; LPUSH list &quot;one&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; LPUSH list &quot;two&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; RPUSH list &quot;right&quot;<br>(integer) 3<br>127.0.0.1:6379&gt; Lrange list 0 -1<br>1) &quot;two&quot;<br>2) &quot;one&quot;<br>3) &quot;right&quot;<br>127.0.0.1:6379&gt; Lrange list 0 1<br>1) &quot;two&quot;<br>2) &quot;one&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> lpop 命令用于移除并返回列表的第一个元素。当列表 key 不存在时，返回 nil 。</span><br><span class="hljs-meta">#</span><span class="bash"> rpop 移除列表的最后一个元素，返回值为移除的元素。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; Lpop list<br>&quot;two&quot;<br>127.0.0.1:6379&gt; Rpop list<br>&quot;right&quot;<br>127.0.0.1:6379&gt; Lrange list 0 -1<br>1) &quot;one&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> Lindex，按照索引下标获得元素（-1代表最后一个，0代表是第一个）</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; Lindex list 1<br>(nil)<br>127.0.0.1:6379&gt; Lindex list 0<br>&quot;one&quot;<br>127.0.0.1:6379&gt; Lindex list -1<br>&quot;one&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> llen 用于返回列表的长度。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; flushdb<br>OK<br>127.0.0.1:6379&gt; Lpush list &quot;one&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; Lpush list &quot;two&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; Lpush list &quot;three&quot;<br>(integer) 3<br>127.0.0.1:6379&gt; Llen list   # 返回列表的长度<br>(integer) 3<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> lrem key 根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; lrem list 1 &quot;two&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; Lrange list 0 -1<br>1) &quot;three&quot;<br>2) &quot;one&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> Ltrim key 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区</span><br>间之内的元素都将被删除。<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; RPUSH mylist &quot;hello&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; RPUSH mylist &quot;hello2&quot;<br>(integer) 3<br>127.0.0.1:6379&gt; RPUSH mylist &quot;hello3&quot;<br>(integer) 4<br>127.0.0.1:6379&gt; ltrim mylist 1 2<br>OK<br>127.0.0.1:6379&gt; lrange mylist 0 -1<br>1) &quot;hello&quot;<br>2) &quot;hello2&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> rpoplpush 移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; rpush mylist &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; rpush mylist &quot;foo&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; rpush mylist &quot;bar&quot;<br>(integer) 3<br>127.0.0.1:6379&gt; rpoplpush mylist myotherlist<br>&quot;bar&quot;<br>127.0.0.1:6379&gt; lrange mylist 0 -1<br>1) &quot;hello&quot;<br>2) &quot;foo&quot;<br>127.0.0.1:6379&gt; lrange myotherlist 0 -1<br>1) &quot;bar&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> lset key index value 将列表 key 下标为 index 的元素的值设置为 value 。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; exists list  # 对空列表(key 不存在)进行 LSET<br>(integer) 0<br>127.0.0.1:6379&gt; lset list 0 item # 报错<br>(error) ERR no such key<br>127.0.0.1:6379&gt; lpush list &quot;value1&quot; # 对非空列表进行 LSET<br>(integer) 1<br>127.0.0.1:6379&gt; lrange list 0 0<br>1) &quot;value1&quot;<br>127.0.0.1:6379&gt; lset list 0 &quot;new&quot;  # 更新值<br>OK<br>127.0.0.1:6379&gt; lrange list 0 0<br>1) &quot;new&quot;<br>127.0.0.1:6379&gt; lset list 1 &quot;new&quot;  # index 超出范围报错<br>(error) ERR index out of range<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> linsert key before/after pivot value 用于在列表的元素前或者后插入元素。</span><br><span class="hljs-meta">#</span><span class="bash"> 将值 value 插入到列表 key 当中，位于值 pivot 之前或之后。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="hljs-string">&quot;Hello&quot;</span></span><br>(integer) 1<br><span class="hljs-meta">redis&gt;</span><span class="bash"> RPUSH mylist <span class="hljs-string">&quot;World&quot;</span></span><br>(integer) 2<br><span class="hljs-meta">redis&gt;</span><span class="bash"> LINSERT mylist BEFORE <span class="hljs-string">&quot;World&quot;</span> <span class="hljs-string">&quot;There&quot;</span></span><br>(integer) 3<br><span class="hljs-meta">redis&gt;</span><span class="bash"> LRANGE mylist 0 -1</span><br>1) &quot;Hello&quot;<br>2) &quot;There&quot;<br>3) &quot;World&quot;<br></code></pre></div></td></tr></table></figure><h3 id="性能总结"><a href="#性能总结" class="headerlink" title="性能总结"></a>性能总结</h3><ul><li>它是一个字符串链表，left，right 都可以插入添加</li><li>如果键不存在，创建新的链表</li><li>如果键已存在，新增内容</li><li>如果值全移除，对应的键也就消失了</li><li>链表的操作无论是头和尾效率都极高，但假如是对中间元素进行操作，效率就很惨淡了。</li></ul><p>List就是链表。使用List结构，可以轻松地实现最新消息排行等功能。List的另一个应用就是消息队列，可以利用List的PUSH操作，将任务存在List中，然后工作线程再用POP操作将任务取出进行执行。Redis还提供了操作List中某一段的api，你可以直接查询，删除List中某一段的元素。 </p><p>Redis的list是每个子元素都是String类型的<strong>双向链表</strong>，可以通过push和pop操作从列表的头部或者尾部添加或者删除元素，这样List即可以作为栈，也可以作为队列。</p><h2 id="集合Set"><a href="#集合Set" class="headerlink" title="集合Set"></a>集合Set</h2><p>单值多value</p><h3 id="常用命令说明：-3"><a href="#常用命令说明：-3" class="headerlink" title="常用命令说明："></a>常用命令说明：</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> sadd 将一个或多个成员元素加入到集合中，不能重复</span><br><span class="hljs-meta">#</span><span class="bash"> smembers 返回集合中的所有的成员。</span><br><span class="hljs-meta">#</span><span class="bash"> sismember 命令判断成员元素是否是集合的成员。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; sadd myset &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset &quot;ajie&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset &quot;ajie&quot;<br>(integer) 0<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) &quot;ajie&quot;<br>2) &quot;hello&quot;<br>127.0.0.1:6379&gt; SISMEMBER myset &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; SISMEMBER myset &quot;world&quot;<br>(integer) 0<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> scard，获取集合里面的元素个数</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; scard myset<br>(integer) 2<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> srem key value 用于移除集合中的一个或多个成员元素</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; srem myset &quot;ajie&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) &quot;hello&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> srandmember key 命令用于返回集合中的一个随机元素。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) &quot;ajie&quot;<br>2) &quot;world&quot;<br>3) &quot;hello&quot;<br>127.0.0.1:6379&gt; SRANDMEMBER myset<br>&quot;hello&quot;<br>127.0.0.1:6379&gt; SRANDMEMBER myset 2<br>1) &quot;world&quot;<br>2) &quot;ajie&quot;<br>127.0.0.1:6379&gt; SRANDMEMBER myset 2<br>1) &quot;ajie&quot;<br>2) &quot;hello&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> spop key 用于移除集合中的指定 key 的一个或多个随机元素</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) &quot;ajie&quot;<br>2) &quot;world&quot;<br>3) &quot;hello&quot;<br>127.0.0.1:6379&gt; spop myset<br>&quot;world&quot;<br>127.0.0.1:6379&gt; spop myset<br>&quot;ajie&quot;<br>127.0.0.1:6379&gt; spop myset<br>&quot;hello&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> smove SOURCE DESTINATION MEMBER</span> <br><span class="hljs-meta">#</span><span class="bash"> 将指定成员 member 元素从 <span class="hljs-built_in">source</span> 集合移动到 destination 集合。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; sadd myset &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset &quot;world&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset &quot;ajie&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd myset2 &quot;set2&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; smove myset myset2 &quot;ajie&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; SMEMBERS myset<br>1) &quot;world&quot;<br>2) &quot;hello&quot;<br>127.0.0.1:6379&gt; SMEMBERS myset2<br>1) &quot;ajie&quot;<br>2) &quot;set2&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>- 数字集合类<br>  - 差集： sdiff<br>  - 交集： sinter<br>  - 并集： sunion<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; sadd key1 &quot;a&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key1 &quot;b&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key1 &quot;c&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key2 &quot;c&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key2 &quot;d&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; sadd key2 &quot;e&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; SDIFF key1 key2 # 差集<br>1) &quot;a&quot;<br>2) &quot;b&quot;<br>127.0.0.1:6379&gt; SINTER key1 key2 # 交集<br>1) &quot;c&quot;<br>127.0.0.1:6379&gt; SUNION key1 key2 # 并集<br>1) &quot;a&quot;<br>2) &quot;b&quot;<br>3) &quot;c&quot;<br>4) &quot;e&quot;<br>5) &quot;d&quot;<br></code></pre></div></td></tr></table></figure><p>在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</p><h2 id="哈希Hash"><a href="#哈希Hash" class="headerlink" title="哈希Hash"></a>哈希Hash</h2><p>==kv模式不变，但V是一个键值对==</p><h4 id="常用命令说明：-4"><a href="#常用命令说明：-4" class="headerlink" title="常用命令说明："></a>常用命令说明：</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> hset、hget 命令用于为哈希表中的字段赋值 。</span><br><span class="hljs-meta">#</span><span class="bash"> hmset、hmget 同时将多个field-value对设置到哈希表中。会覆盖哈希表中已存在的字段。</span><br><span class="hljs-meta">#</span><span class="bash"> hgetall 用于返回哈希表中，所有的字段和值。</span><br><span class="hljs-meta">#</span><span class="bash"> hdel    用于删除哈希表 key 中的一个或多个指定字段</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; hset myhash field1 &quot;ajie&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; hget myhash field1<br>&quot;ajie&quot;<br>127.0.0.1:6379&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;<br>OK<br>127.0.0.1:6379&gt; HGET myhash field1<br>&quot;Hello&quot;<br>127.0.0.1:6379&gt; HGET myhash field2<br>&quot;World&quot;<br>127.0.0.1:6379&gt; hgetall myhash<br>1) &quot;field1&quot;<br>2) &quot;Hello&quot;<br>3) &quot;field2&quot;<br>4) &quot;World&quot;<br>127.0.0.1:6379&gt; HDEL myhash field1<br>(integer) 1<br>127.0.0.1:6379&gt; hgetall myhash<br>1) &quot;field2&quot;<br>2) &quot;World&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> hlen 获取哈希表中字段的数量。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; hlen myhash<br>(integer) 1<br>127.0.0.1:6379&gt; HMSET myhash field1 &quot;Hello&quot; field2 &quot;World&quot;<br>OK<br>127.0.0.1:6379&gt; hlen myhash<br>(integer) 2<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> hexists 查看哈希表的指定字段是否存在。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; hexists myhash field1<br>(integer) 1<br>127.0.0.1:6379&gt; hexists myhash field3<br>(integer) 0<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> hkeys 获取哈希表中的所有域（field）。</span><br><span class="hljs-meta">#</span><span class="bash"> hvals 返回哈希表所有域(field)的值。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; HKEYS myhash<br>1) &quot;field2&quot;<br>2) &quot;field1&quot;<br>127.0.0.1:6379&gt; HVALS myhash<br>1) &quot;World&quot;<br>2) &quot;Hello&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> hincrby 为哈希表中的字段值加上指定增量值。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; hset myhash field 5<br>(integer) 1<br>127.0.0.1:6379&gt; HINCRBY myhash field 1<br>(integer) 6<br>127.0.0.1:6379&gt; HINCRBY myhash field -1<br>(integer) 5<br>127.0.0.1:6379&gt; HINCRBY myhash field -10<br>(integer) -5<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> hsetnx 为哈希表中不存在的的字段赋值 。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; HSETNX myhash field1 &quot;hello&quot;<br>(integer) 1   # 设置成功，返回 1 。<br>127.0.0.1:6379&gt; HSETNX myhash field1 &quot;world&quot;<br>(integer) 0   # 如果给定字段已经存在，返回 0 。<br>127.0.0.1:6379&gt; HGET myhash field1<br>&quot;hello&quot;<br></code></pre></div></td></tr></table></figure><p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p><p>存储部分变更的数据，如用户信息等。</p><h2 id="有序集合Zset"><a href="#有序集合Zset" class="headerlink" title="有序集合Zset"></a>有序集合Zset</h2><p>在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是 k1 score1 v1 score2 v2</p><h3 id="常用命令说明：-5"><a href="#常用命令说明：-5" class="headerlink" title="常用命令说明："></a>常用命令说明：</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> zadd    将一个或多个成员元素及其分数值加入到有序集当中。</span><br><span class="hljs-meta">#</span><span class="bash"> zrange  返回有序集中，指定区间内的成员</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; zadd myset 1 &quot;one&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; zadd myset 2 &quot;two&quot; 3 &quot;three&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; ZRANGE myset 0 -1<br>1) &quot;one&quot;<br>2) &quot;two&quot;<br>3) &quot;three&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> zrangebyscore 返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)</span><br>次序排列。<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; zadd salary 2500 xiaoming<br>(integer) 1<br>127.0.0.1:6379&gt; zadd salary 5000 xiaohong<br>(integer) 1<br>127.0.0.1:6379&gt; zadd salary 500 ajie<br>(integer) 1<br><span class="hljs-meta">#</span><span class="bash"> Inf无穷大量+∞,同样地,-∞可以表示为-Inf。</span><br>127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf # 显示整个有序集<br>1) &quot;ajie&quot;<br>2) &quot;xiaoming&quot;<br>3) &quot;xiaohong&quot;<br>127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf +inf withscores # 递增排列<br>1) &quot;ajie&quot;<br>2) &quot;500&quot;<br>3) &quot;xiaoming&quot;<br>4) &quot;2500&quot;<br>5) &quot;xiaohong&quot;<br>6) &quot;5000&quot;<br>127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 WITHSCORES  # 递减排列<br>1) &quot;xiaohong&quot;<br>2) &quot;5000&quot;<br>3) &quot;xiaoming&quot;<br>4) &quot;2500&quot;<br>5) &quot;ajie&quot;<br>6) &quot;500&quot;<br>127.0.0.1:6379&gt; ZRANGEBYSCORE salary -inf 2500 WITHSCORES # 显示工资 &lt;=2500 <br>的所有成员<br>1) &quot;ajie&quot;<br>2) &quot;500&quot;<br>3) &quot;xiaoming&quot;<br>4) &quot;2500&quot;<br><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> zrem 移除有序集中的一个或多个成员</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; ZRANGE salary 0 -1<br>1) &quot;ajie&quot;<br>2) &quot;xiaoming&quot;<br>3) &quot;xiaohong&quot;<br>127.0.0.1:6379&gt; zrem salary ajie<br>(integer) 1<br>127.0.0.1:6379&gt; ZRANGE salary 0 -1<br>1) &quot;xiaoming&quot;<br>2) &quot;xiaohong&quot;<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> zcard   命令用于计算集合中元素的数量。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; zcard salary<br>(integer) 2<br>OK<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> zcount  计算有序集合中指定分数区间的成员数量。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; zadd myset 1 &quot;hello&quot;<br>(integer) 1<br>127.0.0.1:6379&gt; zadd myset 2 &quot;world&quot; 3 &quot;ajie&quot;<br>(integer) 2<br>127.0.0.1:6379&gt; ZCOUNT myset 1 3<br>(integer) 3<br>127.0.0.1:6379&gt; ZCOUNT myset 1 2<br>(integer) 2<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> zrank  返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; zadd salary 2500 xiaoming<br>(integer) 1<br>127.0.0.1:6379&gt; zadd salary 5000 xiaohong<br>(integer) 1<br>127.0.0.1:6379&gt; zadd salary 500 ajie<br>(integer) 1<br>127.0.0.1:6379&gt; ZRANGE salary 0 -1 WITHSCORES  # 显示所有成员及其 score 值<br>1) &quot;ajie&quot;<br>2) &quot;500&quot;<br>3) &quot;xiaoming&quot;<br>4) &quot;2500&quot;<br>5) &quot;xiaohong&quot;<br>6) &quot;5000&quot;<br>127.0.0.1:6379&gt; zrank salary ajie  # 显示 ajie 的薪水排名，最少<br>(integer) 0<br>127.0.0.1:6379&gt; zrank salary xiaohong   # 显示 xiaohong 的薪水排名，第三<br>(integer) 2<br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br><span class="hljs-meta">#</span><span class="bash"> zrevrank 返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。</span><br><span class="hljs-meta">#</span><span class="bash"> ===================================================</span><br>127.0.0.1:6379&gt; ZREVRANK salary ajie # 狂神第三<br>(integer) 2<br>127.0.0.1:6379&gt; ZREVRANK salary xiaohong  # 小红第一<br>(integer) 0<br></code></pre></div></td></tr></table></figure><p>和set相比，sorted set增加了一个权重参数score，使得集合中的元素能够按score进行有序排列，比如一个存储全班同学成绩的sorted set，其集合value可以是同学的学号，而score就可以是其考试得分，这样在数据插入集合的时候，就已经进行了天然的排序。可以用sorted set来做带权重的队列，比如普通消息的score为1，重要消息的score为2，然后工作线程可以选择按score的倒序来获取工作任务。让重要的任务优先执行。</p><p>排行榜应用，取TOP N操作 ！</p><h2 id="三种特殊数据类型"><a href="#三种特殊数据类型" class="headerlink" title="三种特殊数据类型"></a>三种特殊数据类型</h2><h3 id="GEO地理位置"><a href="#GEO地理位置" class="headerlink" title="GEO地理位置"></a>GEO地理位置</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Redis 的 GEO 特性在 Redis 3.2 版本中推出， 这个功能可以将<strong>用户给定的地理位置信息</strong>储存起来， 并对<br>这些信息进行操作。来实现诸如附近位置、摇一摇这类依赖于地理位置信息的功能。geo的数据类型为zset。</p><p>GEO 的数据结构总共有六个常用命令：geoadd、geopos、geodist、georadius、georadiusbymember、gethash</p><p>官方文档：<a href="https://www.redis.net.cn/order/3685.html">https://www.redis.net.cn/order/3685.html</a></p><h4 id="geoadd"><a href="#geoadd" class="headerlink" title="geoadd"></a>geoadd</h4><p>解析：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 语法</span><br>geoadd key longitude latitude member ...<br><span class="hljs-meta">#</span><span class="bash"> 将给定的空间元素(纬度、经度、名字)添加到指定的键里面。</span><br><span class="hljs-meta">#</span><span class="bash"> 这些数据会以有序集he的形式被储存在键里面，从而使得georadius和georadiusbymember这样的</span><br>命令可以在之后通过位置查询取得这些元素。<br><span class="hljs-meta">#</span><span class="bash"> geoadd命令以标准的x,y格式接受参数,所以用户必须先输入经度,然后再输入纬度。</span><br><span class="hljs-meta">#</span><span class="bash"> geoadd能够记录的坐标是有限的:非常接近两极的区域无法被索引。</span><br><span class="hljs-meta">#</span><span class="bash"> 有效的经度介于-180-180度之间，有效的纬度介于-85.05112878 度至 85.05112878 度之间。，</span><br>当用户尝试输入一个超出范围的经度或者纬度时,geoadd命令将返回一个错误。<br></code></pre></div></td></tr></table></figure><p>测试：百度搜索经纬度查询，模拟真实数据</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; geoadd china:city 116.23 40.22 北京<br>(integer) 1<br>127.0.0.1:6379&gt; geoadd china:city 121.48 31.40 上海 113.88 22.55 深圳 120.21 30.20 杭州<br>(integer) 3<br>127.0.0.1:6379&gt; geoadd china:city 106.54 29.40 重庆 108.93 34.23 西安 114.02 30.58 武汉<br>(integer) 3<br></code></pre></div></td></tr></table></figure><h4 id="geopos"><a href="#geopos" class="headerlink" title="geopos"></a>geopos</h4><p>解析：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 语法</span><br>geopos key member [member...]<br><span class="hljs-meta">#</span><span class="bash">从key里返回所有给定位置元素的位置（经度和纬度）</span><br></code></pre></div></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; geopos china:city 北京<br>1) 1) &quot;116.23000055551528931&quot;<br>   2) &quot;40.2200010338739844&quot;<br>127.0.0.1:6379&gt; geopos china:city 上海 重庆<br>1) 1) &quot;121.48000091314315796&quot;<br>   2) &quot;31.40000025319353938&quot;<br>2) 1) &quot;106.54000014066696167&quot;<br>   2) &quot;29.39999880018641676&quot;<br>127.0.0.1:6379&gt; geopos china:city 新疆<br>1) (nil)<br></code></pre></div></td></tr></table></figure><h4 id="geodist"><a href="#geodist" class="headerlink" title="geodist"></a>geodist</h4><p>解析：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 语法</span><br>geodist key member1 member2 [unit]<br><span class="hljs-meta">#</span><span class="bash"> 返回两个给定位置之间的距离，如果两个位置之间的其中一个不存在,那么命令返回空值。</span><br><span class="hljs-meta">#</span><span class="bash"> 指定单位的参数unit必须是以下单位的其中一个：</span><br><span class="hljs-meta">#</span><span class="bash">    m表示单位为米</span><br><span class="hljs-meta">#</span><span class="bash">    km表示单位为千米</span><br><span class="hljs-meta">#</span><span class="bash">    mi表示单位为英里</span><br><span class="hljs-meta">#</span><span class="bash">    ft表示单位为英尺</span><br><span class="hljs-meta">#</span><span class="bash">    如果用户没有显式地指定单位参数,那么geodist默认使用米作为单位。</span><br><span class="hljs-meta">#</span><span class="bash">geodist命令在计算距离时会假设地球为完美的球形,在极限情况下,这一假设最大会造成0.5%的误差。</span><br></code></pre></div></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; geodist china:city 北京 上海 &quot;1088785.4302&quot;<br>127.0.0.1:6379&gt; geodist china:city 北京 上海 km &quot;1088.7854&quot;<br>127.0.0.1:6379&gt; geodist china:city 重庆 北京 km &quot;1491.6716&quot;<br></code></pre></div></td></tr></table></figure><h4 id="georadius"><a href="#georadius" class="headerlink" title="georadius"></a>georadius</h4><p>解析：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 语法</span><br>georadius key longitude latitude radius m|km|ft|mi [withcoord][withdist]<br>[withhash][asc|desc][count count]<br><span class="hljs-meta">#</span><span class="bash"> 以给定的经纬度为中心， 找出某一半径内的元素</span><br></code></pre></div></td></tr></table></figure><p>测试：重新连接 redis-cli，增加参数  –raw ，可以强制输出中文，不然会乱码</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[root@ajie bin]# redis-cli --raw -p 6379<br><span class="hljs-meta">#</span><span class="bash"> 在 china:city 中寻找坐标 100 30 半径为 1000km 的城市</span><br>127.0.0.1:6379&gt; georadius china:city 100 30 1000 km<br>重庆<br>西安<br><span class="hljs-meta">#</span><span class="bash"> withdist 返回位置名称和中心距离</span><br>127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withdist<br>重庆<br>635.2850<br>西安<br>963.3171<br><span class="hljs-meta">#</span><span class="bash"> withcoord 返回位置名称和经纬度</span><br>127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withcoord<br>重庆<br>106.54000014066696167<br>29.39999880018641676<br>西安<br>108.92999857664108276<br>34.23000121926852302<br><span class="hljs-meta">#</span><span class="bash">  withdist withcoord 返回位置名称 距离 和经纬度 count 限定寻找个数</span><br>127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withcoord withdist count <br>1<br>重庆<br>635.2850<br>106.54000014066696167<br>29.39999880018641676<br>127.0.0.1:6379&gt; georadius china:city 100 30 1000 km withcoord withdist count <br>2<br>重庆<br>635.2850<br>106.54000014066696167<br>29.39999880018641676<br>西安<br>963.3171<br>108.92999857664108276<br>34.23000121926852302<br></code></pre></div></td></tr></table></figure><h4 id="georadiusbymembe"><a href="#georadiusbymembe" class="headerlink" title="georadiusbymembe"></a>georadiusbymembe</h4><p>解析</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 语法</span><br>georadiusbymember key member radius m|km|ft|mi [withcoord][withdist]<br>[withhash][asc|desc][count count]<br><span class="hljs-meta">#</span><span class="bash"> 找出位于指定范围内的元素，中心点是由给定的位置元素决定</span><br></code></pre></div></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city 北京 1000 km<br>北京<br>西安<br>127.0.0.1:6379&gt; GEORADIUSBYMEMBER china:city 上海 400 km<br>杭州<br>上海<br></code></pre></div></td></tr></table></figure><h4 id="geohash"><a href="#geohash" class="headerlink" title="geohash"></a>geohash</h4><p>解析</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 语法</span><br>geohash key member [member...]<br><span class="hljs-meta">#</span><span class="bash"> Redis使用geohash将二维经纬度转换为一维字符串，字符串越长表示位置更精确,两个字符串越相似表示距离越近。</span><br></code></pre></div></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; geohash china:city 北京 重庆<br>wx4sucu47r0<br>wm5z22h53v0<br>127.0.0.1:6379&gt; geohash china:city 北京 上海<br>wx4sucu47r0<br>wtw6sk5n300<br></code></pre></div></td></tr></table></figure><h4 id="zrem"><a href="#zrem" class="headerlink" title="zrem"></a>zrem</h4><p>GEO没有提供删除成员的命令，但是因为GEO的底层实现是zset，所以可以借用zrem命令实现对地理位置信息的删除。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; geoadd china:city 116.23 40.22 beijin<br>1<br>127.0.0.1:6379&gt; zrange china:city 0 -1   # 查看全部的元素<br>重庆<br>西安<br>深圳<br>武汉<br>杭州<br>上海<br>beijin<br>北京<br>127.0.0.1:6379&gt; zrem china:city beijin  # 移除元素<br>1<br>127.0.0.1:6379&gt; zrem china:city 北京     # 移除元素<br>1<br>127.0.0.1:6379&gt; zrange china:city 0 -1<br>重庆<br>西安<br>深圳<br>武汉<br>杭州<br>上海<br></code></pre></div></td></tr></table></figure><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p><p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定 的、并且是很小的。</p><p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基 数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p><p>HyperLogLog则是一种算法，它提供了不精确的去重计数方案。</p><p>举个栗子：假如我要统计网页的UV（浏览用户数量，一天内同一个用户多次访问只能算一次），传统的解决方案是使用Set来保存用户id，然后统计Set中的元素数量来获取页面UV。但这种方案只能承载少量用户，一旦用户数量大起来就需要消耗大量的空间来存储用户id。我的目的是统计用户数量而不是保存用户，这简直是个吃力不讨好的方案！而使用Redis的HyperLogLog最多需要12k就可以统计大量的用户数，尽管它大概有0.81%的错误率，但对于统计UV这种不需要很精确的数据是可以忽略不计的。</p><h4 id="什么是基数？"><a href="#什么是基数？" class="headerlink" title="什么是基数？"></a>什么是基数？</h4><p>比如数据集 {1, 3, 5, 7, 5, 7, 8}， 那么这个数据集的基数集为 {1, 3, 5 ,7, 8}, 基数(不重复元素)为5。 </p><p>基数估计就是在误差可接受的范围内，快速计算基数。</p><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>[PFADD key element [element …]</td><td>添加指定元素到 HyperLogLog 中。</td></tr><tr><td>[PFCOUNT key [key …]</td><td>返回给定 HyperLogLog 的基数估算值。</td></tr><tr><td>[PFMERGE destkey sourcekey [sourcekey …]</td><td>将多个 HyperLogLog 合并为一个 HyperLogLog，并集计算。</td></tr></tbody></table><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; PFADD mykey a b c d e f g h i j<br>1<br>127.0.0.1:6379&gt; PFCOUNT mykey<br>10<br>127.0.0.1:6379&gt; PFADD mykey2 i j z x c v b n m<br>1<br>127.0.0.1:6379&gt; PFMERGE mykey3 mykey mykey2<br>OK<br>127.0.0.1:6379&gt; PFCOUNT mykey3<br>15<br></code></pre></div></td></tr></table></figure><h3 id="BitMap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>在开发中，可能会遇到这种情况：需要统计用户的某些信息，如活跃或不活跃，登录或者不登录；又如需要记录用户一年的打卡情况，打卡了是1， 没有打卡是0，如果使用普通的 key/value存储，则要记录365条记录，如果用户量很大，需要的空间也会很大，所以 Redis 提供了 Bitmap 位图这中数据结构，Bitmap 就是通过操作二进制位来进行记录，即为 0 和 1；如果要记录 365 天的打卡情况，使用 Bitmap 表示的形式大概如下：0101000111000111………………………，这样有什么好处呢？当然就是节约内存了，365 天相当于 365 bit，又 1 字节 = 8 bit , 所以相当于使用 46 个字节即可。</p><p>BitMap 就是通过一个 bit 位来表示某个元素对应的值或者状态, 其中的 key 就是对应元素本身，实际上底层也是通过对字符串的操作来实现。Redis 从 2.2 版本之后新增了setbit, getbit, bitcount 等几个 bitmap 相关命令。</p><h4 id="setbit-设置操作"><a href="#setbit-设置操作" class="headerlink" title="setbit 设置操作"></a>setbit 设置操作</h4><p>SETBIT key offset value : 设置 key 的第 offset 位为value (1或0)</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 使用 bitmap 来记录上述事例中一周的打卡记录如下所示：</span><br><span class="hljs-meta">#</span><span class="bash"> 周一：1，周二：0，周三：0，周四：1，周五：1，周六：0，周天：0 （1 为打卡，0 为不打卡）</span><br>127.0.0.1:6379&gt; setbit sign 0 1<br>0<br>127.0.0.1:6379&gt; setbit sign 1 0<br>0<br>127.0.0.1:6379&gt; setbit sign 2 0<br>0<br>127.0.0.1:6379&gt; setbit sign 3 1<br>0<br>127.0.0.1:6379&gt; setbit sign 4 1<br>0<br>127.0.0.1:6379&gt; setbit sign 5 0<br>0<br>127.0.0.1:6379&gt; setbit sign 6 0<br>0<br></code></pre></div></td></tr></table></figure><h4 id="getbit-获取操作"><a href="#getbit-获取操作" class="headerlink" title="getbit 获取操作"></a>getbit 获取操作</h4><p>GETBIT key offset  获取offset设置的值，未设置过默认返回0</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; getbit sign 3     # 查看周四是否打卡<br>1 <br>127.0.0.1:6379&gt; getbit sign 6     # 查看周七是否打卡<br>0<br></code></pre></div></td></tr></table></figure><h4 id="bitcount-统计操作"><a href="#bitcount-统计操作" class="headerlink" title="bitcount 统计操作"></a>bitcount 统计操作</h4><p>bitcount key [start, end] 统计 key 上位为1的个数</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 统计这周打卡的记录，可以看到只有3天是打卡的状态：</span><br>127.0.0.1:6379&gt; bitcount sign<br>3<br></code></pre></div></td></tr></table></figure><h2 id="Redis-conf"><a href="#Redis-conf" class="headerlink" title="Redis.conf"></a>Redis.conf</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><h4 id="位置"><a href="#位置" class="headerlink" title="位置"></a>位置</h4><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 redis.conf</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">config get *  # 获取全部的配置<br></code></pre></div></td></tr></table></figure><p>我们一般情况下，会单独拷贝出来一份进行操作。来保证初始文件的安全。</p><h4 id="Units-单位"><a href="#Units-单位" class="headerlink" title="Units 单位"></a>Units 单位</h4><p>1、配置大小单位，开头定义了一些基本的度量单位，只支持bytes，不支持bit</p><p>2、对 大小写 不敏感</p><h4 id="INCLUDES-包含"><a href="#INCLUDES-包含" class="headerlink" title="INCLUDES 包含"></a>INCLUDES 包含</h4><p>和Spring配置文件类似，可以通过includes包含，redis.conf 可以作为总文件，可以包含其他文件！</p><h4 id="NETWORK-网络配置"><a href="#NETWORK-网络配置" class="headerlink" title="NETWORK 网络配置"></a>NETWORK 网络配置</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">bind</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>      <span class="hljs-comment"># 绑定的ip</span><br><span class="hljs-string">protected-mode</span> <span class="hljs-literal">yes</span>  <span class="hljs-comment"># 保护模式</span><br><span class="hljs-string">port</span> <span class="hljs-number">6379</span>           <span class="hljs-comment"># 默认端口</span><br></code></pre></div></td></tr></table></figure><h4 id="GENERAL-通用"><a href="#GENERAL-通用" class="headerlink" title="GENERAL 通用"></a>GENERAL 通用</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">daemonize</span> <span class="hljs-literal">yes</span>  <span class="hljs-comment"># 默认情况下，Redis不作为守护进程运行。需要开启的话，改为 yes</span><br><span class="hljs-string">supervised</span> <span class="hljs-literal">no</span>  <span class="hljs-comment"># 可通过upstart和systemd管理Redis守护进程</span><br><span class="hljs-string">pidfile</span> <span class="hljs-string">/var/run/redis_6379.pid</span>  <span class="hljs-comment">#  以后台进程方式运行redis，则需要指定pid 文件</span><br><span class="hljs-string">loglevel</span> <span class="hljs-string">notice</span> <span class="hljs-comment"># 日志级别。可选项有：</span><br>                <span class="hljs-comment"># debug（记录大量日志信息，适用于开发、测试阶段）；  </span><br>                <span class="hljs-comment"># verbose（较多日志信息）；</span><br>                <span class="hljs-comment"># notice（适量日志信息，使用于生产环境）；</span><br>                <span class="hljs-comment"># warning（仅有部分重要、关键信息才会被记录）。</span><br> <br><span class="hljs-string">logfile</span> <span class="hljs-string">&quot;&quot;</span>      <span class="hljs-comment"># 日志文件的位置，当指定为空字符串时，为标准输出</span><br><span class="hljs-string">databases</span> <span class="hljs-number">16</span>    <span class="hljs-comment"># 设置数据库的数目。默认的数据库是DB 0</span><br><span class="hljs-string">always-show-logo</span> <span class="hljs-literal">yes</span>  <span class="hljs-comment"># 是否总是显示logo</span><br></code></pre></div></td></tr></table></figure><h4 id="PTING-快照"><a href="#PTING-快照" class="headerlink" title="PTING 快照"></a>PTING 快照</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 900秒（15分钟）内至少1个key值改变（则进行数据库保存--持久化）</span><br><span class="hljs-string">save</span> <span class="hljs-number">900</span> <span class="hljs-number">1</span><br><span class="hljs-comment"># 300秒（5分钟）内至少10个key值改变（则进行数据库保存--持久化）</span><br><span class="hljs-string">save</span> <span class="hljs-number">300</span> <span class="hljs-number">10</span><br><span class="hljs-comment"># 60秒（1分钟）内至少10000个key值改变（则进行数据库保存--持久化）</span><br><span class="hljs-string">save</span> <span class="hljs-number">60</span> <span class="hljs-number">10000</span><br><span class="hljs-string">stop-writes-on-bgsave-error</span> <span class="hljs-literal">yes</span>  <span class="hljs-comment"># 持久化出现错误后，是否依然进行继续进行工作</span><br><span class="hljs-string">rdbcompression</span> <span class="hljs-literal">yes</span>   <span class="hljs-comment"># 使用压缩rdb文件 yes：压缩，但是需要一些cpu的消耗。no：不压缩，需要更多的磁盘空间</span><br><span class="hljs-string">rdbchecksum</span> <span class="hljs-literal">yes</span>      <span class="hljs-comment"># 是否校验rdb文件，更有利于文件的容错性，但是在保存rdb文件的时候，会有大概10%的性能损耗</span><br><span class="hljs-string">dbfilename</span> <span class="hljs-string">dump.rdb</span>  <span class="hljs-comment"># dbfilenamerdb文件名称</span><br><span class="hljs-string">dir</span> <span class="hljs-string">./</span>    <span class="hljs-comment"># dir 数据目录，数据库的写入会在这个目录。rdb、aof文件也会写在这个目录</span><br></code></pre></div></td></tr></table></figure><h4 id="REPLICATION-复制"><a href="#REPLICATION-复制" class="headerlink" title="REPLICATION 复制"></a>REPLICATION 复制</h4><h4 id="SECURITY安全"><a href="#SECURITY安全" class="headerlink" title="SECURITY安全"></a>SECURITY安全</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 启动redis</span><br><span class="hljs-comment"># 连接客户端</span><br><span class="hljs-comment"># 获得和设置密码</span><br><span class="hljs-string">config</span> <span class="hljs-string">get</span> <span class="hljs-string">requirepass</span><br><span class="hljs-string">config</span> <span class="hljs-string">set</span> <span class="hljs-string">requirepass</span> <span class="hljs-string">&quot;123456&quot;</span><br><span class="hljs-comment">#测试ping，发现需要验证</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:6379&gt;</span> <span class="hljs-string">ping</span><br><span class="hljs-string">NOAUTH</span> <span class="hljs-string">Authentication</span> <span class="hljs-string">required.</span><br><span class="hljs-comment"># 验证</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:6379&gt;</span> <span class="hljs-string">auth</span> <span class="hljs-number">123456</span><br><span class="hljs-string">OK</span><br><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:6379&gt;</span> <span class="hljs-string">ping</span><br><span class="hljs-string">PONG</span><br></code></pre></div></td></tr></table></figure><h4 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">maxclients</span> <span class="hljs-number">10000</span>   <span class="hljs-comment"># 设置能连上redis的最大客户端连接数量</span><br><span class="hljs-string">maxmemory</span> <span class="hljs-string">&lt;bytes&gt;</span>   <span class="hljs-comment"># redis配置的最大内存容量</span><br><span class="hljs-string">maxmemory-policy</span> <span class="hljs-string">noeviction</span>   <span class="hljs-comment"># maxmemory-policy 内存达到上限的处理策略</span><br>        <span class="hljs-comment">#volatile-lru：利用LRU算法移除设置过过期时间的key。</span><br>        <span class="hljs-comment">#volatile-random：随机移除设置过过期时间的key。</span><br>        <span class="hljs-comment">#volatile-ttl：移除即将过期的key，根据最近过期时间来删除（辅以TTL）</span><br>        <span class="hljs-comment">#allkeys-lru：利用LRU算法移除任何key。</span><br>        <span class="hljs-comment">#allkeys-random：随机移除任何key。</span><br>        <span class="hljs-comment">#noeviction：不移除任何key，只是返回一个写错误。</span><br></code></pre></div></td></tr></table></figure><h4 id="append-only模式"><a href="#append-only模式" class="headerlink" title="append only模式"></a>append only模式</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">appendonly</span> <span class="hljs-literal">no</span>   <span class="hljs-comment"># 是否以append only模式作为持久化方式，默认使用的是rdb方式持久化，这种方式在许多应用中已经足够用了</span><br><span class="hljs-string">appendfilename</span> <span class="hljs-string">&quot;appendonly.aof&quot;</span>   <span class="hljs-comment"># appendfilename AOF 文件名称</span><br><span class="hljs-string">appendfsync</span> <span class="hljs-string">everysec</span>  <span class="hljs-comment"># appendfsync aof持久化策略的配置</span><br>    <span class="hljs-comment"># no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span><br>    <span class="hljs-comment"># always表示每次写入都执行fsync，以保证数据同步到磁盘。</span><br>    <span class="hljs-comment"># everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span><br></code></pre></div></td></tr></table></figure><p>具体的在后面Redis的持久化配置！</p><h3 id="常见配置介绍"><a href="#常见配置介绍" class="headerlink" title="常见配置介绍"></a>常见配置介绍</h3><p>1、Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</p><blockquote><p>daemonize no</p></blockquote><p>2、当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</p><blockquote><p>pidfile /var/run/redis.pid</p></blockquote><p>3、指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字。</p><blockquote><p>port 6379</p></blockquote><p>4、绑定的主机地址</p><blockquote><p>bind 127.0.0.1</p></blockquote><p>5、当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</p><blockquote><p>timeout 300</p></blockquote><p>6、指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，默认为verbose</p><blockquote><p>loglevel verbose</p></blockquote><p>7、日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志记录方式为标准输出，则日志将会发给/dev/null</p><blockquote><p>logfile stdout</p></blockquote><p>8、设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</p><blockquote><p>databases 16</p></blockquote><p>9、指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</p><blockquote><p>save </p><p>Redis默认配置文件中提供了三个条件：</p><p>save 900 1</p><p>save 300 10</p><p>save 60 10000</p><p>分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</p></blockquote><p>10、指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，可以关闭该选项，但会导致数据库文件变的巨大。</p><blockquote><p>rdbcompression yes</p></blockquote><p>11、指定本地数据库文件名，默认值为dump.rdb</p><blockquote><p>dbfilename dump.rdb</p></blockquote><p>12、指定本地数据库存放目录</p><blockquote><p>dir ./</p></blockquote><p>13、设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</p><blockquote><p>slaveof</p></blockquote><p>14、当master服务设置了密码保护时，slav服务连接master的密码</p><blockquote><p>masterauth</p></blockquote><p>15、设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH 命令提供密码，默认关闭。</p><p>requirepass foobared</p><p>16、设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p><blockquote><p>maxclients 128</p></blockquote><p>17、指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，Value会存放在swap区</p><blockquote><p>maxmemory</p></blockquote><p>18、指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no。</p><blockquote><p>appendonly no</p></blockquote><p>19、指定更新日志文件名，默认为appendonly.aof</p><blockquote><p>appendfilename appendonly.aof</p></blockquote><p>20、指定更新日志条件，共有3个可选值：</p><blockquote><p>no：表示等操作系统进行数据缓存同步到磁盘（快）</p><p>always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</p><p>everysec：表示每秒同步一次（折衷，默认值）</p><p>appendfsync everysec</p></blockquote><p>21、指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</p><blockquote><p>vm-enabled no</p></blockquote><p>22、虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享vm-swap-file /tmp/redis.swap23、将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</p><blockquote><p>vm-max-memory 0</p></blockquote><p>24、Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</p><blockquote><p>vm-page-size 32</p></blockquote><p>25、设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</p><blockquote><p>vm-pages 134217728</p></blockquote><p>26、设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，可能会造成比较长时间的延迟。默认值为4</p><blockquote><p>vm-max-threads 4</p></blockquote><p>27、设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</p><blockquote><p>glueoutputbuf yes</p></blockquote><p>28、指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</p><blockquote><p>hash-max-zipmap-entries 64</p><p>hash-max-zipmap-value 512</p></blockquote><p>29、指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</p><blockquote><p>activerehashing yes</p></blockquote><p>30、指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</p><blockquote><p>include /path/to/local.conf</p></blockquote><h2 id="Redis的持久化"><a href="#Redis的持久化" class="headerlink" title="Redis的持久化"></a>Redis的持久化</h2><p>Redis 是内存数据库，如果不将内存中的数据库状态保存到磁盘，那么一旦服务器进程退出，服务器中的数据库状态也会消失。所以 Redis 提供了持久化功能。</p><h3 id="RDB（Redis-DataBase）"><a href="#RDB（Redis-DataBase）" class="headerlink" title="RDB（Redis DataBase）"></a>RDB（Redis DataBase）</h3><h4 id="什么是RDB"><a href="#什么是RDB" class="headerlink" title="什么是RDB"></a>什么是RDB</h4><p>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的。这就确保了极高的性能。如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p><h4 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h4><p>Fork的作用是复制一个与当前进程一样的进程。新进程的所有数据（变量，环境变量，程序计数器等）数值都和原进程一致，但是是一个全新的进程，并作为原进程的子进程。</p><p><strong>Rdb 保存的是 dump.rdb 文件</strong></p><p>位置是<code>usr/local/bin</code></p><h4 id="配置位置及SNAPSHOTTING解析"><a href="#配置位置及SNAPSHOTTING解析" class="headerlink" title="配置位置及SNAPSHOTTING解析"></a>配置位置及SNAPSHOTTING解析</h4><p>这里的触发条件机制，我们可以修改测试一下：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">save</span> <span class="hljs-string">120 10  # 120秒内修改10次则触发RDB</span><br></code></pre></div></td></tr></table></figure><p>RDB 是整合内存的压缩过的Snapshot，RDB 的数据结构，可以配置复合的快照触发条件。</p><p>默认：</p><p>1分钟内改了1万次</p><p>5分钟内改了10次</p><p>15分钟内改了1次</p><p>如果想禁用RDB持久化的策略，只要不设置任何save指令，或者给save传入一个空字符串参数也可以。</p><p>若要修改完毕需要立马生效，可以手动使用 save 命令！立马生效 !</p><h4 id="如何触发RDB快照"><a href="#如何触发RDB快照" class="headerlink" title="如何触发RDB快照"></a>如何触发RDB快照</h4><p>1、配置文件中默认的快照配置，建议多用一台机子作为备份，复制一份 dump.rdb</p><p>2、命令save或者是bgsave</p><ul><li>save 时只管保存，其他不管，全部阻塞</li><li>bgsave，Redis 会在后台异步进行快照操作，快照同时还可以响应客户端请求。可以通过lastsave命令获取最后一次成功执行快照的时间。</li></ul><p>3、执行flushall命令，也会产生 dump.rdb 文件，但里面是空的，无意义 !</p><p>4、退出的时候也会产生 dump.rdb 文件！</p><h4 id="如何恢复"><a href="#如何恢复" class="headerlink" title="如何恢复"></a>如何恢复</h4><p>1、将备份文件（dump.rdb）移动到redis安装目录并启动服务即可</p><p>2、CONFIG GET dir 获取目录</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">127.0.0.1:6379&gt; config get dir<br>dir<br>/usr/local/bin<br></code></pre></div></td></tr></table></figure><h4 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>1、适合大规模的数据恢复</p><p>2、对数据完整性和一致性要求不高</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>1、在一定间隔时间做一次备份，所以如果redis意外down掉的话，就会丢失最后一次快照后的所有修改</p><p>2、Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210926215846039.png" alt="RDB小结"></p><h3 id="AOF（Append-Only-File）"><a href="#AOF（Append-Only-File）" class="headerlink" title="AOF（Append Only File）"></a>AOF（Append Only File）</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>以<strong>日志的形式</strong>来记录每个写操作，将Redis执行过的所有<strong>指令记录</strong>下来（读操作不记录），<strong>只许追加文件</strong>但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</p><p>==Aof保存的是 appendonly.aof 文件==</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-string">appendonly</span> <span class="hljs-literal">no</span>   <span class="hljs-comment"># 是否以append only模式作为持久化方式，默认使用的是rdb方式持久化，这种方式在许多应用中已经足够用了</span><br><span class="hljs-string">appendfilename</span> <span class="hljs-string">&quot;appendonly.aof&quot;</span>   <span class="hljs-comment"># appendfilename AOF 文件名称</span><br><span class="hljs-string">appendfsync</span> <span class="hljs-string">everysec</span>  <span class="hljs-comment"># appendfsync aof持久化策略的配置</span><br>    <span class="hljs-comment"># no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。</span><br>    <span class="hljs-comment"># always表示每次写入都执行fsync，以保证数据同步到磁盘。</span><br>    <span class="hljs-comment"># everysec表示每秒执行一次fsync，可能会导致丢失这1s数据。</span><br><span class="hljs-literal">No</span><span class="hljs-string">-appendfsync-on-rewrite</span> <span class="hljs-comment">#重写时是否可以运用Appendfsync，用默认no即可，保证数据安全性</span><br><span class="hljs-string">Auto-aof-rewrite-min-size</span> <span class="hljs-comment"># 设置重写的基准值</span><br><span class="hljs-string">Auto-aof-rewrite-percentage</span> <span class="hljs-comment">#设置重写的基准值</span><br></code></pre></div></td></tr></table></figure><h4 id="AOF-启动-修复-恢复"><a href="#AOF-启动-修复-恢复" class="headerlink" title="AOF 启动/修复/恢复"></a>AOF 启动/修复/恢复</h4><p><strong>正常恢复：</strong></p><ul><li><p>启动：设置Yes，修改默认的appendonly no，改为yes</p></li><li><p>将有数据的aof文件复制一份保存到对应目录（config get dir）</p></li><li><p>恢复：重启redis然后重新加载</p></li><li><p><strong>异常恢复：</strong><br>启动：设置Yes</p></li><li><p>故意破坏 appendonly.aof 文件！</p></li><li><p>修复：<code>redis-check-aof --fix appendonly.aof</code>进行修复</p></li><li><p>恢复：重启 redis 然后重新加载</p></li></ul><h4 id="Rewrite"><a href="#Rewrite" class="headerlink" title="Rewrite"></a>Rewrite</h4><p>AOF 采用文件追加方式，文件会越来越大，为避免出现此种情况，新增了重写机制，当AOF文件的大小超过所设定的阈值时，Redis 就会启动AOF 文件的内容压缩，只保留可以恢复数据的最小指令集，可以使用命令 bgrewriteaof ！</p><h5 id="重写原理"><a href="#重写原理" class="headerlink" title="重写原理"></a>重写原理</h5><p>AOF 文件持续增长而过大时，会fork出一条新进程来将文件重写（也是先写临时文件最后再rename），遍历新进程的内存中数据，每条记录有一条的Set语句。重写aof文件的操作，并没有读取旧的aof文件，这点和快照有点类似！</p><h5 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h5><p>Redis会记录上次重写时的AOF大小，默认配置是当AOF文件大小是上次rewrite后大小的已被且文件大于64M的触发。</p><h4 id="优点和缺点-1"><a href="#优点和缺点-1" class="headerlink" title="优点和缺点"></a>优点和缺点</h4><p><strong>优点：</strong></p><p>1、每修改同步：appendfsync always 同步持久化，每次发生数据变更会被立即记录到磁盘，性能较差但数据完整性比较好</p><p>2、每秒同步： appendfsync everysec 异步操作，每秒记录 ，如果一秒内宕机，有数据丢失</p><p>3、不同步： appendfsync no  从不同步</p><p><strong>缺点：</strong></p><p>1、相同数据集的数据而言，aof 文件要远大于 rdb文件，恢复速度慢于 rdb。</p><p>2、Aof 运行效率要慢于 rdb，每秒同步策略效率较好，不同步效率和rdb相同。</p><h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210926220520298.png" alt="AOF小总结"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储</p><p>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。</p><p>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化</p><p>4、同时开启两种持久化方式</p><p>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。</p><p>RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。</p><p>5、性能建议</p><p>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。</p><p>如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite 的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重<br>写可以改到适当的数值。</p><p>如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master/Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master/Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</p></blockquote><h2 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h2><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><h1 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h1><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>在SpringBoot中一般使用RedisTemplate提供的方法来操作Redis。那么使用SpringBoot整合Redis需要那些步骤呢。</p><p>1、JedisPoolConfig  (这个是配置连接池)</p><p>2、RedisConnectionFactory 这个是配置连接信息，这里的RedisConnectionFactory是一个接口，我们需要使用它的实现类，在SpringD Data Redis方案中提供了以下四种工厂模型：</p><ul><li>JredisConnectionFactory</li><li>JedisConnectionFactory</li><li>LettuceConnectionFactory</li><li>SrpConnectionFactory</li></ul><p>3、RedisTemplate 基本操作</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a>yaml配置</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>    <span class="hljs-attr">redis:</span><br>      <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>      <span class="hljs-attr">jedis:</span><br>        <span class="hljs-attr">pool:</span><br>          <span class="hljs-attr">max-active:</span> <span class="hljs-number">8</span><br>          <span class="hljs-attr">max-wait:</span> <span class="hljs-string">-1ms</span><br>          <span class="hljs-attr">max-idle:</span> <span class="hljs-number">500</span><br>          <span class="hljs-attr">min-idle:</span> <span class="hljs-number">0</span><br>      <span class="hljs-attr">lettuce:</span><br>        <span class="hljs-attr">shutdown-timeout:</span> <span class="hljs-string">0ms</span><br></code></pre></div></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SpringbootRedisApplicationTests</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String,String&gt; redisTemplate;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;myKey&quot;</span>,<span class="hljs-string">&quot;myValue&quot;</span>);<br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;myKey&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="封装工具类"><a href="#封装工具类" class="headerlink" title="封装工具类"></a>封装工具类</h2><p><strong>1、新建一个SpringBoot项目</strong></p><p><strong>2、导入redis的启动器</strong></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><strong>3、配置redis，可以查看 RedisProperties 分析</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># Redis服务器地址</span><br><span class="hljs-string">spring.redis.host=127.0.0.1</span><br><span class="hljs-comment"># Redis服务器连接端口</span><br><span class="hljs-string">spring.redis.port=6379</span><br></code></pre></div></td></tr></table></figure><p><strong>4、分析 RedisAutoConfiguration 自动配置类</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = false)</span><br><span class="hljs-meta">@ConditionalOnClass(RedisOperations.class)</span><br><span class="hljs-meta">@EnableConfigurationProperties(RedisProperties.class)</span><br><span class="hljs-meta">@Import(&#123; LettuceConnectionConfiguration.class, </span><br><span class="hljs-meta">JedisConnectionConfiguration.class &#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisAutoConfiguration</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> RedisTemplate&lt;Object, Object&gt; <br>redisTemplate(RedisConnectionFactory redisConnectionFactory)<br>            <span class="hljs-keyword">throws</span> UnknownHostException &#123;<br>        RedisTemplate&lt;Object, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;&gt;();<br>        template.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@ConditionalOnMissingBean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> StringRedisTemplate <span class="hljs-title">stringRedisTemplate</span><span class="hljs-params">(RedisConnectionFactory </span></span><br><span class="hljs-function"><span class="hljs-params">redisConnectionFactory)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> UnknownHostException </span>&#123;<br>        StringRedisTemplate template = <span class="hljs-keyword">new</span> StringRedisTemplate();<br>        template.setConnectionFactory(redisConnectionFactory);<br>        <span class="hljs-keyword">return</span> template;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过源码可以看出，SpringBoot自动帮我们在容器中生成了一个RedisTemplate和一个StringRedisTemplate。</p><p>但是，这个RedisTemplate的泛型是&lt;Object,Object&gt;，写代码不方便，需要写好多类型转换的代码；我们需要一个泛型为&lt;String,Object&gt;形式的RedisTemplate。</p><p>并且，这个RedisTemplate没有设置数据存在Redis时，key及value的序列化方式。</p><p>看到这个@ConditionalOnMissingBean注解后，就知道如果Spring容器中有了RedisTemplate对象了，这个自动配置的RedisTemplate不会实例化。因此我们可以直接自己写个配置类，配置RedisTemplate。</p><p><strong>5、既然自动配置不好用，就重新配置一个RedisTemplate</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ajie.config;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> <br>org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;<br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisConfig</span> </span>&#123;<br>  <span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="hljs-title">redisTemplate</span><span class="hljs-params">(RedisConnectionFactory factory)</span> </span>&#123;<br>      RedisTemplate&lt;String, Object&gt; template = <span class="hljs-keyword">new</span> RedisTemplate&lt;String, Object&gt;();<br>      template.setConnectionFactory(factory);<br>      Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="hljs-keyword">new</span> Jackson2JsonRedisSerializer(Object.class);<br>      ObjectMapper om = <span class="hljs-keyword">new</span> ObjectMapper();<br>      om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);<br>      om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<br>      jackson2JsonRedisSerializer.setObjectMapper(om);<br>      StringRedisSerializer stringRedisSerializer = <span class="hljs-keyword">new</span> StringRedisSerializer();<br>      <br>      <span class="hljs-comment">// key采用String的序列化方式</span><br>      template.setKeySerializer(stringRedisSerializer);<br>      <span class="hljs-comment">// hash的key也采用String的序列化方式</span><br>      template.setHashKeySerializer(stringRedisSerializer);<br>      <span class="hljs-comment">// value序列化方式采用jackson</span><br>      template.setValueSerializer(jackson2JsonRedisSerializer);<br>      <span class="hljs-comment">// hash的value序列化方式采用jackson</span><br>      template.setHashValueSerializer(jackson2JsonRedisSerializer);<br>      template.afterPropertiesSet();<br>      <br>      <span class="hljs-keyword">return</span> template;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>6、写一个Redis工具类（直接用RedisTemplate操作Redis，需要很多行代码，因此直接封装好一个RedisUtils，这样写代码更方便点。这个RedisUtils交给Spring容器实例化，使用时直接注解注入。）</strong></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ajie.utils;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.RedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> java.util.concurrent.TimeUnit;<br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisUtil</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;<br>    <br>    <span class="hljs-comment">// =============================common============================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 指定缓存失效时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">expire</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.expire(key, time, TimeUnit.SECONDS);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key 获取过期时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 时间(秒) 返回0代表为永久有效</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getExpire</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断key是否存在</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasKey</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.hasKey(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 可以传一个值 或多个</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">(String... key)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (key != <span class="hljs-keyword">null</span> &amp;&amp; key.length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (key.length == <span class="hljs-number">1</span>) &#123;<br>                redisTemplate.delete(key[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                redisTemplate.delete(CollectionUtils.arrayToList(key));<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// ============================String=============================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">get</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> key == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : redisTemplate.opsForValue().get(key);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForValue().set(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 普通缓存放入并设置时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false 失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">set</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                redisTemplate.opsForValue().set(key, value, time, <br>TimeUnit.SECONDS);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                set(key, value);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递增</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要增加几(大于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">incr</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;递增因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, delta);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 递减</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> delta 要减少几(小于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">decr</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> delta)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (delta &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;递减因子必须大于0&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);<br>    &#125;<br>    <span class="hljs-comment">// ================================Map=================================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashGet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">hget</span><span class="hljs-params">(String key, String item)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().get(key, item);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取hashKey对应的所有键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 对应的多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;Object, Object&gt; <span class="hljs-title">hmget</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().entries(key);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map 对应多个键值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * HashSet 并设置时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> map  对应多个键值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time 时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hmset</span><span class="hljs-params">(String key, Map&lt;String, Object&gt; map, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().putAll(key, map);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hset</span><span class="hljs-params">(String key, String item, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 向一张hash表中放入数据,如果不存在将创建</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item  项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 成功 false失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hset</span><span class="hljs-params">(String key, String item, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForHash().put(key, item, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>) &#123;<br>                expire(key, time);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除hash表中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 可以使多个 不能为null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hdel</span><span class="hljs-params">(String key, Object... item)</span> </span>&#123;<br>        redisTemplate.opsForHash().delete(key, item);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断hash表中是否有该项的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项 不能为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hHasKey</span><span class="hljs-params">(String key, String item)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要增加几(大于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">hincr</span><span class="hljs-params">(String key, String item, <span class="hljs-keyword">double</span> by)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hash递减</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key  键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> item 项</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> by   要减少记(小于0)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">hdecr</span><span class="hljs-params">(String key, String item, <span class="hljs-keyword">double</span> by)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);<br>    &#125;<br>    <span class="hljs-comment">// ============================set=============================</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据key获取Set中的所有值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Set&lt;Object&gt; <span class="hljs-title">sGet</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().members(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据value从一个set中查询,是否存在</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true 存在 false不存在</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">sHasKey</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().isMember(key, value);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将数据放入set缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sSet</span><span class="hljs-params">(String key, Object... values)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().add(key, values);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将set数据放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time   时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 成功个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sSetAndTime</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> time, Object... values)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Long count = redisTemplate.opsForSet().add(key, values);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取set缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">sGetSetSize</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForSet().size(key);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除值为value的</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key    键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> values 值 可以是多个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">setRemove</span><span class="hljs-params">(String key, Object... values)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Long count = redisTemplate.opsForSet().remove(key, values);<br>            <span class="hljs-keyword">return</span> count;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// ===============================list=================================</span><br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的内容</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> start 开始</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> end   结束 0 到 -1代表所有值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Object&gt; <span class="hljs-title">lGet</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> start, <span class="hljs-keyword">long</span> end)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().range(key, start, end);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取list缓存的长度</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key 键</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">lGetListSize</span><span class="hljs-params">(String key)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().size(key);<br>            &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过索引 获取list中的值</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0</span><br><span class="hljs-comment">时，-1，表尾，-2倒数第二个元素，依次类推</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">lGetIndex</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> redisTemplate.opsForList().index(key, index);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, Object value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPush(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将list放入缓存</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> time  时间(秒)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lSet</span><span class="hljs-params">(String key, List&lt;Object&gt; value, <span class="hljs-keyword">long</span> time)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().rightPushAll(key, value);<br>            <span class="hljs-keyword">if</span> (time &gt; <span class="hljs-number">0</span>)<br>                expire(key, time);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据索引修改list中的某条数据</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">lUpdateIndex</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> index, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            redisTemplate.opsForList().set(key, index, value);<br>            ren <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 移除N个值为value</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key   键</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> count 移除多少个</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 移除的个数</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">lRemove</span><span class="hljs-params">(String key, <span class="hljs-keyword">long</span> count, Object value)</span> </span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Long remove = redisTemplate.opsForList().remove(key, count, <br>value);<br>            <span class="hljs-keyword">return</span> remove;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="高频知识点"><a href="#高频知识点" class="headerlink" title="高频知识点"></a>高频知识点</h1><h2 id="5大Value类型"><a href="#5大Value类型" class="headerlink" title="5大Value类型"></a>5大Value类型</h2><h2 id="主要应用方向是缓存"><a href="#主要应用方向是缓存" class="headerlink" title="主要应用方向是缓存"></a>主要应用方向是缓存</h2><h2 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h2><p>session服务无状态</p><p>延伸思考： </p><p>​    看你的项目的数据结构或对象</p><p>​    再单机里需要单机锁，多机里需要分布式锁，抽出来放到redis中</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「图」是个什么东西</title>
    <link href="/posts/19363/"/>
    <url>/posts/19363/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/19186477904926453.png" alt="数据结构中关于图的知识"></p><p>数据结构中关于图的知识。</p><span id="more"></span><h1 id="图的基本知识"><a href="#图的基本知识" class="headerlink" title="图的基本知识"></a>图的基本知识</h1><h2 id="图的类型"><a href="#图的类型" class="headerlink" title="图的类型"></a>图的类型</h2><p>三个类型：</p><ol><li>无向图</li><li>有向图</li><li>加权图</li></ol><h3 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h3><p>无向图中任意两个顶点之间的边都是没有方向的。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210904101924201.png" alt="无向图"></p><h3 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h3><p>有向图中任意两个顶点之间的边都是有方向的。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210904101418.png" alt="有向图"></p><h3 id="加权图"><a href="#加权图" class="headerlink" title="加权图"></a>加权图</h3><p>加权图中的每条边都带有一个相关的权重。这里的权重可以是任何一种度量。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210904102021055.png" alt="加权图"></p><h2 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h2><p>图是由顶点和边组成的一种非线形数据结构。</p><h2 id="图的相关术语"><a href="#图的相关术语" class="headerlink" title="图的相关术语"></a>图的相关术语</h2><ul><li>顶点：边的交点均称为「图」的顶点。</li><li>边：顶点之间的连接线称为边。</li><li>路径：从一个顶点到另一个顶点之间经过的所有顶点的集合。<br><strong>注意：</strong>两个顶点之间的路径可以是很多条。</li><li>路径长度：一条路径上经过的边的数量。</li><li>环：起点和终点为同一个顶点的路径。</li><li>负权环：在 加权图 中，如果一个环的所有边的权重加起来为负数，我们就称之为 负权环 。</li><li>连通性：两个不同顶点之间存在至少一条路径，则称这两个顶点是连通的。</li><li>顶点的度： 度 <strong>适用于无向图</strong>，指的是和该顶点相连接的所有边数称为顶点的度。</li><li>顶点的入度： 入度 <strong>适用于有向图</strong>，一个顶点的入度为n，则表示有n条与顶点相连的边指向该顶点。</li><li>顶点的出度： 出度 <strong>适用于有向图</strong>，它与「入度」相反。一个顶点的出度为n，则表示有n条与顶点相连的边以该顶点为起点。</li></ul><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><h2 id="并查集的作用"><a href="#并查集的作用" class="headerlink" title="并查集的作用"></a>并查集的作用</h2><p>「并查集」的主要作用是用来解决网络中的<strong>连通性</strong>。</p><h2 id="并查集的常用术语"><a href="#并查集的常用术语" class="headerlink" title="并查集的常用术语"></a>并查集的常用术语</h2><ul><li>父节点：顶点的直接父亲节点。</li><li>根节点：没有父节点的节点，本身可以视为自己的父节点。</li></ul><h2 id="并查集的基本思想"><a href="#并查集的基本思想" class="headerlink" title="并查集的基本思想"></a>并查集的基本思想</h2><h2 id="并查集的编程思想"><a href="#并查集的编程思想" class="headerlink" title="并查集的编程思想"></a>并查集的编程思想</h2><h2 id="并查集的两个重要函数"><a href="#并查集的两个重要函数" class="headerlink" title="并查集的两个重要函数"></a>并查集的两个重要函数</h2><p>Quick Find 实现方式：找到给定顶点的根结点。</p><p>Quick Union 实现方式：合并两个顶点，并将他们的根结点保持一致。。</p><h2 id="「并查集」的两个实现方式"><a href="#「并查集」的两个实现方式" class="headerlink" title="「并查集」的两个实现方式"></a>「并查集」的两个实现方式</h2><p>Quick Find 实现方式：它指的是实现「并查集」时，find 函数时间复杂度很低为<code> O(1)</code>，但对应的 union 函数就需要承担更多的责任，它的时间复杂度为<code> O(N)</code>。</p><p>Quick Union 实现方式：它指的是实现「并查集」时，相对于 Quick Find 的实现方式，我们通过降低 union 函数的职责来提高它的效率，但同时，我们也增加了 find 函数的职责。</p><h3 id="Quick-Find-的「并查集」"><a href="#Quick-Find-的「并查集」" class="headerlink" title="Quick Find 的「并查集」"></a>Quick Find 的「并查集」</h3><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// UnionFind.class</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnionFind</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> root[];<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UnionFind</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span> </span>&#123;<br>        root = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>            root[i] = i;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> root[x];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">union</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> rootX = find(x);<br>        <span class="hljs-keyword">int</span> rootY = find(y);<br>        <span class="hljs-keyword">if</span> (rootX != rootY) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; root.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (root[i] == rootY) &#123;<br>                    root[i] = rootX;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">connected</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> find(x) == find(y);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// App.java</span><br><span class="hljs-comment">// 测试样例</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        UnionFind uf = <span class="hljs-keyword">new</span> UnionFind(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">// 1-2-5-6-7 3-8-9 4</span><br>        uf.union(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>        uf.union(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>        uf.union(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>);<br>        uf.union(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>);<br>        uf.union(<span class="hljs-number">3</span>, <span class="hljs-number">8</span>);<br>        uf.union(<span class="hljs-number">8</span>, <span class="hljs-number">9</span>);<br>        System.out.println(uf.connected(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(uf.connected(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>)); <span class="hljs-comment">// true</span><br>        System.out.println(uf.connected(<span class="hljs-number">4</span>, <span class="hljs-number">9</span>)); <span class="hljs-comment">// false</span><br>        <span class="hljs-comment">// 1-2-5-6-7 3-8-9-4</span><br>        uf.union(<span class="hljs-number">9</span>, <span class="hljs-number">4</span>);<br>        System.out.println(uf.connected(<span class="hljs-number">4</span>, <span class="hljs-number">9</span>)); <span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p>作者：爱学习的饲养员</p><p>链接：<a href="https://leetcode-cn.com/leetbook/read/graph/r340gv/">https://leetcode-cn.com/leetbook/read/graph/r340gv/</a></p><p>来源：力扣（LeetCode）</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringSecurity总结</title>
    <link href="/posts/42947/"/>
    <url>/posts/42947/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/1018164.jpg" alt="冰山"></p><p>Spring Security是一个功能强大且高度可定制的<strong>身份验证</strong>和<strong>访问控制</strong>框架。它保护基于spring的应用程序的标准。</p><span id="more"></span><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Spring Security是一个功能强大且高度可定制的<strong>身份验证</strong>和<strong>访问控制</strong>框架。它保护基于spring的应用程序的标准。  </p><p>Spring Security的核心是<strong>用户认证（Authentication）</strong>和<strong>用户授权（Authorization）</strong>。</p><h2 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h2><p>用户认证指的是验证某个用户是否为系统中的合法主体，通俗点说就是系统认为用户是否能登录。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。</p><p>在用户认证方面，SpringSecurity 框架支持主流的认证方式，包括 HTTP 基本认证、HTTP 表单验证、HTTP 摘要认证、OpenID<br>和 LDAP 等。</p><h2 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h2><p>用户授权指的是验证某个用户是否有权限执行某个操作，通俗点讲就是系统判断用户是否有权限去做某些事情。。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。  </p><p>在用户授权方面，Spring Security 提供了基于角色的<strong>访问控制</strong>和<strong>访问控制列表</strong>（Access Control List，ACL），可以对应用中的领域对象进行细粒度的控制。  </p><h2 id="与Shiro的对比"><a href="#与Shiro的对比" class="headerlink" title="与Shiro的对比"></a>与Shiro的对比</h2><h3 id="Spring-Security-特点："><a href="#Spring-Security-特点：" class="headerlink" title="Spring Security 特点："></a>Spring Security 特点：</h3><ul><li>与 Spring 无缝整合。 </li><li>全面的权限控制。 </li><li>专门为 Web 开发而设计。 <ul><li>旧版本不能脱离 Web 环境使用。 </li><li>新版本对整个框架进行了分层抽取，分成了核心模块和 Web 模块。单独引入核心模块就可以脱离 Web 环境。 </li></ul></li><li>重量级。</li></ul><h3 id="Shiro特点："><a href="#Shiro特点：" class="headerlink" title="Shiro特点："></a>Shiro特点：</h3><ul><li>轻量级。Shiro 主张的理念是把复杂的事情变简单。针对对性能有更高要求的互联网应用有更好表现。 </li><li>通用性。 <ul><li>好处：不局限于 Web 环境，可以脱离 Web 环境使用。 </li><li>缺陷：在 Web 环境下一些特定的需求需要手动编写代码定制。</li></ul></li></ul><p>一般来说，常见的安全管理技术栈的组合是这样的： </p><ul><li>SSM + Shiro </li><li>Spring Boot/Spring Cloud + Spring Security</li></ul><h2 id="权限管理中的相关概念"><a href="#权限管理中的相关概念" class="headerlink" title="权限管理中的相关概念"></a>权限管理中的相关概念</h2><h3 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h3><p>英文单词：principal </p><p>使用系统的用户或设备或从其他系统远程登录的用户等等。简单说就是谁使用系统谁就是主体。 </p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><p>英文单词：authentication </p><p>权限管理系统确认一个主体的身份，允许主体进入系统。简单说就是“主体”证明自己是谁。 </p><p>笼统的认为就是以前所做的登录操作。 </p><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>英文单词：authorization </p><p>将操作系统的“权力”“授予”“主体”，这样主体就具备了操作系统中特定功能的能力。</p><p>所以简单来说，授权就是给用户分配权限。</p><h1 id="SpringSecurity-基本原理"><a href="#SpringSecurity-基本原理" class="headerlink" title="SpringSecurity 基本原理"></a>SpringSecurity 基本原理</h1><p><strong>SpringSecurity 本质是一个过滤器链。</strong></p><p>涉及的14条过滤器：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter</span> <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.context.SecurityContextPersistenceFilter</span>  <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.header.HeaderWriterFilter</span> <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.csrf.CsrfFilter</span> <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.authentication.logout.LogoutFilter</span>  <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span>  <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter</span>  <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter</span> <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.savedrequest.RequestCacheAwareFilter</span> <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter</span> <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.authentication.AnonymousAuthenticationFilter</span>  <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.session.SessionManagementFilter</span>  <span class="hljs-string"></span><br><span class="hljs-meta">org.springframework.security.web.access.ExceptionTranslationFilter</span>  <span class="hljs-string"></span><br><span class="hljs-attr">org.springframework.security.web.access.intercept.FilterSecurityInterceptor</span><br></code></pre></div></td></tr></table></figure><h2 id="重要的3条过滤器："><a href="#重要的3条过滤器：" class="headerlink" title="重要的3条过滤器："></a>重要的3条过滤器：</h2><ul><li>FilterSecurityInterceptor</li><li>ExceptionTranslationFilter</li><li>UsernamePasswordAuthenticationFilter</li></ul><h3 id="FilterSecurityInterceptor过滤器"><a href="#FilterSecurityInterceptor过滤器" class="headerlink" title="FilterSecurityInterceptor过滤器"></a>FilterSecurityInterceptor过滤器</h3><p>方法级的权限过滤器, 基本位于过滤链的<strong>最底部</strong>。</p><h3 id="ExceptionTranslationFilter过滤器"><a href="#ExceptionTranslationFilter过滤器" class="headerlink" title="ExceptionTranslationFilter过滤器"></a>ExceptionTranslationFilter过滤器</h3><p>异常过滤器，用来处理在认证授权过程中抛出的异常</p><h3 id="UsernamePasswordAuthenticationFilter过滤器"><a href="#UsernamePasswordAuthenticationFilter过滤器" class="headerlink" title="UsernamePasswordAuthenticationFilter过滤器"></a>UsernamePasswordAuthenticationFilter过滤器</h3><p>对/login 的 POST 请求做拦截，校验表单中用户名，密码。</p><h2 id="主要类"><a href="#主要类" class="headerlink" title="主要类"></a>主要类</h2><blockquote><p>·WebSecurityConfigurerAdapter： 自定义Security策略</p><p>·AuthenticationManagerBuilder：自定义认证策略</p><p>·@EnableWebSecurity：开启WebSecurity模式  </p></blockquote><p>Spring Security的两个主要目标是 “认证” 和 “授权”（访问控制）。  </p><h2 id="“认证”（Authentication）"><a href="#“认证”（Authentication）" class="headerlink" title="“认证”（Authentication）"></a>“认证”（Authentication）</h2><ul><li>身份验证是关于验证您的凭据，如用户名/用户ID和密码，以验证您的身份。</li><li>身份验证通常通过用户名和密码完成，有时与身份验证因素结合使用。</li></ul><h2 id="“授权”-（Authorization）"><a href="#“授权”-（Authorization）" class="headerlink" title="“授权” （Authorization）"></a>“授权” （Authorization）</h2><ul><li>授权发生在系统成功验证您的身份后，最终会授予您访问资源（如信息，文件，数据库，资金，位置，<br>几乎任何内容）的完全权限。</li><li>这个概念是通用的，而不是只在Spring Security 中存在。  </li></ul><h2 id="学习和API文档"><a href="#学习和API文档" class="headerlink" title="学习和API文档"></a>学习和API文档</h2><p><a href="https://spring.io/projects/spring-security#learn">Spring Security官方文档</a></p><h1 id="认证和授权"><a href="#认证和授权" class="headerlink" title="认证和授权"></a>认证和授权</h1><h2 id="引入-Spring-Security-模块"><a href="#引入-Spring-Security-模块" class="headerlink" title="引入 Spring Security 模块"></a>引入 <code>Spring Security</code> 模块</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>SpringSecurity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF攻击是啥</title>
    <link href="/posts/38350/"/>
    <url>/posts/38350/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/1010051.jpg" alt="日暮见雪山"></p><p>CSRF是<strong>跨站点请求伪造</strong>(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性。</p><span id="more"></span><h1 id="什么是CSRF攻击"><a href="#什么是CSRF攻击" class="headerlink" title="什么是CSRF攻击"></a>什么是CSRF攻击</h1><p>CSRF是<strong>跨站点请求伪造</strong>(Cross—Site Request Forgery)，跟XSS攻击一样，存在巨大的危害性。</p><blockquote><p>攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。</p><p>由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：<strong>简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的</strong>。</p></blockquote><p><strong>欺骗用户浏览器，让其以用户的名义运行操作</strong>。</p><h1 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h1><h2 id="检查Referer字段"><a href="#检查Referer字段" class="headerlink" title="检查Referer字段"></a>检查Referer字段</h2><p>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。</p><p><strong>优势：</strong></p><p>简单易行，工作量低，仅需要在关键访问处增加一步校验</p><p><strong>隐患：</strong></p><p>因其完全依赖浏览器发送正确的Referer字段。虽然http协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其Referer字段的可能。</p><h2 id="添加校验token"><a href="#添加校验token" class="headerlink" title="添加校验token"></a>添加校验token</h2><p>由于CSRF的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在cookie中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再运行CSRF攻击。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单链表是否有环及环的链接点</title>
    <link href="/posts/11252/"/>
    <url>/posts/11252/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/th.jpg" alt="th.jpg"></p><p>面试遇到的问题，让我蒙对了，赶紧整理下来。</p><span id="more"></span><h1 id="1、如何判断是否存在环？"><a href="#1、如何判断是否存在环？" class="headerlink" title="1、如何判断是否存在环？"></a>1、如何判断是否存在环？</h1><p>使用追赶的方法，设定两个指针slow、fast，从头指针开始，每次分别前进1步、2步。如存在环，则两者相遇；如不存在环，fast遇到NULL退出。</p><h1 id="2、如何知道环的长度？"><a href="#2、如何知道环的长度？" class="headerlink" title="2、如何知道环的长度？"></a>2、如何知道环的长度？</h1><p>记录下指针slow和fast的碰撞点p，slow、fast从该点开始，再次碰撞所走过的操作数就是环的长度s。</p><h1 id="3、如何找出环的连接点在哪里？"><a href="#3、如何找出环的连接点在哪里？" class="headerlink" title="3、如何找出环的连接点在哪里？"></a>3、如何找出环的连接点在哪里？</h1><p>定理：==碰撞点p到连接点的距离=头指针到连接点的距离==，因此，分别从碰撞点、头指针开始走，相遇的那个点就是连接点。</p><h1 id="4、带环链表的长度是多少？"><a href="#4、带环链表的长度是多少？" class="headerlink" title="4、带环链表的长度是多少？"></a>4、带环链表的长度是多少？</h1><p>求出连接点距离头指针的长度，加上求出的环的长度，二者之和就是带环单链表的长度。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring和SpringBoot容器注入</title>
    <link href="/posts/42227/"/>
    <url>/posts/42227/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/450956a57b0515be7bbabc816bc79dc3.jpg" alt="450956a57b0515be7bbabc816bc79dc3.jpg"></p><span id="more"></span><h1 id="Spring注入"><a href="#Spring注入" class="headerlink" title="Spring注入"></a>Spring注入</h1><h2 id="Spring容器存储bean"><a href="#Spring容器存储bean" class="headerlink" title="Spring容器存储bean"></a>Spring容器存储bean</h2><p>底层：每一个bean对应了一个BeanDefinition对象，每个bean注册到Map中。</p><p>==使用BeanDefintionMap来存储的所有的bean。即springioc就是一个map而已。==</p><p>springioc：负责 对象的<strong>初始化</strong>，对象<strong>管理</strong>，对应的<strong>依赖注入</strong>，对象<strong>声明周期</strong>，对象的<strong>获取</strong>等，一句话：就==对象声明周期的管理==，一般情况下<strong>：jvm不会去回收这块空间，因为它强应用</strong>。==除非调用destory（）方法，才会进行垃圾回收。==</p><h2 id="SpringIoc"><a href="#SpringIoc" class="headerlink" title="SpringIoc"></a>SpringIoc</h2><blockquote><p>springIoc它是spring的最基石，它专门去负责对象的初始化，管理和装配以及获取等相关处理和工作。在对象注册过程中，可能存在类和类之间引用关系，这个关系可能会引发spring中对象的注入，也就依赖注入(DI)。：</p></blockquote><p><strong>依赖注入原则</strong></p><p>1、构造函数注入</p><p>2、set注入</p><p>3、**@Autowired&amp;@Resource注解注入**</p><p>4、<strong>FactoryBean注入（工厂注入）</strong></p><p><strong>什么是SpringIoc：</strong></p><blockquote><p>spring把java中传统的创建对象的过程用容器技术完成，使用容器进行对象装配，方便进行管理和处理。</p><p>好处：可以节约内存空间，方便测试，利于功能复用更重要的是使得程序的整个体系结构变得非常灵活。 </p></blockquote><p><strong>什么是DI：</strong></p><blockquote><p>DI—Dependency Injection，即“依赖注入”：它springioc的容器化技术，在创建对象的过程中，如果发现一个对象中存在另外一个对象的引用的时候，如果你遵循了spring的依赖注入的原则，就会容器中把存在的对象初始化引用对象。但是这种容器化初始化必须要遵循依赖注入原则。</p></blockquote><p><strong>依赖注入原则：</strong></p><p>1、构造函数注入</p><p>2、set注入</p><p>3、**@Autowired&amp;@Resource注解注入**</p><p>4、<strong>FactoryBean注入（工厂注入）</strong></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统一接口返回的标准格式-R</title>
    <link href="/posts/59584/"/>
    <url>/posts/59584/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/eac97a5aa0935e8d9e991ba03765124d.jpg" alt="这秋千真白"></p><p>统一接口返回的标准格式R的规范使用。</p><span id="more"></span><h1 id="统一接口返回的标准格式-R-java"><a href="#统一接口返回的标准格式-R-java" class="headerlink" title="统一接口返回的标准格式-R.java"></a>统一接口返回的标准格式-R.java</h1><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>在项目开发中，前后端分离的开发方式可能回需要多人团队的配合。虽然可以通过swagger来进行接口测试。但是任然避免不了以下问题：</p><ul><li>每个开发者在编写借口是没有规范，返回值就千变万化。</li><li>接口的调用者，会对借口产生错误理解或者不明确的现象。</li></ul><p>==对接口的开发进行规范化集中管理==</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="设置枚举类"><a href="#设置枚举类" class="headerlink" title="设置枚举类"></a>设置枚举类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: 统一返回的常量类</span><br><span class="hljs-comment"> * 对内修改开放，对外修改关闭---枚举</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: septzhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: 1339126726@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021/8/30 19:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">ResponseEnum</span> </span>&#123;<br>    SUCCESS(<span class="hljs-number">200</span>,<span class="hljs-string">&quot;成功&quot;</span>),<br>    USER_REG_USER_PASSWORD_CODE(<span class="hljs-number">401</span>,<span class="hljs-string">&quot;用户名和密码错误&quot;</span>),<br>    USER_REG_USER_PASSWORD_CONFIRM(<span class="hljs-number">402</span>,<span class="hljs-string">&quot;密码和确认密码不一致&quot;</span>),<br>    ORDER_FAIL(<span class="hljs-number">601</span>,<span class="hljs-string">&quot;订单失败&quot;</span>),<br>    ORDER_MESSAGE_FAIL(<span class="hljs-number">602</span>,<span class="hljs-string">&quot;订单发送消息失败&quot;</span>) ;<br><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    ResponseEnum(Integer code, String message) &#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Integer <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMessage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> message;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="设置R类"><a href="#设置R类" class="headerlink" title="设置R类"></a>设置R类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> R</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/8/30 19:45</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> R 返回类</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">R</span> </span>&#123;<br><br>    <span class="hljs-comment">//返回的状态码</span><br>    <span class="hljs-keyword">private</span> Integer code;<br>    <span class="hljs-comment">//返回的数据</span><br>    <span class="hljs-keyword">private</span> Object data;<br>    <span class="hljs-comment">//返回的说明信息</span><br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">R</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Email</span> 1339126726@qq.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> // 返回 成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 20:35 2021/8/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [data-数据, message-信息]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> com.ajie.common.R</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">success</span><span class="hljs-params">(Object data, String message)</span> </span>&#123;<br><br>        R r = <span class="hljs-keyword">new</span> R();<br>        r.setCode(ResponseEnum.SUCCESS.getCode());;<br>        r.setMessage(message == <span class="hljs-keyword">null</span> ? ResponseEnum.SUCCESS.getMessage(): message);<br>        r.setData(data);<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Email</span> 1339126726@qq.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> // 返回 成功</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 20:36 2021/8/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [data] 数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> com.ajie.common.R</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">success</span><span class="hljs-params">(Object data)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> success(data,<span class="hljs-keyword">null</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Email</span> 1339126726@qq.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> // 返回 失败</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 20:37 2021/8/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [code- 状态码, message-信息]</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> com.ajie.common.R</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">failt</span><span class="hljs-params">(Integer code, String message)</span></span>&#123;<br>        R r = <span class="hljs-keyword">new</span> R();<br>        r.setCode(code);<br>        r.setData(<span class="hljs-keyword">null</span>);<br>        r.setMessage(message);<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Email</span> 1339126726@qq.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> // 返回失败</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 20:37 2021/8/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> [responseEnum] 枚举类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> com.ajie.common.R</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> R <span class="hljs-title">failt</span><span class="hljs-params">(ResponseEnum responseEnum)</span></span>&#123;<br>        R r = <span class="hljs-keyword">new</span> R();<br>        r.setCode(responseEnum.getCode());<br>        r.setData(<span class="hljs-keyword">null</span>);<br>        r.setMessage(responseEnum.getMessage());<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/reg&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">register</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//1: 新用户注册</span><br>    log.info(<span class="hljs-string">&quot;用户注册&quot;</span>);<br>    regService.sendMsg();<br>    <span class="hljs-comment">//2: 发送短信</span><br>    log.info(<span class="hljs-string">&quot;发送短信&quot;</span>);<br>    regService.addScore();<br>    <span class="hljs-comment">//3: 添加积分</span><br>    <span class="hljs-keyword">return</span> R.success(<span class="hljs-string">&quot;OK&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">&#123;</span><br>  <span class="hljs-meta">&quot;code&quot;</span>: <span class="hljs-string">200,</span><br>  <span class="hljs-meta">&quot;data&quot;</span>: <span class="hljs-string">&quot;OK&quot;,</span><br>  <span class="hljs-meta">&quot;message&quot;</span>: <span class="hljs-string">&quot;成功&quot;</span><br><span class="hljs-attr">&#125;</span><br></code></pre></div></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>==<strong>统一返回的参考来源</strong>==</p><p>1、mybatis-plus–R类</p><p>2、springmvc中有一个：ResponseEntity和HttpStatus一个枚举类</p><p>==为什么在开发中，我们不使用springMvc提供好的，还多此一举自己的去定义和实现一个R和一个枚举呢？==</p><ul><li><p>因为springmvc这些满足不了我们的业务开发需求</p></li><li><p>还有里面的状态的控制和返回，都和业务可能没有什么太大匹配关系。不明确</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>开发</tag>
      
      <tag>规范</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot中的异步处理框架@Async</title>
    <link href="/posts/22207/"/>
    <url>/posts/22207/</url>
    
    <content type="html"><![CDATA[<p>异步处理框架@Async在SpringBoot中的使用</p><p><img src="https://cdn.lixingyong.com/2020/07/16/84da49720d4fb21d1113bcfa84b1a150.jpg" alt="雪女"></p><span id="more"></span><h1 id="Async异步处理框架"><a href="#Async异步处理框架" class="headerlink" title="@Async异步处理框架"></a>@Async异步处理框架</h1><p><strong>分析</strong></p><p>在SpringBoot的日常开发中，一般都是==同步==调用的，但经常有特殊业务需要做==异步==来处理。比如：注册用户、需要送积分、发短信和邮件、或者下单成功、发送消息等等。</p><p><strong>优势</strong></p><ul><li>第一个原因：容错问题，如果送积分出现异常，不能因为送积分而导致用户注册失败。</li><li>第二个原因：提升性能，比如注册用户花了30毫秒，送积分划分50毫秒，如果同步的话一共耗时：70毫秒，用异步的话，无需等待积分，故耗时是：30毫秒就完成了业务。</li></ul><h1 id="同步执行和异步执行"><a href="#同步执行和异步执行" class="headerlink" title="同步执行和异步执行"></a>同步执行和异步执行</h1><h2 id="同步执行（串行执行）"><a href="#同步执行（串行执行）" class="headerlink" title="同步执行（串行执行）"></a>同步执行（串行执行）</h2><p>==代码顺序执行==</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: some desc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: septzhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: 1339126726@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021/8/30 15:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RegService regService;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Email</span> 1339126726@qq.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> //TODO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 16:09 2021/8/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> []</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@GetMapping(&quot;/reg&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">register</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1: 新用户注册</span><br>        log.info(<span class="hljs-string">&quot;用户注册&quot;</span>);<br>        regService.sendMsg();<br>        <span class="hljs-comment">//2: 发送短信</span><br>        log.info(<span class="hljs-string">&quot;发送短信&quot;</span>);<br>        regService.addScore();<br>        <span class="hljs-comment">//3: 添加积分</span><br>        <span class="hljs-keyword">return</span> R.success(<span class="hljs-string">&quot;OK&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210830212517970.png" alt="异步执行示意图"></p><p><strong>问题：</strong></p><p>串行执行的时长：是所有方法执行的总和。</p><blockquote><p>打个比方：</p><p>用户注册：50MS </p><p>短信发送：100ms </p><p>添加积分：100ms  </p><p>总时长：250ms </p><p>完毕</p></blockquote><h2 id="异步执行"><a href="#异步执行" class="headerlink" title="异步执行"></a>异步执行</h2><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210830212504978.png" alt="同步执行示意图"></p><p>问题：异步执行的时长：是最后一个方法执行完成的时间。</p><blockquote><p>打个比方：</p><p>用户注册：50MS</p><p> 短信发送：100ms </p><p>添加积分：100ms  </p><p>总时长：100ms</p><p> 完毕。</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="开启异步执行"><a href="#开启异步执行" class="headerlink" title="开启异步执行"></a>开启异步执行</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableAsync</span> <span class="hljs-comment">//开启异步执行</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudyBootsProApplication</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(StudyBootsProApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="定义异步处理的service"><a href="#定义异步处理的service" class="headerlink" title="定义异步处理的service"></a>定义异步处理的service</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@ClassName</span> ResService</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Date</span> 2021/8/30 16:29</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Description</span> 异步处理的注册service</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegService</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Email</span> 1339126726@qq.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> // 发送短信用异步进行处理和标记</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 16:36 2021/8/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> []</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> void</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMsg</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">//todo:模拟耗时5s</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            Thread.sleep(<span class="hljs-number">5000</span>);<br>            log.info(<span class="hljs-string">&quot;------------发送短信--------------&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Async</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addScore</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Thread.sleep(<span class="hljs-number">3000</span>);<br>            log.info(<span class="hljs-string">&quot;-------处理积分-------&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="调用异步处理"><a href="#调用异步处理" class="headerlink" title="调用异步处理"></a>调用异步处理</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: some desc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: septzhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: 1339126726@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021/8/30 15:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RegController</span> </span>&#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RegService regService;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> java.lang.String</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Email</span> 1339126726@qq.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> //TODO</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 16:09 2021/8/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> []</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@GetMapping(&quot;/reg&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">register</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//1: 新用户注册</span><br>        log.info(<span class="hljs-string">&quot;用户注册&quot;</span>);<br>        regService.sendMsg();<br>        <span class="hljs-comment">//2: 发送短信</span><br>        log.info(<span class="hljs-string">&quot;发送短信&quot;</span>);<br>        regService.addScore();<br>        <span class="hljs-comment">//3: 添加积分</span><br>        <span class="hljs-keyword">return</span> R.success(<span class="hljs-string">&quot;OK&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">2021-08-30</span> <span class="hljs-string">20:48:00.990  INFO 8348 --- [nio-8081-exec-1] com.ajie.controller.RegController        : 用户注册</span><br><span class="hljs-meta">2021-08-30</span> <span class="hljs-string">20:48:00.996  INFO 8348 --- [nio-8081-exec-1] com.ajie.controller.RegController        : 发送短信</span><br><span class="hljs-meta">2021-08-30</span> <span class="hljs-string">20:48:04.018  INFO 8348 --- [-async-thread-2] com.ajie.sevice.RegService               : -------处理积分-------</span><br><span class="hljs-meta">2021-08-30</span> <span class="hljs-string">20:48:06.016  INFO 8348 --- [-async-thread-1] com.ajie.sevice.RegService               : ------------发送短信--------------</span><br></code></pre></div></td></tr></table></figure><h2 id="异步线程池的优化"><a href="#异步线程池的优化" class="headerlink" title="异步线程池的优化"></a>异步线程池的优化</h2><p><strong>==Springboot的tomcat的线程默认数量：200个，如果异步线程线程过多，有请求线程、异步处理的线程这个时候，这么线程都在争抢CPU的执行时间。这样很耗费资源 ，因为@Async](<a href="https://github.com/Async)%E6%B3%A8%E8%A7%A3%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%E7%94%A8%E7%9A%84%E6%98%AF%60SimpleAsyncTaskExecutor%60%E7%BA%BF%E7%A8%8B%E6%B1%A0.[%E8%AF%A5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%8D%E6%98%AF%E7%9C%9F%E6%AD%A3%E6%84%8F%E4%B9%89%E4%B8%8A%E7%9A%84%E7%BA%BF%E7%A8%8B%E3%80%91==">https://github.com/Async)注解默认情况下用的是`SimpleAsyncTaskExecutor`线程池.[该线程池不是真正意义上的线程】==</a></strong></p><p>因为线程不重用，每次调用都会新建一个新的线程。</p><p>通过上面的日志分析获得结论：【task-1】,【task-2】,【task-3】….递增。</p><p><a href="https://github.com/Async">@Async</a>注解异步框架提供多种线程机制：</p><blockquote><ul><li>SimpleAsyncTaskExecutor：简单的线程池，这个类不重用线程，每次调用都会创建一个新的线程。</li><li>SyncTaskExecutor：这个类没实现异步调用，只是一个同步操作，只适合用于不需要多线程的地方。</li><li>ConcurrentTaskExecutor：Executor的适配类，不推荐使用.。</li><li>ThreadPoolTaskScheduler：可以和cron表达式使用。</li><li>ThreadPoolTaskExecutor：最常用，推荐，其本质就是：java.util.concurrent.ThreadPoolExecutor的包装</li></ul></blockquote><h3 id="配置SyncThreadPoolConfiguration"><a href="#配置SyncThreadPoolConfiguration" class="headerlink" title="配置SyncThreadPoolConfiguration"></a>配置SyncThreadPoolConfiguration</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@ClassName</span> SyncThreadPoolConfiguration</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Date</span> 2021/8/30 16:56</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> *<span class="hljs-doctag">@Description</span> 配置SyncThreadPoolConfiguration</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SyncThreadPoolConfiguration</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Author</span> septzhang</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Email</span> 1339126726@qq.com</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Description</span> // 把springboot中的默认的异步线程线程池给覆盖掉。用ThreadPoolTaskExecutor来进行处理</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Date</span> 17:00 2021/8/30</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Param</span> []</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor</span><br><span class="hljs-comment">     **/</span><br>    <span class="hljs-meta">@Bean(name = &quot;thrandPoolTaskExecutor&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ThreadPoolTaskExecutor <span class="hljs-title">getThreadPoolTaskExecutor</span><span class="hljs-params">()</span></span>&#123;<br>        ThreadPoolTaskExecutor threadPoolTaskExecutor = <span class="hljs-keyword">new</span> ThreadPoolTaskExecutor();<br><br>        <span class="hljs-comment">//1: 创建核心线程数 cpu核数 -- 50</span><br>        threadPoolTaskExecutor.setCorePoolSize(<span class="hljs-number">10</span>);<br><br>        <span class="hljs-comment">//2: 线程池维护线程的最大数量， 只有在 缓存队列 满了之后， 才会申请超过 核心线程数 的线程</span><br>        threadPoolTaskExecutor.setMaxPoolSize(<span class="hljs-number">100</span>);<br><br>        <span class="hljs-comment">//3: 缓存队列， 可以写大一些，无非是占用一些内存空间</span><br>        threadPoolTaskExecutor.setQueueCapacity(<span class="hljs-number">200</span>);<br><br>        <span class="hljs-comment">//4: 线程的空闲时间， 当超过了 核心线程数的线程 在到达 指定空闲时间 后，会被 销毁(ms)</span><br>        threadPoolTaskExecutor.setKeepAliveSeconds(<span class="hljs-number">200</span>);<br>        <span class="hljs-comment">//5: 异步方法内部线程的名称 前缀</span><br>        threadPoolTaskExecutor.setThreadNamePrefix(<span class="hljs-string">&quot;ajie-async-thread-&quot;</span>);<br><br>        <span class="hljs-comment">//6: 缓存队列的策略 多线程 JUC并发</span><br>        <span class="hljs-comment">/* 当线程的任务缓存队列已满并且线程池中的线程数量已经达到了最大连接数，如果还有任务来就会采取拒绝策略，</span><br><span class="hljs-comment">         * 通常有四种策略：</span><br><span class="hljs-comment">         *ThreadPoolExecutor.AbortPolicy：丢弃任务并抛出异常：RejectedExcutionException异常</span><br><span class="hljs-comment">         *ThreadPoolExecutor.DiscardPolicy：丢弃任务，但是不抛出异常</span><br><span class="hljs-comment">         *ThreadPoolExecutor.DiscardOldestPolicy: 丢弃队列最前面的任务，然后重新尝试执行任务（重复此过程）</span><br><span class="hljs-comment">         *ThreadPoolExecutor.CallerRunsPolicy：重试添加当前的任务，自动重复调用execute()方法，直到成功。</span><br><span class="hljs-comment">         *ThreadPoolExecutor. 扩展重试3次，如果3次都不成功再移除。</span><br><span class="hljs-comment">         *jmeter 压力测试 1s=500</span><br><span class="hljs-comment">         * */</span><br>        threadPoolTaskExecutor.setRejectedExecutionHandler(<span class="hljs-keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());<br>        threadPoolTaskExecutor.initialize();<br><br>        <span class="hljs-keyword">return</span> threadPoolTaskExecutor;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>请注意：异步虽好但是不能泛滥使用。大部分开发中，还是串行执行。</p><p>除非在开发过程中，一个业务和另外一个业务的关联性不是强耦合，执行失败或者成功都不影响它核心业务。你可以把这些附属业务剥离处理用异步执行。</p><p>比如：用户注册：发送短信，发送邮件， 比如：下单成功发送短信，发送微信登等</p><p>异步编程的<strong>框架</strong>：消息中间件(ActiveMQ、RabbitMQ)</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>多线程</tag>
      
      <tag>JUC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SDK报错</title>
    <link href="/posts/32708/"/>
    <url>/posts/32708/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/2b46eee2f7e9c759b051caa1a3ac1cc9.jpg" alt="2b46eee2f7e9c759b051caa1a3ac1cc9.jpg"></p><p>项目缺少SDK无法运行。</p><span id="more"></span><h2 id="报错信息"><a href="#报错信息" class="headerlink" title="报错信息"></a>报错信息</h2><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">Error</span>: <span class="hljs-string">Please select Android SDK</span><br></code></pre></div></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="打开Project-Structure"><a href="#打开Project-Structure" class="headerlink" title="打开Project Structure"></a>打开<code>Project Structure</code></h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210822181231611.png" alt="image-20210822181231611"></p><h3 id="下载SDK"><a href="#下载SDK" class="headerlink" title="下载SDK"></a>下载SDK</h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210822181529832.png" alt="image-20210822181529832"></p><h3 id="下载完毕，选择Devices-运行。"><a href="#下载完毕，选择Devices-运行。" class="headerlink" title="下载完毕，选择Devices,运行。"></a>下载完毕，选择<code>Devices</code>,运行。</h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210822181726915.png" alt="image-20210822181726915"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Gradle报错</title>
    <link href="/posts/62754/"/>
    <url>/posts/62754/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/e5dfa0034e9b4c54df2fafe6a3e40c89.jpg" alt="e5dfa0034e9b4c54df2fafe6a3e40c89.jpg"></p><p>解决Gradle报错：Caused by: org.gradle.api.internal.plugins.PluginApplicationException: Failed to apply plugin ‘com.android.internal.application’.</p><span id="more"></span><h2 id="控制台报错信息："><a href="#控制台报错信息：" class="headerlink" title="控制台报错信息："></a>控制台报错信息：</h2><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">Caused</span> <span class="hljs-string">by: org.gradle.api.internal.plugins.PluginApplicationException: Failed to apply plugin &#x27;com.android.internal.application&#x27;.</span><br><br></code></pre></div></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在gradle.properties添加：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">android.overridePathCheck</span>=<span class="hljs-string">true</span><br></code></pre></div></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210822172953236.png" alt="image-20210822172953236"></p><p>刷新Gradle ，点击 <code>Sync Project with Gradle Files</code>,等待刷新完成。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210822173032559.png" alt="image-20210822173032559"></p><p>完成控制台截图。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210822173327640.png" alt="image-20210822173327640"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为什么重写equals()同时也要重写hashcode()?</title>
    <link href="/posts/15735/"/>
    <url>/posts/15735/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/hd.jpg" alt="hd.jpg"></p><p>Hashcode和equals的知识点。</p><span id="more"></span><h1 id="Hashcode"><a href="#Hashcode" class="headerlink" title="Hashcode"></a>Hashcode</h1><h2 id="Hashcode的作用"><a href="#Hashcode的作用" class="headerlink" title="Hashcode的作用"></a>Hashcode的作用</h2><p>获取哈希码（为int数据类型）。</p><p>哈希码(散列码)的作用</p><p>确定该对象在哈希表中的位置。</p><p>哈希表的作用</p><p>在栈中(利用哈希码)快速找到对象的位置。</p><p>以<code>key-value</code>  对储存。</p><h2 id="哈希冲突"><a href="#哈希冲突" class="headerlink" title="哈希冲突"></a>哈希冲突</h2><p>由于哈希算法被计算的数据是无限的，而计算后的结果范围有限，因此总会存在不同的数据经过计算后得到的值相同，这就是哈希冲突。（两个不同的数据计算后的结果一样）</p><h2 id="hashset的录入过程"><a href="#hashset的录入过程" class="headerlink" title="hashset的录入过程"></a>hashset的录入过程</h2><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210811233756996.png" alt="image-20210811233756996"></p><p>简易流程图</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210811234941094.png" alt="image-20210811234941094"></p><h2 id="使用Hashcode的意义"><a href="#使用Hashcode的意义" class="headerlink" title="使用Hashcode的意义"></a>使用Hashcode的意义</h2><p>在比较equals之前，先比较hashcode可以大大<strong>减少使用equals的次数</strong>，<strong>提高执行的性能</strong>。</p><h1 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h1><p>所有类继承<code>object</code>类中的equals()方法，**默认使用的是==**。</p><h1 id="和equals"><a href="#和equals" class="headerlink" title="==和equals"></a>==和equals</h1><p>==为对比栈中的数据。</p><ul><li>基本类型数据：比对变量值</li><li>引用类型数据： 比对对象的地址</li></ul><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;abc&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;abc&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;s1的hashcode：&quot;</span> + s1.hashCode());<br>System.out.println(<span class="hljs-string">&quot;s2的hashcode：&quot;</span> + s2.hashCode());<br>System.out.print(<span class="hljs-string">&quot;s1 == s2：&quot;</span> );<br>System.out.println( s1 == s2);<br>System.out.println(<span class="hljs-string">&quot;s1.equals(s2)：&quot;</span> + s1.equals(s2));<br></code></pre></div></td></tr></table></figure><p>结果：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">s1的hashcode：96354</span><br><span class="hljs-attr">s2的hashcode：96354</span><br><span class="hljs-attr">s1</span> =<span class="hljs-string">= s2：true</span><br><span class="hljs-attr">s1.equals(s2)：true</span><br></code></pre></div></td></tr></table></figure><h2 id="String重写equals"><a href="#String重写equals" class="headerlink" title="String重写equals"></a>String重写equals</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;<br>        String anotherString = (String)anObject;<br>        <span class="hljs-keyword">int</span> n = value.length;<br>        <span class="hljs-keyword">if</span> (n == anotherString.value.length) &#123;<br>            <span class="hljs-keyword">char</span> v1[] = value;<br>            <span class="hljs-keyword">char</span> v2[] = anotherString.value;<br>            <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (n-- != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (v1[i] != v2[i])<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对每个char进行对比。</p><h1 id="为什么重写equals-必须重写hashcode"><a href="#为什么重写equals-必须重写hashcode" class="headerlink" title="为什么重写equals()必须重写hashcode()"></a>为什么重写equals()必须重写hashcode()</h1><h2 id="hashcode的使用原则"><a href="#hashcode的使用原则" class="headerlink" title="hashcode的使用原则"></a>hashcode的使用原则</h2><ul><li>对象相等，hashcode必须相等</li><li>hashcode相等，对象不一定相等</li><li>两对象相等，则equals相等</li><li><strong>hashcode()的默认行为是对堆上的对象产生独特值。如果没有重写hashcode，则同一class的两个对象无论如何也不会相等。</strong></li></ul><h2 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.ajie.controller;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: some desc</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: septzhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@email</span>: 1339126726@qq.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021/8/11 23:31</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Student s1 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br>        Student s2 = <span class="hljs-keyword">new</span> Student(<span class="hljs-string">&quot;Tom&quot;</span>, <span class="hljs-number">12</span>);<br>        System.out.println(<span class="hljs-string">&quot;s1 equals s2 ?&quot;</span>+s1.equals(s2));<br>        System.out.println(<span class="hljs-string">&quot;s1 hashCode:&quot;</span>+s1.hashCode());<br>        System.out.println(<span class="hljs-string">&quot;s2 hashCode:&quot;</span>+s2.hashCode());<br>        HashMap&lt;Student, Integer&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;Student, Integer&gt;();<br>        hashMap.put(s1, <span class="hljs-number">1</span>);<br>        System.out.println(hashMap.get(s2));<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Student</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> == o) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(o == <span class="hljs-keyword">null</span> || getClass() != o.getClass()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        Student s = (Student) o;<br>        <span class="hljs-keyword">return</span> age == s.age &amp;&amp; name.equals(s.name);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行结果</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">s1</span> <span class="hljs-string">equals s2 ?true</span><br><span class="hljs-attr">s1</span> <span class="hljs-string">hashCode:366712642</span><br><span class="hljs-attr">s2</span> <span class="hljs-string">hashCode:1829164700</span><br><span class="hljs-attr">null</span><br></code></pre></div></td></tr></table></figure><p>我们Student类重写了equals方法，hashCode方法没有重写.</p><p>s1和s2是同一class生成的两个属性相同的对象，equals方法为true，认为是同一个人。但是s1和s2的hashCode返回不同。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/sl1202/article/details/107706778?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0.control&spm=1001.2101.3001.4242">Java重写equals方法时为什么要重写hashCode方法_掘客DIGGKR-CSDN博客</a></p><p><a href="https://www.bilibili.com/video/BV1mA411P7qN?p=12">限时分享！阿里P8熬了2个月肝出500道Java面试必考题（最全面系统的Java核心知识点）_哔哩哔哩_bilibili</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5W1H分析法</title>
    <link href="/posts/54494/"/>
    <url>/posts/54494/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/bed01c4512ed8908ca6f6698f73c3b09.jpg" alt="bed01c4512ed8908ca6f6698f73c3b09.jpg"></p><p>problem well stated is a problem half solved.</p><span id="more"></span><h1 id="5W1H分析法"><a href="#5W1H分析法" class="headerlink" title="5W1H分析法"></a>5W1H分析法</h1><blockquote><p>5W1H（WWWWWH）分析法也叫六何分析法，是一种思考方法，也可以说是一种<strong>创造技法</strong>。在企业管理、日常工作生活和学习中得到广泛的应用。</p></blockquote><h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>1932年，美国政治学家哈罗德·拉斯韦尔(Harold Dwight Lasswell)提出“5W分析法”。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210807155500681.png" alt="image-20210807155500681"></p><p>1902年英国作家鲁德亚德·吉卜林（Joseph Rudyard Kipling )在《原来如此故事集》中明确提出。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210807155728588.png" alt="image-20210807155728588"></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>5W+1H：是对选定的项目、工序或操作，都要从原因（何因Why）、对象（何事What）、地点（何地Where）、时间（何时When）、人员（何人Who）、方法（何法How）等六个方面提出问题进行思考。通过思考，做出书面描述，并按此描述进行操作，达到完成职务任务的目标</p><ul><li><strong>对象 （What）</strong>——什么事情</li><li><strong>场所 （Where）</strong>——什么地点</li><li><strong>时间和程序 （When）</strong>——什么时候</li><li><strong>人员 （Who）</strong>——责任人</li><li><strong>为什么（Why）</strong>——原因</li><li><strong>方式 （How）</strong>——如何</li></ul><h2 id="分析技巧"><a href="#分析技巧" class="headerlink" title="分析技巧"></a>分析技巧</h2><h3 id="ECRS分析原则"><a href="#ECRS分析原则" class="headerlink" title="ECRS分析原则"></a>ECRS分析原则</h3><blockquote><p>ECRS分析原则是指取消（Eliminate）、合并（Combine）、调整顺序（Rearrange）、简化（Simplify）。</p></blockquote><h4 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h4><p>首先考虑该项工作有无取消的可能性。如果所研究的工作、工序、操作可以取消而又不影响<a href="https://baike.baidu.com/item/%E5%8D%8A%E6%88%90%E5%93%81">半成品</a>的质量和组装进度，这便是最有效果的改善。</p><p> <strong>具体操作</strong></p><p>取消所有多余的步骤或动作（包括身体、四肢、手和眼的动作）； 减少工作中的不规则性，比如将工具存放地点固定，形成习惯性机械动作等； 尽量取消或减少手的使用，如抓握、搬运等； 取消笨拙的或不自然、不流畅的动作； 尽量减少一切肌肉力量的使用； 减少对惯性、动量的克服； 杜绝一观危险动作和隐患； 除必要的休息外，取消工作中的一切人员和设备的闲置时间</p><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>合并就是将两个或两个以上的工序合并成一个。如工序或工作的合并、工具的合并等<strong>。合并后可以有效地消除重复现象，能取得较大的效果。</strong>当工序之间的生产能力不平衡，出现人浮于事和忙闲不均时，就需要对这些工序进行调整和合并。有些相同的工作分散在不同的工序去进行，完全可以考虑能否都合并在一道工序内。</p><p><strong>具体操作</strong></p><p>合并多个方向突变的动作，形成单一方向的连续动作； 固定机器运行周期，并使工作能在一个周期内完成； 实现工具的合并，控制的合并，以及动作的合并。</p><h4 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h4><p>重组也称为替换。就是通过改变工作程序，使工作的先后顺序重新组合，以达到改善工作的目的。例如，前后工序的对换、手的动作改换为脚的动作、<a href="https://baike.baidu.com/item/%E7%94%9F%E4%BA%A7%E7%8E%B0%E5%9C%BA">生产现场</a>机器设备位置的调整等。</p><p><strong>具体操作</strong></p><p>使两只手的工作负荷均衡，而且同时进行，相互对称； 使工作由手向眼转移。</p><h4 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h4><p>经过取消、合并、重组之后，再对该项工作作进一步更深入的分析研究，使现行方法尽量地简化，以最大限度地缩短<a href="https://baike.baidu.com/item/%E4%BD%9C%E4%B8%9A%E6%97%B6%E9%97%B4">作业时间</a>，提高工作效率。简化就是一种工序的改善，也是局部范围的省略，整个范围的省略也就是取消。</p><p><strong>具体操作</strong></p><p>在能够完成工作的基础上使用最小的肌肉群，且注意有间歇有节奏地使用； 减少目光搜索的范围与变焦次数； 使工作能在正常区域内完成而不必移动身体； 使动作幅度减小； 使手柄、杠杆、踏板、按钮等控制器适合于人的尺寸与肌体性能； 在需要高强度肌肉力量处，借助惯性来获得能量帮助； 使用尽可能简单的动作组合； 减少每一个动作的复杂程度，尤其是在一个位置上的多个动作。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/5W1H%E6%B3%95.jpg"></p><h3 id="使用ECRS的内容步骤"><a href="#使用ECRS的内容步骤" class="headerlink" title="使用ECRS的内容步骤"></a>使用ECRS的内容步骤</h3><p>取消（Eliminate）</p><p>就是看现场能不能排除某道工序，如果可以就取消这道工序。</p><p>合并（Combine）</p><p>就是看能不能把几道工序合并，尤其在流水线生产上合并的技巧能立竿见影地改善并提高效率。</p><p>重排（Rearrange）</p><p>如上所述，改变一下顺序，改变一下工艺就能提高效率。使其能有最佳的顺序、除去重复、办事有序。</p><p>简化（Simplify）</p><p>将复杂的工艺变得简单一点，采用最简单的方法及设备，以节省人力、时间及费用 ，也能提高效率。</p><h3 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h3><p><strong>ECRS与5W1H对应关系分析图</strong></p><p>Why———为什么要做，是原因；</p><p>What——–做什么，做成什么，是目标；</p><p>where——-在哪儿做，是地点；</p><p>when——–什么时候做，是时间；</p><p>Who———谁来做，是执行对象；</p><p>How———怎么做，是方法。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/3b87e950352ac65c10389f6e80b8a5119313b07e1cd1" alt="img"></p><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><p>5W1H不是解决问题的直接方案，它只不说是解决一切问题的开始。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210807160049619.png" alt="image-20210807160049619"></p><h3 id="Big-Question-Map工具"><a href="#Big-Question-Map工具" class="headerlink" title="Big Question Map工具"></a>Big Question Map工具</h3><p>在你的主体周围，写上 What、When、Who、Where、Why、How，并分别基于这几个词，写上更加具体的问题。例如：</p><p><strong>问题复盘</strong></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210807160830757.png" alt="image-20210807160830757"></p><p><strong>项目确立</strong>：</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210807161051449.png" alt="image-20210807161051449"></p><p><strong>问题讨论</strong></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210807161223027.png" alt="image-20210807161223027"></p><p><strong>思维导图分析法</strong>：</p><p>如果借助思维导图，你可以直接绘制这样的图示，帮助你写得更快、思路更清晰。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210807161404113.png" alt="image-20210807161404113"></p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><p>渡边光太郎的《5W1H 经典思考法》</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/186d8cb1e73ce939.jpg" alt="img"></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://baike.baidu.com/item/5W1H%E5%88%86%E6%9E%90%E6%B3%95/10091536">5W1H分析法_百度百科 (baidu.com)</a></p><p><a href="https://www.bilibili.com/video/BV15t4y1y7hc?from=search&seid=18177334780199761575">遇到问题无从下手？和别人聊天不知道从哪儿开始？试试 5W1H_哔哩哔哩_bilibili</a></p>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通识</tag>
      
      <tag>认知工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二分查找法总结</title>
    <link href="/posts/28081/"/>
    <url>/posts/28081/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/10576d3617802dc045024d5edd7ea90d.jpg" alt="10576d3617802dc045024d5edd7ea90d.jpg"></p><p>二分查找的分析，这个方法真是太好用了，感谢这个B~站大佬。</p><span id="more"></span><h1 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h1><h2 id="通用步骤"><a href="#通用步骤" class="headerlink" title="通用步骤"></a>通用步骤</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>将二分法的处理过程划分成左右两个区域的 动态变化 的过程。当<code>Left</code>和<code>Right</code> 相差唯一时，结束循环，提交结果。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210902091658125.png" alt="分析过程"></p><h3 id="划归"><a href="#划归" class="headerlink" title="划归"></a>划归</h3><p>将问题划归为左右两个区域的动态变化问题，最后提交一个L/R的值。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210902091316763.png" alt="划归问题"></p><h3 id="套路"><a href="#套路" class="headerlink" title="套路"></a>套路</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchInsert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> left = -<span class="hljs-number">1</span>;<span class="hljs-comment">//左边界-1</span><br>    <span class="hljs-keyword">int</span> right = nums.length;<span class="hljs-comment">//右边界+1</span><br>    <span class="hljs-keyword">int</span> middle = (left + right) / <span class="hljs-number">2</span>;<span class="hljs-comment">//中间值</span><br>    <span class="hljs-keyword">while</span>(left + <span class="hljs-number">1</span> != right)&#123;  <span class="hljs-comment">//L和R相差1时，结束</span><br>        <span class="hljs-comment">//分析与划归片段，需要自行分析</span><br>        <span class="hljs-keyword">if</span> (middle == nums[middle])&#123;<br>            <span class="hljs-keyword">return</span> middle;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target &gt; nums[middle])&#123;<br>            left = middle;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            right = middle;<br>        &#125;<br>        <span class="hljs-comment">//-----------------</span><br>        middle = left + (right - left)/<span class="hljs-number">2</span>;<span class="hljs-comment">////重新定位去中间值指针</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> right;<span class="hljs-comment">//分析与划归分析，确定返回L或R</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h3><h4 id="m是否始终处于-0-N-以内"><a href="#m是否始终处于-0-N-以内" class="headerlink" title="m是否始终处于[0, N)以内?"></a>m是否始终处于[0, N)以内?</h4><p>始终处于区间内。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210902092506294.png" alt="问题1"></p><h4 id="更新指针时，能不能写成l-m-1-或者r-m-1"><a href="#更新指针时，能不能写成l-m-1-或者r-m-1" class="headerlink" title="更新指针时，能不能写成l=m+1,或者r=m- 1?"></a>更新指针时，能不能写成l=m+1,或者r=m- 1?</h4><p>不能，在这个方法里，会冲突，溢出。</p><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><p>示例 1:</p><blockquote><p>输入: nums = [-1,0,3,5,9,12], target = 9<br>输出: 4<br>解释: 9 出现在 nums 中并且下标为 4<br>示例 2:</p></blockquote><blockquote><p>输入: nums = [-1,0,3,5,9,12], target = 2<br>输出: -1<br>解释: 2 不存在 nums 中因此返回 -1</p></blockquote><p><strong>提示：</strong></p><blockquote><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol></blockquote><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>方法：二分查找<br>二分查找是一种基于比较目标值和数组中间元素的教科书式算法。</p><ul><li>如果目标值等于中间元素，则找到目标值。</li><li>如果目标值较小，继续在左侧搜索。</li><li>如果目标值较大，则继续在右侧搜索。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210801000022163.png" alt="image-20210801000022163"></p><h3 id="算法："><a href="#算法：" class="headerlink" title="算法："></a>算法：</h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210801000112405.png" alt="image-20210801000112405"></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> pivot, left = <span class="hljs-number">0</span>, right = nums.length - <span class="hljs-number">1</span>;<span class="hljs-comment">//初始化指针 left = 0, right = n - 1。</span><br>    <span class="hljs-keyword">while</span> (left &lt;= right) &#123;<span class="hljs-comment">//当 left &lt;= right：</span><br>      pivot = left + (right - left) / <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">if</span> (nums[pivot] == target) <span class="hljs-keyword">return</span> pivot;<br>      <span class="hljs-keyword">if</span> (target &lt; nums[pivot]) right = pivot - <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">else</span> left = pivot + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><ul><li>时间复杂度：\mathcal{O}(\log N)O(log<em>N</em>)。</li><li>空间复杂度：\mathcal{O}(1)O(1)。</li></ul><h3 id="易错"><a href="#易错" class="headerlink" title="易错"></a>易错</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (target &lt; nums[pivot]) right = pivot - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> left = pivot + <span class="hljs-number">1</span>;<br></code></pre></div></td></tr></table></figure><p>左右多移动一格，可以避免，不存在列表的数字，在游标函数相差为1的时候进入<strong>死循环</strong>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p>作者：LeetCode</p><p>链接：<a href="https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode/">https://leetcode-cn.com/problems/binary-search/solution/er-fen-cha-zhao-by-leetcode/</a></p><p>来源：力扣（LeetCode）</p><p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p><a href="https://www.bilibili.com/video/BV1d54y1q7k7?share_source=copy_web">二分查找为什么总是写错？</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux开发记录</title>
    <link href="/posts/17798/"/>
    <url>/posts/17798/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/wallhaven-j5l5qm.jpg" alt="wallhaven-j5l5qm.jpg"></p><span id="more"></span><h1 id="Linux开发记录"><a href="#Linux开发记录" class="headerlink" title="Linux开发记录"></a>Linux开发记录</h1><p>环境： centos 7</p><h2 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h2><p>指令: <code>yum install wget</code></p><p>一直yes</p><p>成功信息：</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210731223824191.png" alt="image-20210731223824191"></p><h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><h3 id="使用wget下载："><a href="#使用wget下载：" class="headerlink" title="使用wget下载："></a>使用wget下载：</h3><p>指令：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">wget</span> <span class="hljs-string">http://download.redis.io/releases/redis-5.0.9.tar.gz</span><br></code></pre></div></td></tr></table></figure><h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">tar</span> <span class="hljs-string">xzf redis-5.0.9.tar.gz</span><br><span class="hljs-attr">cd</span> <span class="hljs-string">redis-5.0.9</span><br><span class="hljs-attr">make</span><br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis在项目中的作用</title>
    <link href="/posts/30044/"/>
    <url>/posts/30044/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.lixingyong.com/images/2020/07/15/-----4k_.jpg" alt="-----4k_.jpg"></p><span id="more"></span><h1 id="Redis在项目中的作用"><a href="#Redis在项目中的作用" class="headerlink" title="Redis在项目中的作用"></a>Redis在项目中的作用</h1><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><p><em><strong>Redis是一个高性能的基于Key-value设计的内存数据库</strong></em>，它支持常见的五种数据格式：<strong>String类型、Hash、List列表、Set集合、ZSet有序集合、 bitmaps</strong>， <strong>hyperloglogs 和 地理空间（geospatial） 索引半径查询</strong>等。</p><blockquote><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html">分区（Cluster）</a>提供高可用性（high availability）。</p></blockquote><h3 id="Redis无法替换MySQL-Oracle的原因"><a href="#Redis无法替换MySQL-Oracle的原因" class="headerlink" title="Redis无法替换MySQL/Oracle的原因"></a>Redis无法替换MySQL/Oracle的原因</h3><p>一般来说是不可取的，因为把数据放在磁盘中才会更加安全。而使用Redis只是为了缓解压力和特殊的业务场景。所以一般是配合使用。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="性能-数据读取性能强悍"><a href="#性能-数据读取性能强悍" class="headerlink" title="性能-数据读取性能强悍"></a>性能-数据读取性能强悍</h3><p>通常数据库的操作，一般都要几十毫秒，而Redis的读操作一般仅需要不到1毫秒。所以一般在开发中我们会把一些数据存在Redis中，性能会有几十倍到上百倍的提升。</p><h3 id="并发-缓解数据库压力"><a href="#并发-缓解数据库压力" class="headerlink" title="并发-缓解数据库压力"></a>并发-缓解数据库压力</h3><p>在网站的大并发的环境下，所有的请求都直接访问数据库，数据库的链接很容易耗尽。甚至出现数据的卡死或者直接宕机，为了解决数据库的压力一般我们都会采用redis来做数据的缓存。让请求先访问到Redis中，而不会直接冲到数据库去查询。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.redis.cn/">redis中文官方网站</a></p>]]></content>
    
    
    <categories>
      
      <category>-- Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>工具</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费又好用的图床谁不爱呢</title>
    <link href="/posts/10403/"/>
    <url>/posts/10403/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/v2-c26af88c87a3e46e7293621c8606f7fb_r.jpg" alt="v2-c26af88c87a3e46e7293621c8606f7fb_r"></p><p>各位图床，我一拳下去，你们可能会死。</p><p>使用Github作为图床，配置PicGo+Typora,让你的博客生活直接起飞！！</p><span id="more"></span><h1 id="配置Github"><a href="#配置Github" class="headerlink" title="配置Github"></a>配置Github</h1><h2 id="建立图片仓库"><a href="#建立图片仓库" class="headerlink" title="建立图片仓库"></a>建立图片仓库</h2><p>在Github新建一个仓库，用来存储，你的图片。</p><blockquote><ol><li>在Github主页点击左上方的new按钮，准备新建仓库</li><li>输入仓库名、仓库描述、选择仓库为公开的、初始化README文件，点击【Create repository】按钮创建仓库</li></ol></blockquote><h2 id="生成一个Token"><a href="#生成一个Token" class="headerlink" title="生成一个Token"></a>生成一个Token</h2><blockquote><p>Token是服务端生成的一串字符串，以作客户端进行请求的一个令牌，客户端只需带上这个Token前来请求数据即可，无需带上用户名和密码。</p><p>Token的目的是为了减轻服务器的压力，减少频繁的查询数据库，使服务器更加健壮。</p></blockquote><p>点击 <a href="https://github.com/settings/tokens">新建Token</a> ，创建一个Token。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210721112516051.png" alt="image-20210721112516051"></p><p>如图选择，点击最后的<code>Generate token</code>的绿色按钮生成token。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210721112605279.png" alt="image-20210721112605279"></p><p>这个token生成后<strong>只会显示一次</strong>！你要把这个token复制一下存到其他地方以备以后要用。</p><p>找不到了也不要担心，<strong>重新生成</strong>一个就好了。</p><h1 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h1><blockquote><p>PicGo是一个图床管理软件，配置后可以很方便的进行图片上传的操作，还有很多插件的支持，例如上传图片自动压缩、添加水印等… … 最重要的是可以与Typora进行交互，实现书写markdown中粘贴即上传的效果！</p><p>当Tyora+PicGo的时候其他图床直接没有活路了/狗头</p></blockquote><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>PicGo在Github的页面：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a><br>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">Releases · Molunerfinn/PicGo (github.com)</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>下载安装好后，打开软件，选择【图床设置】-&gt;【GitHub设置】，跳转到如下界面：<br><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210721113618491.png" alt="image-20210721113618491"></p><p>注意：</p><p>【仓库名】-&gt; 指定图片存储在哪个仓库：你的<strong>用户名/仓库(图床)名</strong>。<br>【设定分支名】 -&gt; 指定一个分支：master（确保为已有分支）<br>【Token】 -&gt; 通信标识：步骤3生成的Token<br>【指定存储路径】 -&gt; 在仓库下具体存储路径，会自动创建此文件夹：路径/<br>【自定义域名】 -&gt; 它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为<code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code></p><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p>点击确定，保存设置。根据需求设为默认图床。</p><h1 id="配置CDN加速"><a href="#配置CDN加速" class="headerlink" title="配置CDN加速"></a>配置CDN加速</h1><h2 id="免费CDN：jsDelivr"><a href="#免费CDN：jsDelivr" class="headerlink" title="免费CDN：jsDelivr"></a>免费CDN：jsDelivr</h2><blockquote><p>CDN：内容分发网络。配置使得网络传输的更快，更稳定。</p><p>jsDelivr：是一个免费开源的 CDN 解决方案</p></blockquote><ol><li><p>新建GitHub仓库，参考上述步骤新建</p></li><li><p>克隆项目到本地(需要安装git)</p></li><li><p>在本地右键-&gt;【Git Bash Here】，执行<code>git clone [项目ssh下载地址]</code></p></li><li><p>随便选择一个文件放到本地git库中，右键-&gt;【Git Bash Here】执行以下命令(第一次使用git需要指定邮箱和用户名)</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git status<span class="hljs-regexp">//</span>查看状态<br>git add [文件]<span class="hljs-regexp">//</span>添加文件到暂存区<br>git commit -m <span class="hljs-string">&quot;初始化仓库&quot;</span> <span class="hljs-regexp">//</span>提交到仓库<br>git push<span class="hljs-regexp">//</span>推送至远程仓库<br></code></pre></div></td></tr></table></figure></li><li><p>在github项目主页面，点击【Create a new release】</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210721114451238.png" alt="image-20210721114451238"></p></li><li><p>自定义版本号，点击【Publish release】按钮发布</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210721114802249.png" alt="发布"></p></li><li><p>配置完成，使用方法：<code>https://https://cdn.jsdelivr.net/gh/用户名/仓库名@版本号/文件路径</code></p></li></ol><h2 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h2><p>进行如下配置后，可以在编写markdown时<strong>直接粘贴图片</strong>，Typora会调用PicGo，实现图片上传。</p><ol><li><p>要求Typora的版本在0.9.84及以上，版本低于此的，【偏好设置】-【版本更新】</p></li><li><p>打开PicGo 【设置】 -【设置Server】，进行如下配置(一般都为默认)</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210902210231.png" alt="PicGo 【设置】"></p></li><li><p>打开Typora，选择【偏好设置】 - 【图像】</p></li><li><p>进行如下设置</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210721115146479.png" alt="image-20210721115146479"></p></li><li><p>点击验证图片上传选项，观察success是否为true。成功之后打开GitHub图床仓库，就可以看到两个Typora的图标了~说明配置非常成功。</p></li><li><p>现在在Typora中粘贴图片，会自动上传到Github图床，并且自动替换连接，非常省心省事~~~</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">官方配置手册 | PicGo</a></p><p><a href="https://blog.csdn.net/qq_36376089/article/details/107429913">使用Github作为图床，配置PicGo+Typora_我的意大利炮呢的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>奇怪的知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通识</tag>
      
      <tag>技巧</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot的日志解决方案</title>
    <link href="/posts/13699/"/>
    <url>/posts/13699/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/timg-2.jpg" alt="timg-2.jpg"></p><span id="more"></span><h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="日志在开发过程中作用"><a href="#日志在开发过程中作用" class="headerlink" title="日志在开发过程中作用"></a>日志在开发过程中作用</h2><p>在开发过程这种，我们经常要调试和打印一些信息，这样的帮助和我辅助我们进行<strong>问题排查</strong>和<strong>数据跟踪</strong>。</p><p>一般传统的方式是使用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">System.out.printltn(<span class="hljs-string">&quot;xxxxx &quot;</span>)<br></code></pre></div></td></tr></table></figure><p>但是上面的这种方式存在如下问题：</p><blockquote><p>1：仅仅只是一种控制台打印的方式。</p><p>2：不方便我后续生产环境的调试和查看。</p><p>3：性能角度，存在一定性能问题。会影响方法的执行速度。虽然影响很小，但是也不应该小觑。</p></blockquote><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>把打印的信息写入文件中。===》日志</p><h1 id="Springboot的日志的解决方案"><a href="#Springboot的日志的解决方案" class="headerlink" title="Springboot的日志的解决方案"></a>Springboot的日志的解决方案</h1><p> 在springboot的底层日志结构中对应：<code>spring-boot-starter-logging</code>可以看出，它依赖了三个框架分别是： </p><p><code>spring-boot-starter-logging</code> 依赖已经被</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="关系体系"><a href="#关系体系" class="headerlink" title="关系体系"></a>关系体系</h2><p>springboot的日志的整个体系:</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/1624279228011.png" alt="1624279228011"></p><p> 在<code>springboot</code>的底层日志结构中对应：<code>spring-boot-starter-logging</code>可以看出，它依赖了三个框架分别是： </p><ul><li>slf4j</li><li>logback</li><li>log4j</li></ul><h2 id="slf4j、logback和log4j三者的关系"><a href="#slf4j、logback和log4j三者的关系" class="headerlink" title="slf4j、logback和log4j三者的关系"></a>slf4j、logback和log4j三者的关系</h2><p>1、logback和log4j是日志实现框架，就是实现怎么记录日志的。</p><p>2、slf4j：提供了java所有的日志框架的简单抽象（使用了日志的门面设计模式），</p><p>说白了就是一个日志API（<code>没有实现类</code>）, 它<strong>不能单独使用</strong>。</p><p>必须要结logback和log4j日志框架来实现<strong>结合使用</strong>。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Logger log = LoggerFactory.getLogger(LogController.class);<br>    <span class="hljs-meta">@GetMapping(&quot;/log&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">console</span><span class="hljs-params">()</span></span>&#123;<br>        log.trace(<span class="hljs-string">&quot;----------trace--------&quot;</span>);<br>        log.debug(<span class="hljs-string">&quot;----------debug--------&quot;</span>);<br>        log.info(<span class="hljs-string">&quot;----------info--------&quot;</span>);<br>        log.warn(<span class="hljs-string">&quot;----------warn--------&quot;</span>);<br>        log.error(<span class="hljs-string">&quot;----------error--------&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 初始化一个日志对象</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger log = LoggerFactory.getLogger(IndexController.class);<br></code></pre></div></td></tr></table></figure><p>打印结果</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通识</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQLite的使用</title>
    <link href="/posts/61119/"/>
    <url>/posts/61119/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/----4k_.jpg" alt="----4k_.jpg"></p><span id="more"></span><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="SQLite-简介"><a href="#SQLite-简介" class="headerlink" title="SQLite 简介"></a>SQLite 简介</h2><p>SQLite是一个软件库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。SQLite是一个增长最快的数据库引擎，这是在普及方面的增长，与它的尺寸大小无关。<strong>SQLite 源代码不受版权限制</strong>。</p><h2 id="什么是-SQLite？"><a href="#什么是-SQLite？" class="headerlink" title="什么是 SQLite？"></a>什么是 SQLite？</h2><p>SQLite是一个<strong>进程内的库</strong>，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个<strong>零配置</strong>的数据库，这意味着与其他数据库不一样，您<strong>不需要在系统中配置</strong>。</p><p>就像其他数据库，SQLite 引擎不是一个独立的进程，可以按应用程序需求进行静态或动态连接。SQLite 直接访问其存储文件。</p><h2 id="为什么要用-SQLite？"><a href="#为什么要用-SQLite？" class="headerlink" title="为什么要用 SQLite？"></a>为什么要用 SQLite？</h2><ul><li>不需要一个单独的服务器进程或操作的系统（<strong>无服务器的</strong>）。</li><li>SQLite <strong>不需要配置</strong>，这意味着不需要安装或管理。</li><li>一个完整的 SQLite 数据库是存储在一个单一的<strong>跨平台</strong>的磁盘文件。</li><li>SQLite 是非常小的，是<strong>轻量级</strong>的，完全配置时小于 400KiB，省略可选功能配置时小于250KiB。</li><li>SQLite 是<strong>自给自足</strong>的，这意味着不需要任何外部的依赖。</li><li>SQLite 事务是完全兼容 ACID 的，允许从<strong>多个进程或线程安全访问</strong>。</li><li>SQLite 支持 <strong>SQL92（SQL2）标准</strong>的大多数查询语言的功能。</li><li>SQLite 使用 <strong>ANSI-C 编写</strong>的，并提供了简单和易于使用的 API。</li><li>SQLite 可在 UNIX（Linux, Mac OS-X, Android, iOS）和 Windows（Win32, WinCE, WinRT）中运行。</li></ul><h2 id="SQLite-局限性"><a href="#SQLite-局限性" class="headerlink" title="SQLite 局限性"></a>SQLite 局限性</h2><table><thead><tr><th align="center"><strong>特性</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">RIGHT OUTER JOIN</td><td align="center">只实现了 LEFT OUTER JOIN。</td></tr><tr><td align="center">FULL OUTER JOIN</td><td align="center">只实现了 LEFT OUTER JOIN。</td></tr><tr><td align="center">ALTER TABLE</td><td align="center">支持 RENAME TABLE 和 ALTER TABLE 的 ADD COLUMN variants 命令，不支持 DROP COLUMN、ALTER COLUMN、ADD CONSTRAINT。</td></tr><tr><td align="center">Trigger 支持</td><td align="center">支持 FOR EACH ROW 触发器，但不支持 FOR EACH STATEMENT 触发器。</td></tr><tr><td align="center">VIEWs</td><td align="center">在 SQLite 中，视图是只读的。您不可以在视图上执行 DELETE、INSERT 或 UPDATE 语句。</td></tr><tr><td align="center">GRANT 和 REVOKE</td><td align="center">可以应用的唯一的访问权限是底层操作系统的正常文件访问权限。</td></tr></tbody></table><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>参考：<a href="https://www.runoob.com/sqlite/sqlite-installation.html">SQLite 安装 | 菜鸟教程 (runoob.com)</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.runoob.com/sqlite/sqlite-tutorial.html">SQLite 教程 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>SQLite</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AndroidStudio使用手册</title>
    <link href="/posts/11477/"/>
    <url>/posts/11477/</url>
    
    <content type="html"><![CDATA[<span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>使用手册</tag>
      
      <tag>AndroidStudio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SVN的使用</title>
    <link href="/posts/57755/"/>
    <url>/posts/57755/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.lixingyong.com/2020/07/16/84da49720d4fb21d1113bcfa84b1a150.jpg" alt="84da49720d4fb21d1113bcfa84b1a150.jpg"></p><p>关于SVN版本管理工具的学习。。。</p><span id="more"></span><h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><blockquote><p>SVN是Apache Subversion的缩写，是一个<strong>开放源代码</strong>的<strong>版本控制系统</strong>，通过采用<strong>分支管理系统</strong>的高效管理，简而言之就是用于多个人共同开发同一个项目，实现共享资源，实现最终集中式的管理。</p></blockquote><blockquote><ul><li>**repository（源代码库）:**源代码统一存放的地方</li><li>**Checkout（提取）:**当你手上没有源代码的时候，你需要从repository checkout一份</li><li>**Commit（提交）:**当你已经修改了代码，你就需要Commit到repository</li><li>**Update (更新):**当你已经Checkout了一份源代码， Update一下你就可以和Repository上的源代码同步，你手上的代码就会有最新的变更</li></ul></blockquote><p>日常开发过程其实就是这样的（假设你已经Checkout并且已经工作了几天）：</p><p>Update(获得最新的代码) –&gt;作出自己的修改并调试成功 –&gt; Commit(大家就可以看到你的修改了) 。</p><p>官网：<a href="https://subversion.apache.org/">Apache Subversion</a></p><p>Github SVN 源码：<a href="https://github.com/apache/subversion">apache/subversion: Mirror of Apache Subversion (github.com)</a></p><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><ul><li><p>（1）目录版本控制</p><p>Subversion 作了一个 “虚拟” 的版本控管文件系统, 能够依时间跟踪整个目录的变动。对 目录和文件都能进行版本控制。</p></li><li><p>（2）真实的版本历史</p><p>在Subversion中，你可以增加（add）、删除（delete）、复制（copy）和重命名（rename），无论是文件还是目录，所有的新加的文件都从一个新的、干净的版本开始。</p></li><li><p>（3）自动提交</p><p>一个提交动作，不是全部更新到了档案库中，就是不完全更新。这允许开发人员以逻辑区间建立并提交变动，以防止当部分提交成功时出现的问题。</p></li><li><p>（4）纳入版本控管的元数据</p><p>每一个文件与目录都附有一組属性关键字并和属性值相关联。你可以创建, 并儲存任何你想要的Key/Value对。 属性是随着时间来作版本控管的,就像文件內容一样。</p></li><li><p>（5）选择不同的网络层</p><p>Subversion 有抽象的档案库存取概念, 可以让人很容易地实作新的网络机制。 Subversion 可以作为一个扩展模块嵌入到Apache HTTP 服务器中。这个为Subversion提供了非常先进的稳定性和协同工作能力，除此之外还提供了许多重要功能: 举例来说, 有身份认证, 授权, 在线压缩, 以及文件库浏览等等。还有一个轻量级的独立Subversion服务器， 使用的是自定义的通信协议, 可以很容易地通过 ssh 以 tunnel 方式使用。</p></li><li><p>（6）一致的数据处理方式</p><p>Subversion 使用二进制差异算法来异表示文件的差异, 它对文字(人类可理解的)与二进制文件(人类无法理解的) 两类的文件都一视同仁。 这两类的文件都同样地以压缩形式储存在档案库中, 而且文件差异是以两个方向在网络上传输的。</p></li><li><p>（7）有效的分支(branch)与标签(tag)</p><p>在分支与标签上的消耗并不必一定要与项目大小成正比。 Subversion 建立分支与标签的方法, 就只是复制该项目, 使用的方法就类似于硬连接（hard-link）。 所以这些操作只会花费很小, 而且是固定的时间。</p></li><li><p>（8）Hackability</p><p>Subversion没有任何的历史包袱; 它主要是一群共用的 C 程序库, 具有定义完善的API。这使得 Subversion 便于维护, 并且可被其它应用程序与程序语言使用。</p></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://www.runoob.com/svn/svn-install.html">SVN 安装 | 菜鸟教程 (runoob.com)</a></p><h1 id="SVN-生命周期"><a href="#SVN-生命周期" class="headerlink" title="SVN 生命周期"></a>SVN 生命周期</h1><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>版本库相当于一个集中的空间，用于存放开发者所有的工作成果。版本库不仅能存放文件，还包括了每次修改的历史，即每个文件的变动历史。</p><p>Create 操作是用来创建一个新的版本库。大多数情况下这个操作只会执行一次。当你创建一个新的版本库的时候，你的版本控制系统会让你提供一些信息来标识版本库，例如创建的位置和版本库的名字。</p><hr><h3 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h3><p>Checkout 操作是用来从版本库创建一个工作副本。工作副本是开发者私人的工作空间，可以进行内容的修改，然后提交到版本库中。</p><hr><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>顾名思义，update 操作是用来更新版本库的。这个操作将工作副本与版本库进行同步。由于版本库是由整个团队共用的，当其他人提交了他们的改动之后，你的工作副本就会过期。</p><p>让我们假设 Tom 和 Jerry 是一个项目的两个开发者。他们同时从版本库中检出了最新的版本并开始工作。此时，工作副本是与版本库完全同步的。然后，Jerry 很高效的完成了他的工作并提交了更改到版本库中。</p><p>此时 Tom 的工作副本就过期了。更新操作将会从版本库中拉取 Jerry 的最新改动并将 Tom 的工作副本进行更新。</p><hr><h3 id="执行变更"><a href="#执行变更" class="headerlink" title="执行变更"></a>执行变更</h3><p>当检出之后，你就可以做很多操作来执行变更。编辑是最常用的操作。你可以编辑已存在的文件，例如进行文件的添加/删除操作。</p><p>你可以添加文件/目录。但是这些添加的文件目录不会立刻成为版本库的一部分，而是被添加进待变更列表中，直到执行了 commit 操作后才会成为版本库的一部分。</p><p>同样地你可以删除文件/目录。删除操作立刻将文件从工作副本中删除掉，但该文件的实际删除只是被添加到了待变更列表中，直到执行了 commit 操作后才会真正删除。</p><p>Rename 操作可以更改文件/目录的名字。”移动”操作用来将文件/目录从一处移动到版本库中的另一处。</p><hr><h3 id="复查变化"><a href="#复查变化" class="headerlink" title="复查变化"></a>复查变化</h3><p>当你检出工作副本或者更新工作副本后，你的工作副本就跟版本库完全同步了。但是当你对工作副本进行一些修改之后，你的工作副本会比版本库要新。在 commit 操作之前复查下你的修改是一个很好的习惯。</p><p>Status 操作列出了工作副本中所进行的变动。正如我们之前提到的，你对工作副本的任何改动都会成为待变更列表的一部分。Status 操作就是用来查看这个待变更列表。</p><p>Status 操作只是提供了一个变动列表，但并不提供变动的详细信息。你可以用 diff 操作来查看这些变动的详细信息。</p><hr><h3 id="修复错误"><a href="#修复错误" class="headerlink" title="修复错误"></a>修复错误</h3><p>我们来假设你对工作副本做了许多修改，但是现在你不想要这些修改了，这时候 revert 操作将会帮助你。</p><p>Revert 操作重置了对工作副本的修改。它可以重置一个或多个文件/目录。当然它也可以重置整个工作副本。在这种情况下，revert 操作将会销毁待变更列表并将工作副本恢复到原始状态。</p><hr><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>合并的时候可能会发生冲突。Merge 操作会自动处理可以安全合并的东西。其它的会被当做冲突。例如，”hello.c” 文件在一个分支上被修改，在另一个分支上被删除了。这种情况就需要人为处理。Resolve 操作就是用来帮助用户找出冲突并告诉版本库如何处理这些冲突。</p><hr><h3 id="提交更改"><a href="#提交更改" class="headerlink" title="提交更改"></a>提交更改</h3><p>Commit 操作是用来将更改从工作副本到版本库。这个操作会修改版本库的内容，其它开发者可以通过更新他们的工作副本来查看这些修改。</p><p>在提交之前，你必须将文件/目录添加到待变更列表中。列表中记录了将会被提交的改动。当提交的时候，我们通常会提供一个注释来说明为什么会进行这些改动。这个注释也会成为版本库历史记录的一部分。Commit 是一个原子操作，也就是说要么完全提交成功，要么失败回滚。用户不会看到成功提交一半的情况。</p><hr><p><a href="https://www.runoob.com/svn/svn-create-repo.html">SVN 创建版本库 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>SVN</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通识</tag>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZD-710振动传感器</title>
    <link href="/posts/15711/"/>
    <url>/posts/15711/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/QQ%E6%88%AA%E5%9B%BE20210710220210.1l7zby4o3gtc.png" alt="QQ截图20210710220210"></p><p>ZD-710振动传感器的学习笔记</p><span id="more"></span><h1 id="1-它是什么？"><a href="#1-它是什么？" class="headerlink" title="1.它是什么？"></a>1.它是什么？</h1><p>ZD-710 无线振动温度传感器（以下简称传感器）采用蓝牙（Bluetooth）无线通讯方式，可直接与苹果、安卓系列手机和平板通讯，使用简单方便 。</p><h1 id="2-它能够做什么用？"><a href="#2-它能够做什么用？" class="headerlink" title="2.它能够做什么用？"></a>2.它能够做什么用？</h1><p>ZD-710振动传感器可以用来可以测量<strong>加速度</strong>、<strong>速度</strong>、位移的总值和波形，并且底部集成红外测温传感器，可以测量<strong>设备表面温度</strong>。  </p><h1 id="3-在什么环境下使用它？"><a href="#3-在什么环境下使用它？" class="headerlink" title="3.在什么环境下使用它？"></a>3.在什么环境下使用它？</h1><p>ZD-710振动传感器的使用环境为：</p><ul><li>环境温度：-20℃～75℃</li><li> 相对湿度：&lt; 85%</li><li> 无腐蚀性气体</li><li> 无强电磁场干扰和强振动、冲击源</li><li>传感器可运行工业设备现场  </li></ul><h1 id="4-在什么时间状况下使用它？"><a href="#4-在什么时间状况下使用它？" class="headerlink" title="4.在什么时间状况下使用它？"></a>4.在什么时间状况下使用它？</h1><h1 id="5-为什么要用它？"><a href="#5-为什么要用它？" class="headerlink" title="5.为什么要用它？"></a>5.为什么要用它？</h1><p>ZD-710振动传感器具有以下的突出优点：</p><ul><li>蓝牙 4.0 Ble 传输，可直接连接苹果和安卓系列手机、平板，进行点检工作</li><li> 无线采集，避免布线施工</li><li> 可采加速度、速度、位移及温度信号的总值和波形</li><li> 采样频率最高达 12.8KHz，可分析轴承故障</li><li> 内置可充锂电池，可连续使用 30 小时</li><li> 非接触式红外测温</li><li> H 型磁吸座，可靠吸附平面及曲面</li><li> 工作温度：-20℃～70℃</li><li> 湿度：&lt;90%RH  </li></ul><h1 id="6-怎么用它获取想要的内容？"><a href="#6-怎么用它获取想要的内容？" class="headerlink" title="6.怎么用它获取想要的内容？"></a>6.怎么用它获取想要的内容？</h1><p>测量加速度、速度、位移和设备表面温度的总值和波形</p>]]></content>
    
    
    <categories>
      
      <category>嵌入式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ZD-710振动传感器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot常用注解</title>
    <link href="/posts/9914/"/>
    <url>/posts/9914/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="类名上的注解"><a href="#类名上的注解" class="headerlink" title="类名上的注解"></a>类名上的注解</h1><table><thead><tr><th align="center">注解</th><th align="center">使用位置</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">@RestController</td><td align="center">类名上</td><td align="center">相当于@ResponseBody加@Controller</td></tr><tr><td align="center">@Controller</td><td align="center">类名上</td><td align="center">声明该类时一个SpringMVC Controller 对象</td></tr><tr><td align="center">@Service</td><td align="center">类名上</td><td align="center">声明一个业务处理类（实现非接口类）</td></tr><tr><td align="center">@Repository</td><td align="center">类名上</td><td align="center">声明数据库访问类（实现非接口类）</td></tr><tr><td align="center">@Component</td><td align="center">类名上</td><td align="center">代表其是 Spring 管理类，常用在无法用@Service、@Repository 描述的类上，相当于通用的注解</td></tr><tr><td align="center">@Configuration</td><td align="center">类名上</td><td align="center">声明该类是一个配置类，常与 @Bean 配合使用</td></tr><tr><td align="center">@Resource</td><td align="center">类名上、属性或构造函数参数上</td><td align="center">默认按照 byName 自动注入</td></tr><tr><td align="center">@Autowired</td><td align="center">类名上、属性或构造函数参数上</td><td align="center">默认按照 byType 自动注入</td></tr><tr><td align="center">@RequetsMapping</td><td align="center">类名上或方法上</td><td align="center">如果用在类上，则表明所有响应请求的方法都是以该地址作为父路径的</td></tr><tr><td align="center">@Transactional</td><td align="center">类名上或方法上</td><td align="center">用于处理事务</td></tr><tr><td align="center">@Qualifier</td><td align="center">类名上或属性上</td><td align="center">为 @Bean 指定名称，随后再通过名字引用Bean</td></tr></tbody></table><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p>​    用于返回JSON、XML等数据，但不能返回HTML页面。</p><p>​    相当于注解@ResponseBody 和注解 @Controller 合在一起使用。</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>​    用于标注控制器层，在MVC开发模式中代表 <code>C</code>（控制器）。</p><p>​    主要用于构建MVC模式的程序。</p><h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>​    用于声明一个业务处理类（实现非接口类），用于标记服务层，处理业务逻辑。</p><h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>​    用于标记业务访问层</p><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>​    用于把普通的POJO实例化到 Spring 容器中。</p><p>​    当类不属于注解@ConTroller 和@Service等时，就可以使用注解@Component来标注这个类。</p><p>​    可以配合CommandLineRunner 使用，以便在程序启动后执行一些基础任务。</p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h2><p>​    用于标注配置类，可以由 Spring 容器自动处理。</p><p>​    作为Bean的载体，用来指示一个类声明、一个或者多个@Bean方法，在运行时为这些Bean生成BeanDefinition和服务请求。</p><h2 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h2><p>​    @Resource和@Autowired都可以用来装配Bean，也可以写在字段或者Setter 方法上。</p><h2 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h2><p>​    表示被修饰的类需要注入对象。Spring会扫描所有被 @Autowired 标注的类，然后根据类型在IoC容器中找到匹配的类进行注入。</p><p>​    被@Autowired注解后的类不再需要导入文件。</p><h2 id="RequetsMapping"><a href="#RequetsMapping" class="headerlink" title="@RequetsMapping"></a>@RequetsMapping</h2><p>​    用来处理请求地址映射，用在类或者方法上。如果用在类上，则表示类中的所有响应请求的方法都是以该路径作为父路径的。</p><p>​    该注解的6个属性：</p><ul><li>Params：指定Request中必须包含某些参数值，才让该方法处理。</li><li>Headers：指定Request中必须包含某些指定的header值，才能让该方法处理请求。</li><li>Value：指定请求的实际地址，指定的地址可以是URL template 模式。</li><li>Method：指定请求的Method类型，如GET、POST等。</li><li>Consumes：指定处理请求的提交内容类型Ontent-Type。</li><li>Produces：指定返回的内容类型。只有当 Request 请求头中的Accept 类型中包含该指定类型时才返回。</li></ul><h2 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h2><p>可以用在 接口、借口方法、类、类方法。</p><p>Spring不建议在 接口或者接口方法上使用该注解，因为该注解只有使用在<strong>基于接口的代理</strong>时才会生效。</p><p>如果异常被捕获（<code>try&#123; &#125;catch&#123; &#125;</code>）了，事务就不回滚了。如果想让食物回滚，则必须再往外抛出异常（<code>try&#123; &#125;catch&#123; throw Exception &#125;</code>）。</p><h2 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h2><p>用于标注哪一个实现类才是需要注入的。</p><p>@Qualifier的参数名称为被注入的类中的注解@Service标注的名称。</p><p>@Qualifier和@Autowired一起使用：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-meta">@Qualifier(&quot;articleService&quot;)</span><br></code></pre></div></td></tr></table></figure><h3 id="Resource和-Qualifier的不同"><a href="#Resource和-Qualifier的不同" class="headerlink" title="@Resource和@Qualifier的不同"></a>@Resource和@Qualifier的不同</h3><p>@Resource自带name属性。</p><h1 id="方法名上的注解"><a href="#方法名上的注解" class="headerlink" title="方法名上的注解"></a>方法名上的注解</h1><p>明天再写</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot常用配置说明</title>
    <link href="/posts/33137/"/>
    <url>/posts/33137/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.lixingyong.com/2020/07/16/354bc4457b33051bac610341c3f44549.jpg" alt="354bc4457b33051bac610341c3f44549.jpg"></p><p>Speingboot配置的关键点的整理。</p><span id="more"></span><h1 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h1><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elm"><span class="hljs-title">server</span>.<span class="hljs-keyword">port</span>=9999<br></code></pre></div></td></tr></table></figure><ul><li>修改随机端口</li></ul><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-comment">#随机端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-variable">$&#123;random.int[8080,8999]&#125;</span><br></code></pre></div></td></tr></table></figure><p>随机端口的好处就是：<br>1：如果在同一台服务器上多个服务如果用同一个端口会造成端口冲突<br>2：在微服务项目和开发中，开发人员是不会去记住ip和端口的。我们一般在真实的开发环境下，设置一个随机端口，就不用去管理端口了。也不会造成端口的冲突。</p><h1 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h1><h2 id="yml和properties文件的不同："><a href="#yml和properties文件的不同：" class="headerlink" title="yml和properties文件的不同："></a>yml和properties文件的不同：</h2><ul><li>如果properties和yml都配置：<strong>properties的优先级要高于yml配置</strong>。</li><li>如果两者不同的地方，取并集，相同的部分properties<strong>覆盖</strong>yml中的配置</li></ul><h1 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h1><p>如何做到环境隔离呢？</p><p>新建对应环境隔离的配置文件，命名规则是：<code>applicaiton-xxxx.yml</code> 比如</p><blockquote><p>application.yml  主配置文件<br>application-dev.yml  环境隔离文件—dev 开发环境<br>application-prod.yml 环境隔离文件—prod 生产环境 </p></blockquote><p>激活环境,在主配置文件中<code>application.yml</code> 如下</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment"># 选择环境激活</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br><span class="hljs-comment">#    active: dev</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">prod</span><br></code></pre></div></td></tr></table></figure><h2 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h2><p>因为在开发中，开发环境和生产环境配置（MYSQL、Redis等IP和端口）不同，通过环境隔离的方式就很好的解决这个问题。·</p><p><strong>运行时JAR包指定配置文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs 命令行">java -jar ***.jar --spring.profiles.active&#x3D;prod<br></code></pre></div></td></tr></table></figure><h1 id="自定义属性注入"><a href="#自定义属性注入" class="headerlink" title="自定义属性注入"></a>自定义属性注入</h1><p><strong>前提：这个类必是spring管理的类</strong></p><h2 id="Value注入"><a href="#Value注入" class="headerlink" title="@Value注入"></a>@Value注入</h2><p><code>@Value(“$&#123;key&#125;”)</code> 存在的问题：不具有面向对象的特征。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在配置文件中添加：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment">#自定义属性</span><br><span class="hljs-attr">ksd:</span><br>  <span class="hljs-attr">weixin:</span><br>    <span class="hljs-attr">appid:</span> <span class="hljs-string">xxxxxxxxxxxx</span><br>    <span class="hljs-attr">mcid:</span> <span class="hljs-string">xxxxxxx</span><br>    <span class="hljs-attr">callbackurl:</span> <span class="hljs-string">https://xxxx.xxxxxx.xxxx/callback</span><br>    <span class="hljs-attr">apisecret:</span> <span class="hljs-string">xxxxxxxxxxxxxxxxx</span><br></code></pre></div></td></tr></table></figure><p>注解：<code>@Value(“$&#123;对应配置文件的key&#125;”) </code></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Value(&quot;$&#123;ksd.weixin.appid&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String appid;<br></code></pre></div></td></tr></table></figure><h2 id="ConfigurationProperties注入"><a href="#ConfigurationProperties注入" class="headerlink" title="@ConfigurationProperties注入"></a>@ConfigurationProperties注入</h2><p>具有面向对象特种的属性注入的方式。</p><h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ConfigurationProperties(prefix =&quot;ksd.weixin&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeixinPayProperties</span> </span>&#123;<br>    <span class="hljs-comment">// appid</span><br>    <span class="hljs-keyword">private</span> String appid;<br>    <span class="hljs-comment">// 商户号</span><br>    <span class="hljs-keyword">private</span> String mcid;<br>    <span class="hljs-comment">// 回调地址</span><br>    <span class="hljs-keyword">private</span> String callbackurl;<br>    <span class="hljs-comment">// api私钥</span><br>    <span class="hljs-keyword">private</span> String apisecret;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="自定义属性配置类自动提示"><a href="#自定义属性配置类自动提示" class="headerlink" title="自定义属性配置类自动提示"></a>自定义属性配置类自动提示</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>或者出现红色警告：</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/1624197064219.5ffkbkmetlc0.png" alt="1624197064219"></p><p>springboot确实可以去帮你完成属性和配置文件中的属性自动注入的问题，但是不能在配置文件中<strong>自动提示</strong>。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>参考官网：<a href="https://docs.spring.io/spring-boot/docs/2.4.7/reference/html/appendix-configuration-metadata.html#configuration-metadata-annotation-processor">https://docs.spring.io/spring-boot/docs/2.4.7/reference/html/appendix-configuration-metadata.html#configuration-metadata-annotation-processor</a></p><p>1.在项目的==pom.xml==中配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--把项目中的springboot自定义属性配置类生成一个元素数据文件，这个文件可以生成以后</span><br><span class="hljs-comment">  在未来的配置文件中，我们就达到和官方一致效果，可以自动提示--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>2.重新编译工程</p><p>执行 <code>mvn clean compile</code></p><p>3.在重新打开<code>application.yml</code> 就可以看见自动提示的效果。</p><h1 id="starter"><a href="#starter" class="headerlink" title="starter"></a>starter</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>简化SpringBoot构建配置。</p><p>打包好与常用模块相关的所有 <strong>JAR包</strong> ，并完成<strong>自动配置</strong>，然后组装成Starter。</p><p>在代码开发时，漫画框架的配置，只用关心<strong>业务逻辑</strong>即可。</p><p>starter是一组方便的依赖项描述符，您可以将其包含在您的应用程序中。您可以一站式地获得所需的所有Spring和相关技术，而不必遍历示例代码和复制-粘贴加载依赖关系描述符。</p><h2 id="starter的命名规范："><a href="#starter的命名规范：" class="headerlink" title="starter的命名规范："></a>starter的命名规范：</h2><ul><li>官方的是<code>spring-boot-starter-xxxx</code></li><li>第三方的名的是 <code>xxxx-boot-starter</code></li></ul><h2 id="常用的Starter"><a href="#常用的Starter" class="headerlink" title="常用的Starter"></a>常用的Starter</h2><table><thead><tr><th align="center">Stater</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">spring-boot-starter-web</td><td align="center">用于构建Web。包含RESTful风格框架，SpringMVC和默认的嵌入式容器Tomcat</td></tr><tr><td align="center">spring-boot-starter-test</td><td align="center">用于测试</td></tr><tr><td align="center">spring-boot-starter-jdbc</td><td align="center">传统的JDBC。轻量级应用可以使用，学习成本低，但最好使用JPA或Mybatis</td></tr><tr><td align="center">spring-boot-starter-thymeleaf</td><td align="center">支持thymeleaf模版</td></tr><tr><td align="center">spring-boot-starter-mail</td><td align="center">支持Java Mail、Spring Email发送邮件</td></tr><tr><td align="center">spring-boot-starter-integration</td><td align="center">Spring 框架创建的一个API，面向企业应用集成（EAI）</td></tr><tr><td align="center">spring-boot-starter-data-redis</td><td align="center">通过Spring Data Redis、Redis Client使用Redis</td></tr><tr><td align="center">spring-boot-starter-websocket</td><td align="center">相对于非持久的协议HTTP，websocket是一个持久化的协议</td></tr><tr><td align="center">spring-boot-starter-security</td><td align="center">使用Spring Security进行身份验证和授权</td></tr></tbody></table><h2 id="第三方的和官方的差异是："><a href="#第三方的和官方的差异是：" class="headerlink" title="第三方的和官方的差异是："></a><strong>第三方的和官方的差异是：</strong></h2><p>答案：<strong>就是版本的管理</strong></p><h4 id="官方的版本全部根据parent自动匹配"><a href="#官方的版本全部根据parent自动匹配" class="headerlink" title="官方的版本全部根据parent自动匹配"></a>官方的版本全部根据parent自动匹配</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="第三方（自定义的）必须一定要指定版本"><a href="#第三方（自定义的）必须一定要指定版本" class="headerlink" title="第三方（自定义的）必须一定要指定版本"></a>第三方（自定义的）必须一定要指定版本</h4><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs XML"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>springBoot知识整理</title>
    <link href="/posts/4733/"/>
    <url>/posts/4733/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.lixingyong.com/images/2020/07/16/---4k3840x2160.jpg" alt="---4k3840x2160.jpg"></p><span id="more"></span><h1 id="Springboot的优势"><a href="#Springboot的优势" class="headerlink" title="Springboot的优势"></a>Springboot的优势</h1><h2 id="Spring的不足"><a href="#Spring的不足" class="headerlink" title="Spring的不足"></a>Spring的不足</h2><blockquote><ul><li>大量的xml文件，配置相当繁琐</li><li>整合第三方框架的配置相当复杂</li><li>低效的开发效率和部署效率等问题</li><li>依赖外部的web服务器</li><li>日志管理需要依赖</li><li>一堆的依赖在maven中pom.xml中</li></ul></blockquote><h2 id="Springboot的优点"><a href="#Springboot的优点" class="headerlink" title="Springboot的优点"></a>Springboot的优点</h2><blockquote><ul><li>创建独立的Spring应用程序</li><li><strong>直接嵌入Tomcat、Jetty或Undertow（无需部署WAR文件）</strong></li><li>提供固执己见的“启动程序”依赖项以简化构建配置</li><li><strong>尽可能自动配置Spring和第三方库</strong></li><li>提供生产准备功能，如度量、运行状况检查和外部化配置</li><li><strong>完全没有代码生成，也不需要XML配置</strong></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>给hexo文章生成永久链接-permalink</title>
    <link href="/posts/50503/"/>
    <url>/posts/50503/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.lixingyong.com/2020/07/16/90f40f18eaf89dec19e34cb006c95331.jpg" alt="90f40f18eaf89dec19e34cb006c95331.jpg"></p><p>当自己的博客被自己或者朋友分享出去的时候，分享网址会出现转义现象（例如：<a href="https://septzhang.xyz//%E5%B0%B1%E6%98%AF%E8%BF%99%E6%A0%B7%E5%AD%90%E7%9A%84%E4%B8%AD%E6%96%87%E8%BD%AC%E4%B9%89%E5%BE%88%E9%9A%BE%E7%9C%8B%EF%BC%89%E9%9D%9E%E5%B8%B8%E4%B8%8D%E7%BE%8E%E8%A7%82%EF%BC%8C%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8Hexo-abbrlink%E6%8F%92%E4%BB%B6%E5%8F%AF%E4%BB%A5%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96SEO%E3%80%82">https://septzhang.xyz//%E5%B0%B1%E6%98%AF%E8%BF%99%E6%A0%B7%E5%AD%90%E7%9A%84%E4%B8%AD%E6%96%87%E8%BD%AC%E4%B9%89%E5%BE%88%E9%9A%BE%E7%9C%8B）非常不美观，通过使用Hexo-abbrlink插件可以完美解决，并且可以优化SEO。</a></p><span id="more"></span><h1 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h1><p>当自己的博客被自己或者朋友分享出去的时候，分享网址会出现转义现象（例如：<a href="https://septzhang.xyz//%E5%B0%B1%E6%98%AF%E8%BF%99%E6%A0%B7%E5%AD%90%E7%9A%84%E4%B8%AD%E6%96%87%E8%BD%AC%E4%B9%89%E5%BE%88%E9%9A%BE%E7%9C%8B%EF%BC%89%E9%9D%9E%E5%B8%B8%E4%B8%8D%E7%BE%8E%E8%A7%82%EF%BC%8C%E9%80%9A%E8%BF%87%E4%BD%BF%E7%94%A8Hexo-abbrlink%E6%8F%92%E4%BB%B6%E5%8F%AF%E4%BB%A5%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%8F%AF%E4%BB%A5%E4%BC%98%E5%8C%96SEO%E3%80%82">https://septzhang.xyz//%E5%B0%B1%E6%98%AF%E8%BF%99%E6%A0%B7%E5%AD%90%E7%9A%84%E4%B8%AD%E6%96%87%E8%BD%AC%E4%B9%89%E5%BE%88%E9%9A%BE%E7%9C%8B）非常不美观，通过使用Hexo-abbrlink插件可以完美解决，并且可以优化SEO。</a></p><h1 id="啰嗦两句"><a href="#啰嗦两句" class="headerlink" title="啰嗦两句"></a>啰嗦两句</h1><p>Hexo默认的静态URL格式是 <code>:year/:month/:day/:title</code>，也就是按照年、月、日、标题来生成固定链接的。如<code>http://xxx.yy.com/2021/06/014/hello-world</code>。</p><h1 id="永久链接是啥"><a href="#永久链接是啥" class="headerlink" title="永久链接是啥"></a>永久链接是啥</h1><p>看一下<a href="https://hexo.io/zh-cn/docs/permalinks.html">永久链接（Permalinks） | Hexo</a>的解释，在站点的<code>_config.yml</code>中，生成的文章链接默认为：</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">permalink:</span> <span class="hljs-string">:year/:month/:day/:title/</span><br><span class="hljs-attr">permalink_defaults:</span> <br></code></pre></div></td></tr></table></figure><p>因为文章的<strong>title</strong>为中文，分享是的url含有中文，所以出现转义现象。</p><h1 id="使用Hexo-abbrlink插件"><a href="#使用Hexo-abbrlink插件" class="headerlink" title="使用Hexo-abbrlink插件"></a>使用Hexo-abbrlink插件</h1><p>使用 hexo-abbrlink 插件可以完美解决，具体使用方法如下：</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>cnpm环境</p><p>使用npm也行，但是注意网络问题。</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="使用cnpm安装插件包"><a href="#使用cnpm安装插件包" class="headerlink" title="使用cnpm安装插件包"></a>使用cnpm安装插件包</h3><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">cnpm install hexo-abbrlink <span class="hljs-comment">--save</span><br></code></pre></div></td></tr></table></figure><h3 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改<code>_config.yml</code>文件</h3><p>修改<code>_config.yml</code>文件中的配置项（记得把原来的<code>permalink:</code>删除掉）:</p><figure class="highlight yml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yml"><span class="hljs-comment">#设置永久链接</span><br><span class="hljs-attr">permalink:</span> <span class="hljs-string">posts/:abbrlink.html</span>  <span class="hljs-comment"># 此处可以自己设置，也可以直接使用 :/abbrlink</span><br><span class="hljs-attr">abbrlink:</span><br>    <span class="hljs-attr">alg:</span> <span class="hljs-string">crc16</span>   <span class="hljs-comment">#算法： crc16(default) and crc32</span><br>    <span class="hljs-attr">rep:</span> <span class="hljs-string">dec</span>     <span class="hljs-comment">#进制： dec(default) and hex</span><br></code></pre></div></td></tr></table></figure><h3 id="关于插件设置"><a href="#关于插件设置" class="headerlink" title="关于插件设置"></a>关于插件设置</h3><p>Abbrlink插件拥有两项设置选项:</p><ul><li><code>alg</code>: 算法(目前支持<code>crc16</code>和<code>crc32</code>算法，默认值是<code>crc16</code>)</li><li><code>rep</code>: 形式(生成的链接可以是十六进制格式也可以是十进制格式，默认值是十进制格式)</li></ul><h3 id="执行hexo-g命令"><a href="#执行hexo-g命令" class="headerlink" title="执行hexo g命令"></a>执行<code>hexo g</code>命令</h3><figure class="highlight subunit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs subunit">title: 给hexo文章生成永久链接-permalink<br>categories:<br>  - - 通识<br><span class="hljs-keyword">tags:</span><br>  - Hexo<br>hide: false<br>mathjax: false<br>index_img: &#x27;https://view.lixingyong.com/images/2020/07/15/--_.jpg&#x27;<br>abbrlink: 50503<br>date: 2021<span class="hljs-string">-06</span><span class="hljs-string">-14</span> 18:55:56<br>updated: 2021<span class="hljs-string">-06</span><span class="hljs-string">-14</span> 18:55:56<br></code></pre></div></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>刚使用这个插件后，阅读人数和评论都会变为0。</li><li>执行<code>hexo g</code> 之后，才会自动生成abbrlink码</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/169492685">SEO优化：Hexo-abbrlink插件生成永久固定链接 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/jingbin_/article/details/80617210?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-3.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-3.control">hexo permalink设置技巧_jingbin_的博客-CSDN博客</a></p><p>感谢上述大佬的方法。</p>]]></content>
    
    
    <categories>
      
      <category>通识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat 在 Javaweb中出现的页面404问题</title>
    <link href="/posts/51242/"/>
    <url>/posts/51242/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.lixingyong.com/images/2020/07/15/--_.jpg" alt="--_.jpg"></p><p>主要是在Javaweb中tomcat的配置出现的问题，但是Springboot就没有出现。</p><p>Spring boot yydsヾ(≧∇≦*)ゝ！！</p><span id="more"></span><h1 id="首先你要确定是不是一个问题"><a href="#首先你要确定是不是一个问题" class="headerlink" title="首先你要确定是不是一个问题"></a>首先你要确定是不是一个问题</h1><h2 id="1-tomcat没有问题"><a href="#1-tomcat没有问题" class="headerlink" title="1.tomcat没有问题"></a>1.tomcat没有问题</h2><p>正常使用，可以访问Model</p><h2 id="2-页面404"><a href="#2-页面404" class="headerlink" title="2.页面404"></a>2.页面404</h2><p>如下图页面，是tomcat的404</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/QQ%E6%88%AA%E5%9B%BE20210614125948.1v036yajfkdc.png" alt="QQ截图20210614125948"></p><h2 id="3-查看IDEA中tomcat配置"><a href="#3-查看IDEA中tomcat配置" class="headerlink" title="3.查看IDEA中tomcat配置"></a>3.查看IDEA中tomcat配置</h2><h3 id="查看方法如下"><a href="#查看方法如下" class="headerlink" title="查看方法如下"></a>查看方法如下</h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/QQ%E6%88%AA%E5%9B%BE20210614130429.6ntqewyzncw0.png" alt="QQ截图20210614130429"></p><p>查看是否缺少<code>Artifacts</code> 即如图的红框类的按钮，你要是有，直接添加就行了，下面是该怎么让他出现的教程。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/QQ%E6%88%AA%E5%9B%BE20210614130304.7ka0buhrdsg0.png" alt="QQ截图20210614130304"></p><h1 id="怎么解决这个问题"><a href="#怎么解决这个问题" class="headerlink" title="怎么解决这个问题"></a>怎么解决这个问题</h1><h2 id="文件标记"><a href="#文件标记" class="headerlink" title="文件标记"></a>文件标记</h2><h3 id="1-检查你的项目中包的标记"><a href="#1-检查你的项目中包的标记" class="headerlink" title="1.检查你的项目中包的标记"></a>1.检查你的项目中包的标记</h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/Snipaste_2021-06-14_13-28-34.77v1sj0tq4g.png" alt="Snipaste_2021-06-14_13-28-34"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/QQ%E6%88%AA%E5%9B%BE20210614132640.f0vmvizuxfc.png" alt="QQ截图20210614132640"></p><h3 id="添加标记"><a href="#添加标记" class="headerlink" title="添加标记"></a>添加标记</h3><h4 id="打开Project-Structure-窗口"><a href="#打开Project-Structure-窗口" class="headerlink" title="打开Project Structure 窗口"></a>打开<code>Project Structure</code> 窗口</h4><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/Snipaste_2021-06-14_13-16-53.p6o7lx79umo.png" alt="Snipaste_2021-06-14_13-16-53"></p><h4 id="按步骤添加web模块"><a href="#按步骤添加web模块" class="headerlink" title="按步骤添加web模块"></a>按步骤添加web模块</h4><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/Snipaste_2021-06-14_13-19-24.25iz7q94arhc.png" alt="Snipaste_2021-06-14_13-19-24"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/Snipaste_2021-06-14_13-19-52.pjv79f9i4ls.png" alt="Snipaste_2021-06-14_13-19-52"></p><h4 id="配置web模块"><a href="#配置web模块" class="headerlink" title="配置web模块"></a>配置web模块</h4><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210614132424238.121qydnonws0.png" alt="image-20210614132424238"></p><h4 id="生成Artifacts"><a href="#生成Artifacts" class="headerlink" title="生成Artifacts"></a>生成Artifacts</h4><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/Snipaste_2021-06-14_13-35-09.6l9h0yeazc80.png" alt="Snipaste_2021-06-14_13-35-09"></p><h4 id="检查包的标记和tomcat配置"><a href="#检查包的标记和tomcat配置" class="headerlink" title="检查包的标记和tomcat配置"></a>检查包的标记和tomcat配置</h4><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image-20210614132757957.48cybj2xn9s0.png" alt="image-20210614132757957"></p><h4 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h4><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/Snipaste_2021-06-14_13-38-20.49je35qx2i00.png" alt="Snipaste_2021-06-14_13-38-20"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
      <tag>JavaWeb</tag>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dependency在pom.xml的配置</title>
    <link href="/posts/52083/"/>
    <url>/posts/52083/</url>
    
    <content type="html"><![CDATA[<p>俺将会把以后添加在maven中的包，整理在这儿，方便以后的开发，要是帮助到您或者有啥建议，请评论留言哦o(<em>////▽////</em>)q</p><p><img src="https://w.wallhaven.cc/full/z8/wallhaven-z8mq8y.jpg"></p><span id="more"></span><h1 id="官方maven仓库查询"><a href="#官方maven仓库查询" class="headerlink" title="官方maven仓库查询"></a>官方maven仓库查询</h1><p><a href="https://mvnrepository.com/?__cf_chl_captcha_tk__=7b326ac7a1b23a108f0fe0546ccaf1ab0b971472-1623555663-0-AXLS--bLir_2QWE2ZSL96PHKkHL-iD0K4dn_Q0btM0DK1XwPoXzbK282eFW4sY3kRUuaIfyOq8GnKpt3F_dRlImFtmF-TliASevb5Xmwt9BSNoX655WedC5xJd5ElFhAK1cN3T4OepKk0wAMRPkgW2XcIse8v0zmKYQAQojLorL_yIwIS5ppoXFRK0l2wREIkMNwzz4qjU0o2snjL_Ejw3OGUJEDQtiRHsqWQEsYlzQyRTgW5jx5tv3QSLSOh-plMS_CubMYM-nuXhjNhuEMArOLo3j8BXMgQ6lrHvf10OfeBztyL07HUQWglBVx28fwArHLb_hdl-5hzB5NGhiZlxHrz-TKEpcVhZq_D8lmnr7dBrbfJhLUcP3xvXULZb1r_6cm_iSlMytCZPAaFqC2PAeO9FEhn9zbKQyxaX9OwRijt4yCSDdiy5fcK96-oTnCwIc1adf9BHi7sPgYozFJ7NvV2cdY3LdjW9F86dCPAkGj-vIDiABXOE-OZfmtlUWbu0rD2oSPd75CBCsCFg3oGH0T2DwOonGu88X0ubEn0EWLezqwrYzJk3elmqal_dVwoLyl8YGGMnMA7IS4AtRX9EwBuVxQ-B8P7Q1NkF5hGqUraoiICxu3dOW4atPm93PCIXabhoHe2FcMMxzsglbqMM7VvlQdEu9QLEjZuPfvoyod">Maven Repository: Search/Browse/Explore (mvnrepository.com)</a></p><h1 id="SSM相关"><a href="#SSM相关" class="headerlink" title="SSM相关"></a>SSM相关</h1><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h2 id="Mybatis-plus"><a href="#Mybatis-plus" class="headerlink" title="Mybatis-plus"></a>Mybatis-plus</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--mybatis-plus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="Spring-Boot相关"><a href="#Spring-Boot相关" class="headerlink" title="Spring Boot相关"></a>Spring Boot相关</h1><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><blockquote><p>JDBC 指 Java 数据库连接，是一种标准Java应用编程接口（ JAVA API），用来连接 Java 编程语言和广泛的数据库。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="数据源druid"><a href="#数据源druid" class="headerlink" title="数据源druid"></a>数据源druid</h2><blockquote><p>Druid首先是一个数据库连接池。Druid是目前最好的数据库连接池，在功能、性能、扩展性方面，都超过其他数据库连接池，包括DBCP、C3P0、BoneCP、Proxool、JBoss DataSource。Druid已经在阿里巴巴部署了超过600个应用，经过一年多生产环境大规模部署的严苛考验。Druid是阿里巴巴开发的号称为监控而生的数据库连接池！</p></blockquote><p>参考： <a href="https://blog.csdn.net/past__time/article/details/80486117">Druid是什么和Druid的介绍_past__time的博客-CSDN博客_druid</a></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 我这里用的数据源使druid --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>Lombok是一个可以通过简单的注解形式来帮助我们简化消除一些必须有但显得很臃肿的Java代码的工具，通过使用对应的注解，可以在编译源码的时候生成对应的方法。</p><p>简洁代码，便捷开发。</p><p>官方地址：<a href="https://projectlombok.org/">Project Lombok</a></p><p>github地址：<a href="https://github.com/projectlombok/lombok">GitHub - projectlombok/lombok: Very spicy additions to the Java programming language.</a></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>IDEA中也要添加Lombok插件配合使用哈。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>使用参考：<a href="https://www.jianshu.com/p/365ea41b3573">lombok - 简书 (jianshu.com)</a></p><p>更多参考官方文档：<a href="https://projectlombok.org/features/all">Stable (projectlombok.org)</a></p><h2 id="log4j"><a href="#log4j" class="headerlink" title="log4j"></a>log4j</h2><blockquote><p>Log4j是Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，我们可以控制每条日志的输出格式；只需要通过一个配置文件就可以灵活的配置，而不需要修改任何代码。</p></blockquote><p>参考： <a href="https://blog.csdn.net/Lzy410992/article/details/115631414">Log4j的配置与使用详解_龙源IT 的博客-CSDN博客_log4j2 配置详解</a></p><p>使用配置参考我的博客： <a href="%E5%94%89%E2%95%AE(%E2%95%AF%E2%96%BD%E2%95%B0)%E2%95%AD%E8%BF%98%E6%B2%A1%E5%86%99%E5%91%A2">log4j的配置</a></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="junit"><a href="#junit" class="headerlink" title="junit"></a>junit</h2><blockquote><p><a href="https://www.w3cschool.cn/junit"><img src="https://atts.w3cschool.cn/attachments/cover/cover_junit.png?t=1542195265&imageView2/1/w/150/h/84" alt="jUnit 教程"></a></p><p>JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。 </p></blockquote><p>使用参考： <a href="https://www.w3cschool.cn/junit/">jUnit 教程_w3cschool</a></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="资源导出配置"><a href="#资源导出配置" class="headerlink" title="资源导出配置"></a>资源导出配置</h2><p>防止我们资源导出失败的问题,及文件在<code>target</code>中不存在文件。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resources，来防止我们资源导出失败的问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--不加的时候,有时也会报错,idea默认导出这个--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--必须加这个 resource --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.yml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;/plugins&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/build&gt;--&gt;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>Maven</tag>
      
      <tag>配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven报错，surefire插件找不到了</title>
    <link href="/posts/52081/"/>
    <url>/posts/52081/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/fatalitePID61597814by212a.jpg" alt="fatalitePID61597814by212a.jpg"></p><p>项目报错，解决后，记录一下o_O</p><span id="more"></span><h1 id="报错信息："><a href="#报错信息：" class="headerlink" title="报错信息："></a>报错信息：</h1><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs log">Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.22.2:test (default-test) on project weixinapp: There are test failures.<br><br>Please refer to F:\Java\project\bookshelf\bookshelf_back\weixinapp\target\surefire-reports for the ndividual test results.<br>Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.<br><br></code></pre></div></td></tr></table></figure><p>![image-20210520151108369](C:\Users\Sept Zhang\AppData\Roaming\Typora\typora-user-images\image-20210520151108369.png)</p><h1 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h1><h2 id="1-插入到-lt-plugins-gt-中"><a href="#1-插入到-lt-plugins-gt-中" class="headerlink" title="1.插入到&lt;plugins&gt;中"></a>1.插入到<code>&lt;plugins&gt;</code>中</h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--maven的surefire--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.22.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="2刷新Maven，运行项目测试"><a href="#2刷新Maven，运行项目测试" class="headerlink" title="2刷新Maven，运行项目测试"></a>2刷新Maven，运行项目测试</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maven</tag>
      
      <tag>错误日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java远程办公-妈妈再也不用担心我不带电脑没法秃头了</title>
    <link href="/posts/52099/"/>
    <url>/posts/52099/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.moezx.cc/images/2018/05/13/Paper-Planes-Adventure43844149_by_hk.jpg" alt="Paper-Planes-Adventure43844149_by_hk.jpg"></p><p>将借助github上的开源项目–<code>code-server</code> ,完成Java代码的web端Coding工作，但是现在仅限编程的初级阶段，高级阶段我还没有完成配置。(*╯3╰)</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>奇怪的知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>奇怪的知识|B站超速播放</title>
    <link href="/posts/52084/"/>
    <url>/posts/52084/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20170306_blue_sunrise_007_2560_by_macrebisz-db1bzsp.jpg" alt="20170306_blue_sunrise_007_2560_by_macrebisz-db1bzsp.jpg"></p><p>给大家分享一个任意速度看哔哩哔哩视频的方法。</p> <span id="more"></span><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>1.谷歌浏览器按F12</p><p>2.点选<code>console</code></p><p>3.输入<code>document.querySelector(&#39;video&#39;).playbackRate = 3;</code> （3是自己想调节的速度）。</p><p>4.回车</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image.1mcg7bfqw2dc.png" alt="image"></p><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>本人试过了，最新的 **Microsoft Edge **也是可以的，欢迎大家测试一下其他的浏览器或者网站，补充在我的评论区哦 (≧O≦)〃嗷~</p>]]></content>
    
    
    <categories>
      
      <category>通识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>奇怪的知识</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security 帮你快速权限划分</title>
    <link href="/posts/52086/"/>
    <url>/posts/52086/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/tumblr_p127vqRqt91szfkqdo1_1280.png" alt="tumblr_p127vqRqt91szfkqdo1_1280.png"></p><p>整理了Spring Security的使用和配置，方便以后开发使用o(￣▽￣)ｄ</p><span id="more"></span><h2 id="编写-Spring-Security-配置类"><a href="#编写-Spring-Security-配置类" class="headerlink" title="编写 Spring Security 配置类"></a>编写 Spring Security 配置类</h2><p>参考官网：<a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a>  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.*;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.*;<br><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;<br>        InMemoryUserDetailsManager manager = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();<br>        manager.createUser(User.withDefaultPasswordEncoder().username(<span class="hljs-string">&quot;user&quot;</span>).password(<span class="hljs-string">&quot;password&quot;</span>).roles(<span class="hljs-string">&quot;USER&quot;</span>).build());<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//来自官网：https://docs.spring.io/spring-security/site/docs/5.4.6/reference/html5/#jc</span><br></code></pre></div></td></tr></table></figure><h2 id="编写基础配置类"><a href="#编写基础配置类" class="headerlink" title="编写基础配置类"></a>编写基础配置类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurity ConfigurerAdapter;<br><span class="hljs-meta">@EnableWebSecurity</span> <span class="hljs-comment">// 开启WebSecurity模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="定制请求的授权规则"><a href="#定制请求的授权规则" class="headerlink" title="定制请求的授权规则"></a>定制请求的授权规则</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">// 定制请求的授权规则</span><br>    <span class="hljs-comment">// 首页所有人可以访问</span><br>    http.authorizeRequests().antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>    .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>    .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>    .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="在-configure-方法中加入以下配置，开启自动配置的登录功能！"><a href="#在-configure-方法中加入以下配置，开启自动配置的登录功能！" class="headerlink" title="在 configure() 方法中加入以下配置，开启自动配置的登录功能！"></a>在 configure() 方法中加入以下配置，开启自动配置的登录功能！</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 开启自动配置的登录功能</span><br><span class="hljs-comment">// /login 请求来到登录页</span><br><span class="hljs-comment">// /login?error 重定向到这里表示登录失败</span><br>http.formLogin();<br></code></pre></div></td></tr></table></figure><p>定义认证规则，重写 <code>configure(AuthenticationManagerBuilder auth)</code> 方法  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//定义认证规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//在内存中定义，也可以在jdbc中去拿....</span><br>    <span class="hljs-comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span><br>    <span class="hljs-comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密</span><br>    码进行某种方式加密<br>    <span class="hljs-comment">//spring security 官方推荐的是使用bcrypt加密方式。</span><br>        auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> BCryptPasswordEncoder())<br>    .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>    .and()<br>    .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>    .and()<br>    .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="权限控制和注销"><a href="#权限控制和注销" class="headerlink" title="权限控制和注销"></a>权限控制和注销</h1><h2 id="开启自动配置的注销的功能"><a href="#开启自动配置的注销的功能" class="headerlink" title="开启自动配置的注销的功能"></a>开启自动配置的注销的功能</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//定制请求的授权规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br><span class="hljs-comment">//....</span><br><span class="hljs-comment">//开启自动配置的注销的功能</span><br><span class="hljs-comment">// /logout 注销请求</span><br>http.logout();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>他注销成功后，依旧可以跳转到首页  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span><br>http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></div></td></tr></table></figure><h1 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h1><h2 id="开启记住我功能"><a href="#开启记住我功能" class="headerlink" title="开启记住我功能"></a>开启记住我功能</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//定制请求的授权规则</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">//。。。。。。。。。。。</span><br>    <span class="hljs-comment">//记住我</span><br>    http.rememberMe();<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>登录成功后，将cookie发送给浏览器保存，以后登录带上这个cookie，只要通过检查就可以<br>免登录了。如果点击注销，则会删除这个cookie，具体的原理我们在JavaWeb阶段都讲过了，这里<br>就不在多说了！  </p><h1 id="定制登录页"><a href="#定制登录页" class="headerlink" title="定制登录页"></a>定制登录页</h1><p>在刚才的登录页配置后面指定 loginpage  </p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">http.formLogin().loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>);<br></code></pre></div></td></tr></table></figure><p>然后前端也需要指向我们自己定义的 login请求  </p><h1 id="完整配置代码"><a href="#完整配置代码" class="headerlink" title="完整配置代码"></a>完整配置代码</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;<br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br>    <span class="hljs-comment">//定制请求的授权规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.authorizeRequests().antMatchers(<span class="hljs-string">&quot;/&quot;</span>).permitAll()<br>        .antMatchers(<span class="hljs-string">&quot;/level1/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip1&quot;</span>)<br>        .antMatchers(<span class="hljs-string">&quot;/level2/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip2&quot;</span>)<br>        .antMatchers(<span class="hljs-string">&quot;/level3/**&quot;</span>).hasRole(<span class="hljs-string">&quot;vip3&quot;</span>);<br>        <span class="hljs-comment">//开启自动配置的登录功能：如果没有权限，就会跳转到登录页面！</span><br>        <span class="hljs-comment">// /login 请求来到登录页</span><br>        <span class="hljs-comment">// /login?error 重定向到这里表示登录失败</span><br>        http.formLogin()<br>        .usernameParameter(<span class="hljs-string">&quot;username&quot;</span>)<br>        .passwordParameter(<span class="hljs-string">&quot;password&quot;</span>)<br>        .loginPage(<span class="hljs-string">&quot;/toLogin&quot;</span>)<br>        .loginProcessingUrl(<span class="hljs-string">&quot;/login&quot;</span>); <span class="hljs-comment">// 登陆表单提交请求</span><br>        <span class="hljs-comment">//开启自动配置的注销的功能</span><br>        <span class="hljs-comment">// /logout 注销请求</span><br>        <span class="hljs-comment">// .logoutSuccessUrl(&quot;/&quot;); 注销成功来到首页</span><br>        http.csrf().disable();<span class="hljs-comment">//关闭csrf功能:跨站请求伪造,默认只能通过post方式提交</span><br>        <span class="hljs-comment">//logout请求</span><br>        http.logout().logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-comment">//记住我</span><br>        http.rememberMe().rememberMeParameter(<span class="hljs-string">&quot;remember&quot;</span>);<br>    &#125; <span class="hljs-comment">//定义认证规则</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>    <span class="hljs-comment">//在内存中定义，也可以在jdbc中去拿....</span><br>    <span class="hljs-comment">//Spring security 5.0中新增了多种加密方式，也改变了密码的格式。</span><br>    <span class="hljs-comment">//要想我们的项目还能够正常登陆，需要修改一下configure中的代码。我们要将前端传过来的密码进行某种方式加密</span><br>    <span class="hljs-comment">//spring security 官方推荐的是使用bcrypt加密方式。</span><br>    auth.inMemoryAuthentication().passwordEncoder(<span class="hljs-keyword">new</span> BCryptPasswordEncoder())<br>    .withUser(<span class="hljs-string">&quot;kuangshen&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>    .and()<br>    .withUser(<span class="hljs-string">&quot;root&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>,<span class="hljs-string">&quot;vip3&quot;</span>)<br>    .and()<br>    .withUser(<span class="hljs-string">&quot;guest&quot;</span>).password(<span class="hljs-keyword">new</span> BCryptPasswordEncoder().encode(<span class="hljs-string">&quot;123456&quot;</span>)).roles(<span class="hljs-string">&quot;vip1&quot;</span>,<span class="hljs-string">&quot;vip2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>遇见狂神说</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
      <tag>Spring Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可恶嗷，口又被占用了</title>
    <link href="/posts/52087/"/>
    <url>/posts/52087/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/DEEMOShatteredMemoriesPID55501293bysishenfan.jpg" alt="DEEMOShatteredMemoriesPID55501293bysishenfan.jpg"></p><p>可恶嗷，又有端口被占用了，看我的大宝贝吧 ( ‵▽′)ψ</p><p>就两步解决。</p><span id="more"></span><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="管理员打开命令提示符"><a href="#管理员打开命令提示符" class="headerlink" title="管理员打开命令提示符"></a>管理员打开命令提示符</h2><h2 id="查询8080端口，得到进程pid"><a href="#查询8080端口，得到进程pid" class="headerlink" title="查询8080端口，得到进程pid"></a>查询8080端口，得到进程pid</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p><code>netstat -nao | findstr “8080”</code></p><p><strong>8080</strong>换成你的端口号</p><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image.5prd4euqt7c0.png" alt="image"></p><h2 id="关闭对应的pid的进程"><a href="#关闭对应的pid的进程" class="headerlink" title="关闭对应的pid的进程"></a>关闭对应的pid的进程</h2><h3 id="指令-1"><a href="#指令-1" class="headerlink" title="指令"></a>指令</h3><p><code>taskkill /pid 12696 /F</code></p><p>10736换成你的pid</p><h3 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image.3695i0mu2kc0.png" alt="image"></p><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="查询pid"><a href="#查询pid" class="headerlink" title="查询pid"></a>查询pid</h2><p>但往往很多时候只需要查看某个端口的使用情况，它到底被那个进程（对应PID）占用了，或者你还需要把它Kill掉。如果你在Windows操作系统，你可以使用netstat命令来查询PID，然后可以打开任务管理器，查看这个PID对应的进程名；如果PID没有显示，菜单== 》查看 == 》选择列== 》选中PID即可；得知进程后，我们可以将进程杀掉。下面我简单描述一下我所了解的在Windows和Linux系统下处理方式。（假如我们需要确定谁占用了我们的8080端口）</p><h2 id="关闭进程"><a href="#关闭进程" class="headerlink" title="关闭进程"></a>关闭进程</h2><p>你看到是PID为3017的进程占用了8080端口，如果进一步你想知道它的进程名称，你可以使用如下命令：tasklist | findstr “3017” 如果你想杀死这个进程，你当然可以用前面描述的那种方法，在任务管理器里把它KILL了，但如果你喜欢高效一点，那么用taskkill命令就可以了。taskkill /pid 3017 /F那么这个进程就灰灰湮灭了</p>]]></content>
    
    
    <categories>
      
      <category>通识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>windows</tag>
      
      <tag>dos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>为啥要用tomcat</title>
    <link href="/posts/52088/"/>
    <url>/posts/52088/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/withthefairiesPID65578040bykieed.jpg" alt="withthefairiesPID65578040bykieed.jpg"></p><p>以前作为一个应用型学习人才，我一直再用tomcat，却忘记了为啥要用 ٩(๑òωó๑)۶</p><p>于是就水一篇博客记一记吧 (*╯3╰)</p><span id="more"></span><h1 id="tomcat的作用"><a href="#tomcat的作用" class="headerlink" title="tomcat的作用"></a>tomcat的作用</h1><p>​        不使用tomcat也可以打开html页面，但是可以在浏览器的地址里看到 文件路径的格式（file:///F:/参考文档/how2j_offline_2020.01.31/default.html)，这是是通过打开本地文件的形式打开的。</p><p>​        因为tomcat本身是一个<strong>web 服务器</strong>，所以我们可以把html文件部署在这个web服务器上，所以就可以通过ip访问了。</p><h1 id="修改tomcat端口号"><a href="#修改tomcat端口号" class="headerlink" title="修改tomcat端口号"></a>修改tomcat端口号</h1><h2 id="修改server-xml"><a href="#修改server-xml" class="headerlink" title="修改server.xml"></a>修改server.xml</h2><p>tomcat的端口配置相关信息在 server.xml中。</p><p>用记事本打开 <code>*\tomcat\conf\server.xml</code>，找到以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Connector</span> <span class="hljs-attr">port</span>=<span class="hljs-string">&quot;8080&quot;</span> <span class="hljs-attr">protocol</span>=<span class="hljs-string">&quot;HTTP/1.1&quot;</span>   &gt;</span><br></code></pre></div></td></tr></table></figure><p>修改即可</p><h2 id="重启tomcat"><a href="#重启tomcat" class="headerlink" title="重启tomcat"></a>重启tomcat</h2><h1 id="tomcat常见错误"><a href="#tomcat常见错误" class="headerlink" title="tomcat常见错误"></a>tomcat常见错误</h1><p>我参考的文档已经很全了，就只贴一个链接]吧</p><p><a href="https://how2j.cn/k/tomcat/tomcat-faq/1132.html">Tomcat系列教材 （三）- 启动和使用过程中的各种问题排查 (how2j.cn)</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://how2j.cn/k/tomcat/tomcat-tutorial/541.html?p=86088">How2J</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Swagger的注解，让我焦急</title>
    <link href="/posts/52085/"/>
    <url>/posts/52085/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/yande.re366545akabeisoft3akizora_momijidressgame_cginochi_no_spareshukugawa_meguri.png" alt="yande.re366545akabeisoft3akizora_momijidressgame_cginochi_no_spareshukugawa_meguri.png"></p><p>前几天和我一起搞项目的前端项目，因为前后端对接接口的问题吵了一架。两个脾气这么好的同志竟然找起来了 (＞﹏＜)</p><p>可见一个好的Swagger注解，对生命健康是多么重要 ┗|｀O′|┛ 嗷~~</p><p>以下是我自己整理的常用的注解和使用方法 (～￣(OO)￣)ブ</p><span id="more"></span><h1 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h1><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--swagger2--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--swagger-ui--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><h1 id="SwaggerConfig-java文件"><a href="#SwaggerConfig-java文件" class="headerlink" title="SwaggerConfig.java文件"></a><code>SwaggerConfig.java</code>文件</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.books.bookshelf.middle.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableSwagger2</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SwaggerConfig</span> </span>&#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建API应用</span><br><span class="hljs-comment"> * apiInfo() 增加API相关信息</span><br><span class="hljs-comment"> * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，</span><br><span class="hljs-comment"> * 本例采用指定扫描的包路径来定义指定要建立API的目录。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Docket <span class="hljs-title">createRestApi</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Docket(DocumentationType.SWAGGER_2)<br>.apiInfo(apiInfo())<br>.select()<br>.apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com.books.bookshelf.middle.controller&quot;</span>))<br>.paths(PathSelectors.any())<br>.build();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建该API的基本信息（这些基本信息会展现在文档页面中）</span><br><span class="hljs-comment"> * 访问地址：http://项目实际地址/swagger-ui.html</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title">apiInfo</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ApiInfoBuilder()<br>.title(<span class="hljs-string">&quot;测试 APIs&quot;</span>)<br>.description(<span class="hljs-string">&quot;测试api接口文档(还没写)&quot;</span>)<br>.termsOfServiceUrl(<span class="hljs-string">&quot;http://www.baidu.com&quot;</span>)<br>.version(<span class="hljs-string">&quot;1.0&quot;</span>)<br>.build();<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><h2 id="ApiModel-“”"><a href="#ApiModel-“”" class="headerlink" title="@ApiModel(“”)"></a>@ApiModel(“”)</h2><p>作用于实体类级别</p><h2 id="ApiModelProperty-“”"><a href="#ApiModelProperty-“”" class="headerlink" title="@ApiModelProperty(“”)"></a>@ApiModelProperty(“”)</h2><p>作用于实体类属性级别</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ApiModel(&quot;书单实体类&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookIsbnEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <br><span class="hljs-meta">@ApiModelProperty(&quot;主键，自增&quot;)</span><br><span class="hljs-keyword">private</span> Integer bookId;<br>    ......<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><h2 id="Api-description-“”"><a href="#Api-description-“”" class="headerlink" title="@Api(description = “”)"></a>@Api(description = “”)</h2><p>作用于Controller类级别</p><h2 id="ApiParam-“”"><a href="#ApiParam-“”" class="headerlink" title="@ApiParam(“”)"></a>@ApiParam(“”)</h2><p>作用于属性级别</p><h2 id="ApiOperation-“”"><a href="#ApiOperation-“”" class="headerlink" title="@ApiOperation(“”)"></a>@ApiOperation(“”)</h2><p>作用于方法级别，用于描述一个Swagger operation。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Api(description = &quot;书籍记录信息&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookListController</span> </span>&#123;<br>    <br>    <span class="hljs-meta">@ApiOperation(value =&quot;跟据booklist的id查询实体类&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">info</span><span class="hljs-params">(<span class="hljs-meta">@ApiParam(&quot;书籍主键ID&quot;)</span><span class="hljs-meta">@PathVariable(&quot;bookListId&quot;)</span> Integer bookListId)</span></span>&#123;<br>BookListEntity bookList = bookListService.getById(bookListId);<br><br>        <span class="hljs-keyword">return</span> R.ok().put(<span class="hljs-string">&quot;bookList&quot;</span>, bookList);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://docs.servicecomb.io/java-chassis/zh_CN/build-provider/swagger-annotation/">使用 Swagger 注解 - ServiceComb Java Chassis 开发指南</a></p><p><a href="https://blog.csdn.net/qq_38141367/article/details/105185246">swagger常用注解和获取请求参数注解_幽雅兔的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/zhukaixin/p/9324239.html">swagger注释API详细说明 - 胖陀螺的春天 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
      <tag>Swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目热不热</title>
    <link href="/posts/53685/"/>
    <url>/posts/53685/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.moezx.cc/images/2018/01/14/03976_theeleventhhour_3840x2160.jpg" alt="03976_theeleventhhour_3840x2160.jpg"></p><p>项目的热部署</p><p>本文项主要是目的热部署的过程，及配置文件。</p><span id="more"></span><h1 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h1><h2 id="打开IDEA的IDEA-的自动部署（静态）"><a href="#打开IDEA的IDEA-的自动部署（静态）" class="headerlink" title="打开IDEA的IDEA 的自动部署（静态）"></a>打开IDEA的IDEA 的自动部署（静态）</h2><p>在设置中打开 <code>Build Project automatically</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.610n4hriaro0.png" alt="image"></p><h2 id="2-按下"><a href="#2-按下" class="headerlink" title="2.按下"></a>2.按下</h2><p>同时按下<code>Ctrl+Alt+shift+/</code> 四个键，选择<code>Registry</code> ,在对话框中勾选下图的的选项框。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.5bxfjxj6vdc0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.6lz66xsklc80.png" alt="image"></p><h2 id="3-配置-pom-文件"><a href="#3-配置-pom-文件" class="headerlink" title="3.配置 pom 文件"></a>3.配置 pom 文件</h2><p>在项目的<code>pom.xml</code>中，做以下配置。</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加热部署--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--热部署配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--fork:如果没有该项配置,整个devtools不会起作用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="4-开启IDEA的热部署策略"><a href="#4-开启IDEA的热部署策略" class="headerlink" title="4.开启IDEA的热部署策略"></a>4.开启IDEA的热部署策略</h2><p>顶部菜单- &gt;Edit Configurations（见图）-&gt;SpringBoot插件-&gt;目标项目-&gt;勾选热更新。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.4fvc2qvnvgk0.png" alt="image"></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.2nzbbyb2zrw0.png" alt="image"></p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>在修改页面按N次ctrl+F9 会自动重新编译页面到target/classes/static目录， 请注意：这是不万能，所有如果没有效果，可以收到吧static静态资源或者template静态资源手动复制到target/classes/static。</p><p>如果刷新没有看到效果：请用<code>ctrl+f5</code> 强刷N次.</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_42685050/article/details/81588584">springboot+idea热部署(自动刷新)_sanfenzZ的博客-CSDN博客_idea springboot 热部署</a></p><p><a href="https://blog.csdn.net/qq_42685050/article/details/81588584">(springboot+idea热部署(自动刷新)_sanfenzZ的博客-CSDN博客_idea springboot 热部署</a></p><p><a href="https://www.jianshu.com/p/f658fed35786">SpringBoot 在IDEA中实现热部署(实用版) - 简书 (jianshu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>SpringBoot</tag>
      
      <tag>配置</tag>
      
      <tag>热部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>servlet配置在DAO</title>
    <link href="/posts/52089/"/>
    <url>/posts/52089/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="DAO层"><a href="#DAO层" class="headerlink" title="DAO层"></a>DAO层</h1><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>配置</tag>
      
      <tag>开发</tag>
      
      <tag>Spring MVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不会只有我知道http和https的区别吧</title>
    <link href="/posts/52090/"/>
    <url>/posts/52090/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.moezx.cc/images/2017/11/24/PID54586500by212a.jpg" alt="PID54586500by212a.jpg"></p><p>我想这的确是不会   </p><p>=└(┐卍^o^)卍</p><span id="more"></span><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li>https协议要申请证书到ca，需要一定经济成本；</li><li>http是明文传输，https是加密的安全传输；</li><li>连接的端口不一样，http是80，https是443；</li><li>http连接很简单，没有状态；https是ssl加密的传输，身份认证的网络协议，相对http传输比较安全。</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>说，收到url后你都干了什么</title>
    <link href="/posts/52091/"/>
    <url>/posts/52091/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.moezx.cc/images/2018/07/30/__sawamura_spencer_eriri_saenai_heroine_no_sodatekata_drawn_by_misaki_kurehito__fb27a7ea6c48b2ef76fe915e378b9098.png" alt="__sawamura_spencer_eriri_saenai_heroine_no_sodatekata_drawn_by_misaki_kurehito__fb27a7ea6c48b2ef76fe915e378b9098.png"></p><p>简单说一下，浏览器从接收到一个URL，到最后展示出页面，经历了哪些过程。</p><span id="more"></span><h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>1.DNS解析 </p><p>2.TCP连接 </p><p>3.发送HTTP请求 </p><p>4.服务器处理请求并返回HTTP报文 </p><p>5.浏览器解析渲染页面</p><h1 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h1><p><strong>DNS域名解析，获得域名相对应的IP地址。</strong></p><p>首先，浏览器是不“认识”域名的，它只“认识”IP，所以他通过三种方式得到域名对应的IP：</p><p>1.检查<strong>自身缓存</strong>中有没有被解析过的这个域名对应的ip地址。</p><p>2.查操作系统缓存中有没有对应的已解析过的结果。</p><p>​    在windows中可通过c盘里一个叫hosts的文件来设置，如果你在这里指定了一个域名对应的ip地址，那浏览器会首先使用这个ip地址。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.35thw4l3wz00.png" alt="image"></p><p>被修改后，会造成域名劫持。</p><p>3.请求本地域名服务器（LDNS）来解析这个域名。</p><p>4.到Root Server 域名服务器请求解析。</p><h1 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h1><p>浏览器向服务器发起TCP连接，与浏览器建立TCP<a href="https://septzhang.xyz/2021/04/13/%E6%8F%A1%E6%89%8B%E5%92%8C%E6%8C%A5%E6%89%8B%E8%BF%99%E8%BE%88%E5%AD%90%E4%B8%8D%E5%86%8D%E4%BA%86/">三次握手</a>。</p><h1 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h1><p>与服务器建立了连接后，就可以向服务器发起请求了。</p><p>发送HTTP请求的过程就是构建HTTP请求报文，并通过TCP协议发送到服务器指定端口（HTTP协议80/8080，HTTPS协议443）。</p><p>HTTP请求是由三部分组成：<strong>请求行、请求报头和请求正文。</strong></p><h2 id="请求行："><a href="#请求行：" class="headerlink" title="请求行："></a>请求行：</h2><p><strong>请求方法、请求地址和协议版本。</strong></p><h3 id="请求方法："><a href="#请求方法：" class="headerlink" title="请求方法："></a>请求方法：</h3><p>HTTP/1.1 定义的请求方法有8种：GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE。</p><p>最常的两种<strong>GET</strong>和<strong>POST</strong>，如果是RESTful接口的话一般会用到GET、POST、DELETE、PUT。</p><h3 id="请求地址："><a href="#请求地址：" class="headerlink" title="请求地址："></a>请求地址：</h3><p>URL:统一资源定位符，是一种<strong>自愿位置的抽象唯一识别方法</strong>。</p><p>组成：&lt;协议&gt;：//&lt;主机&gt;：&lt;端口&gt;/&lt;路径&gt;</p><p><strong>端口和路径有时可以省略（HTTP默认端口号是80）</strong></p><h3 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h3><p>协议版本的格式为：HTTP/主版本号.次版本号，常用的有HTTP/1.0和HTTP/1.1</p><h2 id="请求头部"><a href="#请求头部" class="headerlink" title="请求头部"></a>请求头部</h2><p>请求头部为请求报文添加了一些附加信息，由“名/值”对组成，每行一对，名和值之间使用冒号分隔。</p><table><thead><tr><th align="center">请求头</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">Host</td><td align="center">接受请求的服务器地址，IP:端口号或者域名</td></tr><tr><td align="center">User-Agent</td><td align="center">发送请求的应用程序名称</td></tr><tr><td align="center">Connection</td><td align="center">指定与连接相关属性，如Connection:Keep-Alive</td></tr><tr><td align="center">Accept-Charset</td><td align="center">通知服务端可以发送的编码格式</td></tr><tr><td align="center">Accept-Encoding</td><td align="center">通知服务端可以发送的数据压缩格式</td></tr><tr><td align="center">Accep-Language</td><td align="center">通知服务端可以发送的语言</td></tr></tbody></table><p><strong>请求头部的最后会有一个空行</strong>，表示请求头部结束，接下来为请求数据，这一行非常重要，必不可少。</p><h2 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h2><p>可选部分，比如GET请求就没有请求数据。</p><h1 id="服务器处理请求"><a href="#服务器处理请求" class="headerlink" title="服务器处理请求"></a>服务器处理请求</h1><p>​        服务器端收到请求后，由web服务器（准确来说应该是HTTP服务器）处理请求，诸如Apache、Ngnix、IIS等。web服务器解析用户请求，知道了要调度哪些资源文件，再通过相应的这些文件处理用户请求和参数，并调用数据库信息 ，最后将结果通过web服务器返回浏览器客户端。</p><h1 id="返回相应结果至浏览器"><a href="#返回相应结果至浏览器" class="headerlink" title="返回相应结果至浏览器"></a>返回相应结果至浏览器</h1><h2 id="HTTP响应报文主要由状态行、响应头部、空行以及响应数据组成。"><a href="#HTTP响应报文主要由状态行、响应头部、空行以及响应数据组成。" class="headerlink" title="HTTP响应报文主要由状态行、响应头部、空行以及响应数据组成。"></a>HTTP响应报文主要由状态行、响应头部、空行以及响应数据组成。</h2><h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p>由3部分组成，分别为：协议版本，状态码，状态码描述。</p><p>其中协议版本与请求报文一致，状态码描述是对状态码的简单描述，状态码做简单介绍。</p><blockquote><p>1xx：指示信息–表示请求已接收，继续处理。<br>2xx：成功–表示请求已被成功接收、理解、接受。<br>3xx：重定向–要完成请求必须进行更进一步的操作。<br>4xx：客户端错误–请求有语法错误或请求无法实现。<br>5xx：服务器端错误–服务器未能实现合法的请求。</p></blockquote><p><strong>常见</strong></p><table><thead><tr><th align="center">状态码</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">200</td><td align="center">响应成功</td></tr><tr><td align="center">302</td><td align="center">跳转，条状属性通过响应头中的Location指定</td></tr><tr><td align="center">400</td><td align="center">客户端请求有语法错误，不能被服务器识别</td></tr><tr><td align="center">403</td><td align="center">服务器收到请求，但是拒绝提供服务（认证失败）</td></tr><tr><td align="center">404</td><td align="center">请求资源不存在</td></tr><tr><td align="center">500</td><td align="center">服务器内部错误</td></tr></tbody></table><h3 id="响应头部"><a href="#响应头部" class="headerlink" title="响应头部"></a>响应头部</h3><p>与请求头部类似，为响应报文添加了一些附加信息</p><h3 id="响应数据"><a href="#响应数据" class="headerlink" title="响应数据"></a>响应数据</h3><p>用于存放需要返回给客户端的数据信息。</p><h1 id="浏览器解析渲染页面"><a href="#浏览器解析渲染页面" class="headerlink" title="浏览器解析渲染页面"></a>浏览器解析渲染页面</h1><p> 浏览器在收到HTML、CSS、JS文件后，就需要进行渲染。 </p><p>浏览器是一个<strong>边解析边渲染</strong>的过程。</p><p>首先浏览器解析HTML文件构建<strong>DOM树</strong>，然后解析CSS文件构建<strong>渲染树</strong>，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。</p><p> JS的解析是由浏览器中的JS解析引擎完成的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/yanshuanche3765">CSCN-DoubleWeiWei001:详解DNS域名解析全过程</a></p><p><a href="https://zhuanlan.zhihu.com/p/38240894">知乎-一次完整的HTTP请求</a></p><p><a href="https://blog.csdn.net/qq_36631580/article/details/87789340">CSDN-浏览器从接收到一个URL，到最后展示出页面，经历了哪些过程</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQlの内外连接二起脚</title>
    <link href="/posts/52095/"/>
    <url>/posts/52095/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.moezx.cc/images/2018/06/04/01-46.jpg" alt="01-46.jpg"></p><p>在牛客网上看到了这样一个问题，内连接和外连接的区别是什么？</p><p>定睛一看，我也不会，所以整理了一下。(～o￣▽￣)～o 。。。滚来滚去……o～(＿△＿o～) ~。。。</p><span id="more"></span><h1 id="内连接和外连接的区别是什么？"><a href="#内连接和外连接的区别是什么？" class="headerlink" title="内连接和外连接的区别是什么？"></a>内连接和外连接的区别是什么？</h1><p>区别：内连接查询操作列出与连接条件匹配的数据行；</p><p>外连接，返回到查询结果集合中的不仅包含符合连接条件的行，而且还包括左表（左外连接）、右表（右外连接）或两个边接表（全外连接）中的所有数据行。</p><p>两种类型的主要区别在于，即使是在连接条件不满足的情况下，外部连接也会在结果集内返回行，而内部连接不会在结果集类返回行。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>连续子数组的最大和</title>
    <link href="/posts/51243/"/>
    <url>/posts/51243/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.moezx.cc/images/2017/12/24/22825ce8098b0efa.jpg" alt="22825ce8098b0efa.jpg"></p><p>牛客网刷到了<code>连续子数组的最大和</code>的题,学习完以后记录一下两个解法。</p><span id="more"></span><h1 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a>连续子数组的最大和</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。要求时间复杂度为 <strong>O(n)</strong>.</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.1ttcsfmtnuv4.png" alt="image"></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>算法时间复杂度O（n）</p><p>利用array[i]记录累计较大值值，利用max与array与之比较，使得max始终记录最大值，最后返回max。</p><h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">FindGreatestSumOfSubArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (array.length == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">int</span> max = Integer.MIN_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; array.length; i++)&#123;<br>            array[i] = Math.max(array[i],array[i-<span class="hljs-number">1</span>]+array[i]);<br>            max = Math.max(array[i],max);<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="其他解法"><a href="#其他解法" class="headerlink" title="其他解法"></a>其他解法</h2><p>思路：</p><p>通过判断i前的累积是否大于0，来判断是否继续进行累加。</p><p>使<code>sum</code> 记录累加值，<code>maxvalue</code> 记录最大值，两者比较，使<code>maxvalue</code> 始终取最大值。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">FindGreatestSumOfSubArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> maxvalue=array[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;array.length;i++)&#123;<br>        <span class="hljs-keyword">if</span>(sum&lt;=<span class="hljs-number">0</span>)&#123;<br>          sum=array[i];  <br>        &#125;<span class="hljs-keyword">else</span>&#123;sum=sum+array[i];&#125;<br>         maxvalue=Math.max(maxvalue,sum);<br>    &#125;<br>        <span class="hljs-keyword">return</span> maxvalue;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.nowcoder.com/practice/459bd355da1549fa8a49e350bf3df484">牛客网</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>握手和挥手这辈子不再了</title>
    <link href="/posts/52093/"/>
    <url>/posts/52093/</url>
    
    <content type="html"><![CDATA[<p><img src="https://view.moezx.cc/images/2020/05/18/c8fbe0218ec18bbc3bb8aa647cb218fe.jpg" alt="c8fbe0218ec18bbc3bb8aa647cb218fe.jpg"></p><p>本文主要内容是TCP协议的三次握手和四次挥手，就是我记了N遍，又忘了N遍的握手和挥手。</p><span id="more"></span><h1 id="握手和挥手这辈子不再了"><a href="#握手和挥手这辈子不再了" class="headerlink" title="握手和挥手这辈子不再了"></a>握手和挥手这辈子不再了</h1><h2 id="为啥要握手"><a href="#为啥要握手" class="headerlink" title="为啥要握手"></a>为啥要握手</h2><p>答：<strong>确保数据能够到达目标</strong></p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>位于传输层，提供<strong>可靠</strong>的<strong>字节流</strong>服务<br>字节流：将数据块分割成报文<br>可靠：能够把数据准确可靠地传给对方。</p><h2 id="怎样握手"><a href="#怎样握手" class="headerlink" title="怎样握手"></a>怎样握手</h2><h3 id="第一次握手："><a href="#第一次握手：" class="headerlink" title="第一次握手："></a>第一次握手：</h3><blockquote><p>建立连接时，客户端发送syn包（syn=x）到服务器，并进入<strong>SYN_SENT</strong>状态，等待服务器确认；<br>SYN：同步序列编号（Synchronize Sequence Numbers）。</p></blockquote><h3 id="第二次握手："><a href="#第二次握手：" class="headerlink" title="第二次握手："></a>第二次握手：</h3><blockquote><p>服务器收到syn包，必须确认客户的SYN（ack=x+1），同时自己也发送一个SYN包（syn=y），即SYN+ACK包，此时服务器进入<strong>SYN_RECV</strong>状态；</p></blockquote><h3 id="第三次握手："><a href="#第三次握手：" class="headerlink" title="第三次握手："></a>第三次握手：</h3><blockquote><p>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1），此包发送完毕，客户端和服务器进入<strong>ESTABLISHED</strong>（TCP连接成功）状态，完成三次握手。</p></blockquote><h1 id="挥手说再见"><a href="#挥手说再见" class="headerlink" title="挥手说再见"></a>挥手说再见</h1><h2 id="挥手的过程："><a href="#挥手的过程：" class="headerlink" title="挥手的过程："></a>挥手的过程：</h2><h3 id="第一次挥手："><a href="#第一次挥手：" class="headerlink" title="第一次挥手："></a>第一次挥手：</h3><p>Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入<strong>FIN_WAIT_1状态</strong>。</p><h3 id="第二次挥手："><a href="#第二次挥手：" class="headerlink" title="第二次挥手："></a>第二次挥手：</h3><p>Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入<strong>CLOSE_WAIT状态</strong>。</p><h3 id="第三次挥手："><a href="#第三次挥手：" class="headerlink" title="第三次挥手："></a>第三次挥手：</h3><p>Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入<strong>LAST_ACK状态</strong>。</p><h3 id="第四次挥手："><a href="#第四次挥手：" class="headerlink" title="第四次挥手："></a>第四次挥手：</h3><p>Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。</p><h1 id="为啥连接的时候是三次握手，关闭的时候却是四次握手？"><a href="#为啥连接的时候是三次握手，关闭的时候却是四次握手？" class="headerlink" title="为啥连接的时候是三次握手，关闭的时候却是四次握手？"></a>为啥连接的时候是三次握手，关闭的时候却是四次握手？</h1><p>答：因为当Server端收到Client端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中<strong>ACK报文是用来应答</strong>的，<strong>SYN报文是用来同步的</strong>。但是关闭连接时，当Server端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉Client端，”你发的FIN报文我收到了”。只有等到我Server端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四步握手。</p><h1 id="三次握手的夺命连环问（引用）"><a href="#三次握手的夺命连环问（引用）" class="headerlink" title="三次握手的夺命连环问（引用）"></a>三次握手的夺命连环问（引用）</h1><h2 id="ISN代表什么？意义何在？"><a href="#ISN代表什么？意义何在？" class="headerlink" title="ISN代表什么？意义何在？"></a>ISN代表什么？意义何在？</h2><p>ISN，发送方的字节数据编号的原点，让对方生成一个合法的接收窗口。</p><h2 id="ISN是固定不变的吗？"><a href="#ISN是固定不变的吗？" class="headerlink" title="ISN是固定不变的吗？"></a>ISN是固定不变的吗？</h2><p>动态随机。</p><h2 id="ISN为何要动态随机？"><a href="#ISN为何要动态随机？" class="headerlink" title="ISN为何要动态随机？"></a>ISN为何要动态随机？</h2><p>·增加安全性，为了避免被第三方猜测到，从而被第三方伪造的RST报文Reset。</p><p>·ISN动态随机使得每个tcp session的字节序列号没有重叠，如果出现tcp五元组冲突这种极小概率情况的发生，一个session的数据也不会被误认为是另一个session的。</p><h2 id="第三方伪造RST报文，需要满足什么条件才能得逞？"><a href="#第三方伪造RST报文，需要满足什么条件才能得逞？" class="headerlink" title="第三方伪造RST报文，需要满足什么条件才能得逞？"></a>第三方伪造RST报文，需要满足什么条件才能得逞？</h2><p>需要sequence number 位于对方的合法接收窗口内。 而由于ISN是动态随机的，猜出对方合法接收窗口难度加大。<br>如果ISN = 0，那么猜出的难度就大大降低。</p><h2 id="三次握手的第一次可以携带数据吗？为何？"><a href="#三次握手的第一次可以携带数据吗？为何？" class="headerlink" title="三次握手的第一次可以携带数据吗？为何？"></a>三次握手的第一次可以携带数据吗？为何？</h2><p>不可以，三次握手还没有完成。</p><h2 id="对方难道不可以将数据缓存下来，等握手成功再提交给应用程序？"><a href="#对方难道不可以将数据缓存下来，等握手成功再提交给应用程序？" class="headerlink" title="对方难道不可以将数据缓存下来，等握手成功再提交给应用程序？"></a>对方难道不可以将数据缓存下来，等握手成功再提交给应用程序？</h2><p>这样会放大SYN FLOOD攻击。<br>如果攻击者伪造了成千上万的握手报文，携带了1K+ 字节的数据，而接收方会开辟大量的缓存来容纳这些巨大数据，内存会很容易耗尽，从而拒绝服务。</p><h2 id="第三次可以携带数据吗？为何？"><a href="#第三次可以携带数据吗？为何？" class="headerlink" title="第三次可以携带数据吗？为何？"></a>第三次可以携带数据吗？为何？</h2><p>可以。<br>能够发出第三次握手报文的主机，肯定接收到第二次(服务器)握手报文，对吗？<br>因为伪造IP的主机是不会接收到第二次报文的。<br>所以，能够发出第三次握手报文的，应该是合法的用户。<br>尽管服务器侧的状态还没有“established”，接收到第三次握手的瞬间，状态就会切换为“established”，里面携带的数据按照正常流程走就好。<br>看到有人说，只看到过TCP状态位为 ’FIN +ACK’，但从来没有看过状态位只有 ‘FIN’，你应该怎样给他解释？<br>RFC793明确规定，除了第一个握手报文SYN除外，其它所有报文必须将ACK = 1。</p><h2 id="很好，RFC规定的背后肯定有合理性的一面，能否深究一下原因？"><a href="#很好，RFC规定的背后肯定有合理性的一面，能否深究一下原因？" class="headerlink" title="很好，RFC规定的背后肯定有合理性的一面，能否深究一下原因？"></a>很好，RFC规定的背后肯定有合理性的一面，能否深究一下原因？</h2><p>TCP作为一个可靠传输协议，其可靠性就是依赖于收到对方的数据，ACK对方，这样对方就可以释放缓存的数据，因为对方确信数据已经被接收到了。<br>但TCP报文是在IP网络上传输，丢包是家常便饭，接收方要抓住一切的机会，把消息告诉发送方。最方便的方式就是，任何我方发送的TCP报文，都要捎带着ACK状态位。</p><h2 id="ACK状态位单独能承担这个消息传递的任务吗？"><a href="#ACK状态位单独能承担这个消息传递的任务吗？" class="headerlink" title="ACK状态位单独能承担这个消息传递的任务吗？"></a>ACK状态位单独能承担这个消息传递的任务吗？</h2><p>不能！需要有 Acknowledge Number配合才行。<br>如果我方发出的Acknowledge Number == 10001，那意味着序列号10000及之前的字节已经成功接收。<br>如果对方占据字节序列号10000是应用层数据，那么就是确认应用层数据。<br>如果对方占据字节序列号10000是’FIN’状态位，那么就是确认接收到对方的’FIN’。</p><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/qq_38950316/article/details/81087809">CSDN-青柚_</a></p><p><a href="">简书</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>基础知识</tag>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一步解决CORS（跨域）问题</title>
    <link href="/posts/51245/"/>
    <url>/posts/51245/</url>
    
    <content type="html"><![CDATA[<p>小张带您一步在服务器后端解决跨域问题ヾ(≧∇≦*)ゝ</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/deemoPID50418538bysishenfan.jpg" alt="deemoPID50418538bysishenfan.jpg"></p><span id="more"></span><h1 id="CORS原理"><a href="#CORS原理" class="headerlink" title="CORS原理"></a>CORS原理</h1><p>CORS全称Cross-Origin Resource Sharing，是HTML5规范定义的如何跨域访问资源。</p><p>Origin表示本域，也就是浏览器当前页面的域。当JavaScript向外域（如sina.com）发起请求后，浏览器收到响应后，首先检查<code>Access-Control-Allow-Origin</code>是否包含本域，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript将无法获取到响应的任何数据。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/l.png" alt="CORS示意图"></p><p>假设本域是<code>my.com</code>，外域是<code>sina.com</code>，只要响应头<code>Access-Control-Allow-Origin</code>为<code>http://my.com</code>，或者是<code>*</code>，本次请求就可以成功。</p><p>可见，跨域能否成功，取决于对方服务器是否愿意给你设置一个正确的<code>Access-Control-Allow-Origin</code>，决定权始终在对方手中。</p><p>上面这种跨域请求，称之为“简单请求”。简单请求包括GET、HEAD和POST（POST的Content-Type类型 仅限<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>和<code>text/plain</code>），并且不能出现任何自定义头（例如，<code>X-Custom: 12345</code>），通常能满足90%的需求。</p><p>无论你是否需要用JavaScript通过CORS跨域请求资源，你都要了解CORS的原理。最新的浏览器全面支持HTML5。在引用外域资源时，除了JavaScript和CSS外，都要验证CORS。例如，当你引用了某个第三方CDN上的字体文件时：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* CSS */</span><br><span class="hljs-keyword">@font-face</span> &#123;<br>  <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;FontAwesome&#x27;</span>;<br>  <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;http://cdn.com/fonts/fontawesome.ttf&#x27;</span>) <span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;truetype&#x27;</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果该CDN服务商未正确设置<code>Access-Control-Allow-Origin</code>，那么浏览器无法加载字体资源。</p><p>对于PUT、DELETE以及其他类型如<code>application/json</code>的POST请求，在发送AJAX请求之前，浏览器会先发送一个<code>OPTIONS</code>请求（称为preflighted请求）到这个URL上，询问目标服务器是否接受：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">OPTIONS</span> <span class="hljs-string">/path/to/resource HTTP/1.1</span><br><span class="hljs-attr">Host</span>: <span class="hljs-string">bar.com</span><br><span class="hljs-attr">Origin</span>: <span class="hljs-string">http://my.com</span><br><span class="hljs-meta">Access-Control-Request-Method</span>: <span class="hljs-string">POST</span><br></code></pre></div></td></tr></table></figure><p>服务器必须响应并明确指出允许的Method：</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-meta">HTTP/1.1</span> <span class="hljs-string">200 OK</span><br><span class="hljs-meta">Access-Control-Allow-Origin</span>: <span class="hljs-string">http://my.com</span><br><span class="hljs-meta">Access-Control-Allow-Methods</span>: <span class="hljs-string">POST, GET, PUT, OPTIONS</span><br><span class="hljs-meta">Access-Control-Max-Age</span>: <span class="hljs-string">86400</span><br></code></pre></div></td></tr></table></figure><p>浏览器确认服务器响应的<code>Access-Control-Allow-Methods</code>头确实包含将要发送的AJAX请求的Method，才会继续发送AJAX，否则，抛出一个错误。</p><p>由于以<code>POST</code>、<code>PUT</code>方式传送JSON格式的数据在REST中很常见，所以要跨域正确处理<code>POST</code>和<code>PUT</code>请求，服务器端必须正确响应<code>OPTIONS</code>请求。</p><h1 id="一步解决跨域问题"><a href="#一步解决跨域问题" class="headerlink" title="一步解决跨域问题"></a>一步解决跨域问题</h1><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>在项目中创建 <code>/config/WebMvcConfig.java</code>  并复制以下代码：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Sept Zhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-04-09 21:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebMvcConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>.allowedOrigins(<span class="hljs-string">&quot;http://localhost:8082&quot;</span>)<br>            <span class="hljs-comment">//允许的主机和端口</span><br>.allowedHeaders(<span class="hljs-string">&quot;*&quot;</span>)<br>.allowedMethods(<span class="hljs-string">&quot;*&quot;</span>)<br>            <span class="hljs-comment">//添加允许的请求方法 get,post等</span><br>.maxAge(<span class="hljs-number">30</span>*<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="谁在搞事？"><a href="#谁在搞事？" class="headerlink" title="谁在搞事？"></a>谁在搞事？</h2><p>是它——浏览器的<a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">同源策略</a> 。可能不好访问，所以我把大体内容摘录一下，方便大家查看学习。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima">同源策略是一个重要的安全策略，它用于限制一个<span class="hljs-built_in">origin</span>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。<br></code></pre></div></td></tr></table></figure><h2 id="啥时候发生？"><a href="#啥时候发生？" class="headerlink" title="啥时候发生？"></a>啥时候发生？</h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">如果两个 URL 的 protocol、port (如果有指定的话)和 host 都相同的话，则这两个 URL 是同源。这个方案也被称为“协议<span class="hljs-regexp">/主机/</span>端口元组”，或者直接是 “元组”。（“元组” 是指一组项目构成的整体，双重<span class="hljs-regexp">/三重/</span>四重<span class="hljs-regexp">/五重/</span>等的通用形式）。<br></code></pre></div></td></tr></table></figure><p><em>换一句话说，就是 <strong>协议</strong>，<strong>端口</strong>，<strong>主机</strong> 有一个不同，就会产生跨域问题。</em></p><h2 id="咋还有特例？"><a href="#咋还有特例？" class="headerlink" title="咋还有特例？"></a>咋还有特例？</h2><p>Internet Explorer（IE） 的同源策略有两个主要的差异点：</p><ul><li><strong>授信范围</strong>（Trust Zones）：两个相互之间高度互信的域名，如公司域名（corporate domains），则不受同源策略限制。</li><li><strong>端口</strong>：IE 未将端口号纳入到同源策略的检查中，因此 <code>https://company.com:81/index.html</code> 和 <code>https://company.com/index.html</code> 属于同源并且不受任何限制。</li></ul><p>这些差异点是<strong>不规范</strong>的，其它浏览器也未做出支持，但会助于开发基于window RT IE的应用程序。</p><p>吐槽：IE可不是人造革n(<em>≧▽≦</em>)n。</p><h2 id="咋允许跨源访问"><a href="#咋允许跨源访问" class="headerlink" title="咋允许跨源访问"></a>咋允许跨源访问</h2><p>可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/HTTP/Access_control_CORS">CORS</a> 来允许跨源访问。CORS 是 <a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP">HTTP</a> 的一部分，它允许服务端来指定哪些主机可以从这个服务端加载资源。</p><p>上方的代码就是使用的这个方法。</p><h2 id="怎么区分"><a href="#怎么区分" class="headerlink" title="怎么区分"></a>怎么区分</h2><p>网站的开发者工具（F12）</p><p>报错信息举例:</p><p>msedge浏览器（新版）</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/image.2fck8u0pg9hc.png" alt="image"></p><p>chrome浏览器：</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.1r9vrc8ql9hc.png" alt="image"></p><h2 id="跨源网络访问"><a href="#跨源网络访问" class="headerlink" title="跨源网络访问"></a>跨源网络访问</h2><p>同源策略控制不同源之间的交互，例如在使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img">``</a> 标签时则会受到同源策略的约束。这些交互通常分为三类：</p><ul><li>跨域<strong>写操作</strong>（Cross-origin writes）<em>一般是被<strong>允许</strong>的</em>。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 <a href="https://developer.mozilla.org/zh-CN/docs/HTTP/Access_control_CORS#Preflighted_requests">preflight</a>。</li><li>跨域<strong>资源嵌入</strong>（Cross-origin embedding）一般是被允许（后面会举例说明）。</li><li>跨域<strong>读操作</strong>（Cross-origin reads）<em>一般是<strong>不被允许</strong>的</em>，*但常可以通过内嵌资源来巧妙的进行读取访问。例如，你可以读取嵌入图片的高度和宽度，调用内嵌脚本的方法。</li></ul><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">Web 开发技术文档</a></p><p><a href="https://segmentfault.com/a/1190000015597029">写BUG博主</a></p><p><a href="https://www.bilibili.com/video/BV1xt411K7nU?from=search&seid=17658175930397607049">bilibili-江南一点雨</a></p><p><a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023022332902400#0">廖雪峰的AJAX博客</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>技巧</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven 大戏之《父与子》</title>
    <link href="/posts/51244/"/>
    <url>/posts/51244/</url>
    
    <content type="html"><![CDATA[<p>springboot 的 maven 多模块项目结构解释即代码应用。</p><p><img src="https://view.moezx.cc/images/2017/12/26/MIBPMCPID56855463byjpc.jpg" alt="MIBPMCPID56855463byjpc.jpg"></p><span id="more"></span><h1 id="Maven-大戏之《父与子》"><a href="#Maven-大戏之《父与子》" class="headerlink" title="Maven 大戏之《父与子》"></a>Maven 大戏之《父与子》</h1><h2 id="什么是Maven多模块项目"><a href="#什么是Maven多模块项目" class="headerlink" title="什么是Maven多模块项目"></a>什么是Maven多模块项目</h2><p>​        Maven多模块项目,适用于一些比较大的项目，通过合理的模块拆分，实现代码的<strong>复用</strong>，<strong>便于维护和管理</strong>。尤其是一些开源框架，也是采用多模块的方式，提供插件集成，用户可以根据需要配置指定的模块。</p><h2 id="Spring-Boot的-Maven-多模组项目使用方法"><a href="#Spring-Boot的-Maven-多模组项目使用方法" class="headerlink" title="Spring Boot的 Maven 多模组项目使用方法"></a>Spring Boot的 Maven 多模组项目使用方法</h2><p>项目树</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">　　父项目<br>    　　　　|----pom.xml<br>    　　　　|----子项目<span class="hljs-number">2</span><br>        　　　　　　　　|----pom.xml<br>    　　　　|----子项目<span class="hljs-number">3</span><br>        　　　　　　　　|----pom.xml<br>    　　　　|----子项目<span class="hljs-number">4</span><br>        　　　　　　　　|----pom.xml<br>    　　　　|----子项目<span class="hljs-number">5</span><br>        　　　　　　　　|----pom.xml<br></code></pre></div></td></tr></table></figure><h3 id="父模块的创建"><a href="#父模块的创建" class="headerlink" title="父模块的创建"></a>父模块的创建</h3><p>完成父模块的创建，并<strong>删除</strong>父项目的src文件</p><h3 id="在父项目-pom-xml-中建立依赖管理"><a href="#在父项目-pom-xml-中建立依赖管理" class="headerlink" title="在父项目 pom.xml 中建立依赖管理"></a>在父项目 <code>pom.xml</code> 中建立依赖管理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--同时删除parent标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>父项目<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>子项目1<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>子项目2<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>子项目3<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>子项目4<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>子项目5<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h3 id="在父项目下创建Module"><a href="#在父项目下创建Module" class="headerlink" title="在父项目下创建Module"></a>在父项目下创建Module</h3><p>有时需要标识项目文件的类型。</p><h3 id="在每个子项目-pom-xml-中建立依赖管理"><a href="#在每个子项目-pom-xml-中建立依赖管理" class="headerlink" title="在每个子项目 pom.xml 中建立依赖管理"></a>在每个子项目 <code>pom.xml</code> 中建立依赖管理</h3><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>xxxx<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>父项目<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>父项目<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>放个图片明白一下：</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting@master/20210407/image.z8bwoj5zbj4.png" alt="image"></p><h3 id="最后刷新maven，OK"><a href="#最后刷新maven，OK" class="headerlink" title="最后刷新maven，OK"></a>最后刷新maven，OK</h3>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技巧</tag>
      
      <tag>Maven</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网概述3</title>
    <link href="/posts/15819/"/>
    <url>/posts/15819/</url>
    
    <content type="html"><![CDATA[<p>开放系统互连基本参考模型  OSI/RM</p><p>市场话失败的原因</p><p>网络协议的组成要素</p><p>协议的形式</p><p>参考模型中的传输对象</p><p>协议的作用范围</p><span id="more"></span><h1 id="开放系统互连基本参考模型-OSI-RM"><a href="#开放系统互连基本参考模型-OSI-RM" class="headerlink" title="开放系统互连基本参考模型  OSI/RM"></a>开放系统互连基本参考模型  OSI/RM</h1><h2 id="市场话失败的原因："><a href="#市场话失败的原因：" class="headerlink" title="市场话失败的原因："></a>市场话失败的原因：</h2><ul><li>制定时<strong>无商业化驱动</strong>。</li><li>实现时过于复杂，<strong>运行效率低。</strong></li><li><strong>制定周期长</strong>，生产的设备无法及时投入市场。</li><li>层次划分不够合理，层次间<strong>功能重复</strong>。</li></ul><h1 id="网络协议的组成要素"><a href="#网络协议的组成要素" class="headerlink" title="网络协议的组成要素"></a>网络协议的组成要素</h1><ul><li>语法： 数据与控制信息的结构或格式。</li><li>语义： 需要发出何种控制信息， 动作， 响应。</li><li>同步： 事件<strong>实现顺序</strong>的详细说明。</li></ul><h1 id="协议的形式"><a href="#协议的形式" class="headerlink" title="协议的形式"></a>协议的形式</h1><ul><li>文字描述 ==》人</li><li>程序代码 ==》 计算机</li></ul><h1 id="物联网中的流量大多由应用层协议产生。"><a href="#物联网中的流量大多由应用层协议产生。" class="headerlink" title="物联网中的流量大多由应用层协议产生。"></a>物联网中的流量大多由应用层协议产生。</h1><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210405162932.png" alt="哼哼"></p><h1 id="参考模型中的传输对象"><a href="#参考模型中的传输对象" class="headerlink" title="参考模型中的传输对象"></a>参考模型中的传输对象</h1><table><thead><tr><th align="center"></th><th align="center">传输对象</th></tr></thead><tbody><tr><td align="center">应用层</td><td align="center">文件</td></tr><tr><td align="center">传输层</td><td align="center">段</td></tr><tr><td align="center">网络层</td><td align="center">数据包</td></tr><tr><td align="center">数据链路层</td><td align="center">帧</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210405155701.png" alt="数据帧的组成"></p><h1 id="协议的作用范围"><a href="#协议的作用范围" class="headerlink" title="协议的作用范围"></a>协议的作用范围</h1><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210902210714.png" alt="协议的作用"></p><h1 id="分层的好处"><a href="#分层的好处" class="headerlink" title="分层的好处"></a>分层的好处</h1><ul><li>层间独立</li><li>灵活性好</li><li>结构上可分割</li><li>易于实现和维护</li><li>促成标准化工作</li></ul><h1 id="分层的坏处"><a href="#分层的坏处" class="headerlink" title="分层的坏处"></a>分层的坏处</h1><ul><li>效率降低</li><li>层次间功能重复，效率降低，产生额外系统开销</li></ul><h1 id="各层之间的主要功能"><a href="#各层之间的主要功能" class="headerlink" title="各层之间的主要功能"></a>各层之间的主要功能</h1><table><thead><tr><th align="center">功能</th><th align="center">作用</th><th align="center">范围</th></tr></thead><tbody><tr><td align="center">差错控制</td><td align="center">使相应层次对等的通信更加可靠</td><td align="center">数据链路层（丢包）、网络层（丢包）、传输层（重传）</td></tr><tr><td align="center">流量控制</td><td align="center">发送端的发送速率必须确保接收端能够接收</td><td align="center">传输层</td></tr><tr><td align="center">分段和重装</td><td align="center">发送端将要发送的数据块划分成为更小单位，并在接收端还原</td><td align="center">传输层</td></tr><tr><td align="center">复用和分用</td><td align="center">发送端的几个高层会话复用一条低层的连接，在接收端再进行分用。</td><td align="center">传输层、网络层、数据链路层</td></tr><tr><td align="center">连接建立和释放</td><td align="center">交换数据前先建立一条逻辑连接，数据传送结束后释放连接。</td><td align="center">传输层</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1gV411h7r7?p=15">韩立刚的计算机网络</a></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210405163015.png" alt="得得得得"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【Leetcode】104二叉树的最大深度</title>
    <link href="/posts/21493/"/>
    <url>/posts/21493/</url>
    
    <content type="html"><![CDATA[<p>给定一个二叉树，找出其最大深度。</p><span id="more"></span><h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p>说明: 叶子节点是指没有子节点的节点。</p><h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><p>给定二叉树 [3,9,20,null,null,15,7]，</p><div class="hljs code-wrapper"><pre><code>    3   / \  9  20    /  \   15   7</code></pre></div><p>返回它的最大深度 3 。</p><h1 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h1><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;        <br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> + Math.max(maxDepth(root.left), maxDepth(root.right));<br>            &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree">leetcode题目</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构与算法</tag>
      
      <tag>二叉树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网概述2</title>
    <link href="/posts/64778/"/>
    <url>/posts/64778/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/PID66229031bycyawa.png"></p><span id="more"></span><h1 id="接入网"><a href="#接入网" class="headerlink" title="接入网"></a>接入网</h1><p>某个用户端系统到互联网中的<strong>首部路由器</strong>之间的一种网络。</p><ul><li>属于<strong>局域网</strong>。</li><li>在用户和互联网之间其“<strong>桥梁</strong>”作用。</li><li>是互联网的<strong>非核心</strong>，<strong>非边缘</strong>部分。</li></ul><h1 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h1><h2 id="速率（数据率-比特率）"><a href="#速率（数据率-比特率）" class="headerlink" title="速率（数据率/比特率）"></a>速率（数据率/比特率）</h2><p>数据的传送速率。</p><p>是额定功率。</p><p>单位： bit/s</p><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p>网络中某信道<strong>传送数据</strong>的能力，即<strong>最高数据率</strong>。</p><p>单位： Hz</p><h2 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h2><p>单位时间内通过某个网络（或信道、接口）的数据量（<strong>通过是指两个方向之和</strong>）。</p><p>受网络带宽或网络额定速率的限制。</p><h2 id="时延"><a href="#时延" class="headerlink" title="时延"></a>时延</h2><p>不可忽略<strong>数据帧的长度</strong>。</p><ul><li>发送时延（传输时延） 发送时间=数据帧长度（bit）/发送速率（bit/s）(或者带宽)</li><li>传播时延 不可改变 传播时间= 信道长度 / 传播速率</li><li>处理时延</li><li>排队时延</li></ul><p><strong>高速网络链路仅提高发送速率，而不是传播速率</strong></p><h2 id="时延带宽积"><a href="#时延带宽积" class="headerlink" title="时延带宽积"></a>时延带宽积</h2><p>时延带宽积 = 传播时延 * 带宽</p><h2 id="往返时间-RRT"><a href="#往返时间-RRT" class="headerlink" title="往返时间 RRT"></a>往返时间 RRT</h2><p>包含 各中间节点处理时延， 排队时延， 转发数据的发送时延。</p><h2 id="利用率"><a href="#利用率" class="headerlink" title="利用率"></a>利用率</h2><ul><li><p>信道利用率 ： 有效数据通过时间  所占 总时间 之比。</p></li><li><p>网络利用率：  全网络通道利用率 的 加权平局值。<br>$$<br>D = D0/(1-U)<br>$$<br>D为网络当前延迟，D0为网络空闲时延迟， U网络的利用率（1~0）.</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210405163103.png" alt="开心"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网概述1</title>
    <link href="/posts/64586/"/>
    <url>/posts/64586/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h1><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/75F120D764500ABE571F8C068E2B59F0.png" alt="TCP/IP模型"></p><h1 id="计算机网络特点"><a href="#计算机网络特点" class="headerlink" title="计算机网络特点"></a>计算机网络特点</h1><h2 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h2><p>用户之间可以交换信息。</p><h2 id="共享性"><a href="#共享性" class="headerlink" title="共享性"></a>共享性</h2><p>资源共享（包含信息，软件，硬件共享）。</p><h1 id="互联网和互连网"><a href="#互联网和互连网" class="headerlink" title="互联网和互连网"></a>互联网和互连网</h1><h2 id="互联网-Internet"><a href="#互联网-Internet" class="headerlink" title="互联网    Internet"></a>互联网    Internet</h2><p>专指</p><p>通信规则–TCP/IP协议族</p><p>起源：</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210329211655.png" alt="互联网起源"></p><h2 id="互连网-internet"><a href="#互连网-internet" class="headerlink" title="互连网    internet"></a>互连网    internet</h2><p>通指多个计算机互连形成的网络</p><p>通信规则：可以使用包括TCP/IP在内的其他网络协议</p><h1 id="万维网-www（World-Wide-Web）"><a href="#万维网-www（World-Wide-Web）" class="headerlink" title="万维网 www（World Wide Web）"></a>万维网 www（World Wide Web）</h1><p>WWW服务器通过超文本标记语言(HTML)把信息组织成为图文并茂的超文本，利用链接从一个站点跳到另个站点。</p><h1 id="互联网的组成"><a href="#互联网的组成" class="headerlink" title="互联网的组成"></a>互联网的组成</h1><h2 id="·边缘部分-主机"><a href="#·边缘部分-主机" class="headerlink" title="·边缘部分    主机"></a>·边缘部分    主机</h2><h2 id="·核心部分-网络-路由器（连通性和交换）"><a href="#·核心部分-网络-路由器（连通性和交换）" class="headerlink" title="·核心部分    网络+路由器（连通性和交换）"></a>·核心部分    网络+路由器（连通性和交换）</h2><h1 id="端系统之间的通信"><a href="#端系统之间的通信" class="headerlink" title="端系统之间的通信"></a>端系统之间的通信</h1><p>运行在两个主机上的程序之间的通信</p><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><p>·C/S：客户-服务器端方式</p><p>·P2P（Peer-to-Peer）：对等方式    下载端可以在<strong>多台</strong>服务器下载，<strong>同时</strong>也可以为下载慢的下载端传输数据（既是客户端又可以是客户端）</p><h1 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h1><p>·网络的核心部分</p><p>·分组交换的关键构件</p><p>·任务：转发收到的分组</p><p>·处理分组的过程：①放入缓存（暂时存储）==》②查找转发表（找目的地址）==》③转发</p><h1 id="交换技术的使用"><a href="#交换技术的使用" class="headerlink" title="交换技术的使用"></a>交换技术的使用</h1><p>互联网的核心部分采用了<strong>分组交换技术</strong>。</p><p>交换机内部采用了<strong>电路交换技术。</strong></p><h1 id="电路交换和分组交换的比较"><a href="#电路交换和分组交换的比较" class="headerlink" title="电路交换和分组交换的比较"></a>电路交换和分组交换的比较</h1><h2 id="·电路交换"><a href="#·电路交换" class="headerlink" title="·电路交换"></a>·电路交换</h2><p>①面向链接</p><p>②阶段： 建立连接 ==》 通信 ==》 释放链接</p><p>③特点： 线路利用率低，连续传输大量数据</p><h2 id="·分组交换"><a href="#·分组交换" class="headerlink" title="·分组交换"></a>·分组交换</h2><h2 id="①采用存储转发技术"><a href="#①采用存储转发技术" class="headerlink" title="①采用存储转发技术"></a>①采用<strong>存储转发</strong>技术</h2><h2 id="②划分：长报文划分为较短的、固定长度的数据段"><a href="#②划分：长报文划分为较短的、固定长度的数据段" class="headerlink" title="②划分：长报文划分为较短的、固定长度的数据段"></a>②划分：长报文划分为较短的、固定长度的数据段</h2><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210329221000.png" alt="报文的分组"></p><h2 id="③优点："><a href="#③优点：" class="headerlink" title="③优点："></a>③优点：</h2><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210329221401.png" alt="分组交换的优点"></p><h2 id="④问题"><a href="#④问题" class="headerlink" title="④问题"></a>④问题</h2><p>①各节点存储转发排队带来的<strong>时延</strong>。</p><p>②分组首部带来的开销。</p><h2 id="⑤选用"><a href="#⑤选用" class="headerlink" title="⑤选用"></a>⑤选用</h2><p>·连续传送大量数据，传送时间 &gt;&gt; 建立连接时间 ==》电路交换</p><p>·传送突发数据 ==》 报文交换，分组交换</p><p>·分组长度 &gt;&gt; 报文长度 ==》 分组交换</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.bilibili.com/video/BV1gV411h7r7?p=6">韩立冬讲解计算机网络</a></p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/warma.png" alt="表情包"></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/posts/46132/"/>
    <url>/posts/46132/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/wallpapersden.com_small-memory_7680x4320.jpg" alt="wallpapersden.com_small-memory_7680x4320.jpg"></p><p>这两天看到了单例模式的面试题，打算把单例模式的知识点整理一下。</p><span id="more"></span><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>单例模式（<code>Singleton Pattern</code>）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式。</p><p>保证一个类仅有一个实例，并提供一个访问它的<strong>全局访问点</strong>。</p><h2 id="要注意的地方："><a href="#要注意的地方：" class="headerlink" title="要注意的地方："></a>要注意的地方：</h2><blockquote><ul><li>1、单例类只能有一个实例。</li><li>2、单例类必须自己创建自己的唯一实例。</li><li>3、单例类必须给所有其他对象提供这一实例。</li></ul></blockquote><h1 id="啥子优缺点"><a href="#啥子优缺点" class="headerlink" title="啥子优缺点"></a>啥子优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><blockquote><ul><li>1、在内存里只有<strong>一个实例</strong>，<strong>减少了内存的开销</strong>，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。</li><li>2、避免对资源的多重占用（比如写文件操作）。</li></ul></blockquote><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><blockquote><ul><li>1、要求生产唯一序列号。</li><li>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。</li><li>3、<strong>创建的一个对象需要消耗的资源过多</strong>，比如 I/O 与数据库的连接等。</li></ul></blockquote><h1 id="JDK中哪些实现了单例模式"><a href="#JDK中哪些实现了单例模式" class="headerlink" title="JDK中哪些实现了单例模式"></a>JDK中哪些实现了单例模式</h1><h2 id="java-lang-Runtime"><a href="#java-lang-Runtime" class="headerlink" title="java.lang.Runtime"></a><code>java.lang.Runtime</code></h2><p>由于Java是单进程的，所以，在一个JVM中，Runtime的实例应该只有一个。所以应该使用单例来实现。</p><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h2 id="java-lang-reflect-Proxy类"><a href="#java-lang-reflect-Proxy类" class="headerlink" title="java.lang.reflect.Proxy类"></a>java.lang.reflect.Proxy类</h2><h2 id="GUI中"><a href="#GUI中" class="headerlink" title="GUI中"></a>GUI中</h2><p>java.awt.Toolkit#getDefaultToolkit()</p><p>java.awt.GraphicsEnvironment#getLocalGraphicsEnvironment()</p><h1 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h1><table><thead><tr><th align="center">方式</th><th align="center">Lazy 初始化</th><th align="center">多线程安全</th><th align="center">实现难度</th></tr></thead><tbody><tr><td align="center">懒汉式</td><td align="center">是</td><td align="center">否/是</td><td align="center">易</td></tr><tr><td align="center">饿汉式</td><td align="center">否</td><td align="center">是</td><td align="center">易</td></tr><tr><td align="center">DLC</td><td align="center">是</td><td align="center">是</td><td align="center">较复杂</td></tr><tr><td align="center">内部静态类</td><td align="center">是</td><td align="center">是</td><td align="center">一般</td></tr><tr><td align="center">枚举</td><td align="center">否</td><td align="center">是</td><td align="center">易</td></tr></tbody></table><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>分为<strong>多线程安全</strong>和<strong>多线程不安全</strong>两种。</p><h3 id="多线程不安全"><a href="#多线程不安全" class="headerlink" title="多线程不安全"></a>多线程不安全</h3><p>最基本的实现方式，但是由于没有添加<code>synchronized</code>锁，所以不支持多线程,在多线程不能正常工作。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Sept Zhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-04-20 14:25</span><br><span class="hljs-comment"> * 懒汉式单例</span><br><span class="hljs-comment"> * 多线程不安全</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazyMan lazyMan;<br><br><span class="hljs-comment">//在方法是使用时null时创建对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//单线程OK，多线程不安全</span><br><span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-keyword">null</span>)&#123;<br>lazyMan = <span class="hljs-keyword">new</span> LazyMan();<br>&#125;<br><span class="hljs-keyword">return</span> lazyMan;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="多线程测试"><a href="#多线程测试" class="headerlink" title="多线程测试"></a>多线程测试</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Sept Zhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-04-20 14:25</span><br><span class="hljs-comment"> * 懒汉式单例</span><br><span class="hljs-comment"> * 多线程不安全</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazyMan</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">LazyMan</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//多线程测试</span><br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;OK&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazyMan lazyMan;<br><br><span class="hljs-comment">//在方法是使用时null时创建对象</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyMan <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//单线程OK，多线程不安全</span><br><span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-keyword">null</span>)&#123;<br>lazyMan = <span class="hljs-keyword">new</span> LazyMan();<br>&#125;<br><span class="hljs-keyword">return</span> lazyMan;<br>&#125;<br><span class="hljs-comment">//多线程测试</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>lazyMan.getInstance();<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Thread</span>-<span class="hljs-number">2</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">9</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">0</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">6</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">8</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">4</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">3</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">1</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">5</span>OK<br><span class="hljs-attribute">Thread</span>-<span class="hljs-number">7</span>OK<br></code></pre></div></td></tr></table></figure><p>出现多个线程，且每次运行结果不同。</p><h3 id="多线程安全"><a href="#多线程安全" class="headerlink" title="多线程安全"></a>多线程安全</h3><p>效率很低，99% 情况下不需要同步。</p><blockquote><p>优点：第一次调用才初始化，避免内存浪费。<br>缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance;  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;  <br>    <span class="hljs-comment">//添加 synchronized 锁</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">if</span> (instance == <span class="hljs-keyword">null</span>) &#123;  <br>        instance = <span class="hljs-keyword">new</span> Singleton();  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>比较常用，但容易产生垃圾对象。</p><p>优点：没有加锁，执行效率会提高。<br>缺点：类加载时就初始化，浪费内存。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton instance = <span class="hljs-keyword">new</span> Singleton();  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">return</span> instance;  <br>    &#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="DCL（双检锁-双重校验锁）"><a href="#DCL（双检锁-双重校验锁）" class="headerlink" title="DCL（双检锁/双重校验锁）"></a>DCL（双检锁/双重校验锁）</h2><p>采用双锁机制，<strong>安全</strong>且在多线程情况下能保持<strong>高性能</strong>。</p><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> single;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Sept Zhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-04-20 14:25</span><br><span class="hljs-comment"> * 懒汉式单例</span><br><span class="hljs-comment"> * 多线程安全</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DCL</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">DCL</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DCL lazyMan;<br><br><span class="hljs-comment">//双重检测锁模式的 懒汉式单例， DCL懒汉式</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> DCL <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//加锁，使得多线程安全</span><br><span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br><span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-keyword">null</span>)&#123;<br>lazyMan = <span class="hljs-keyword">new</span> DCL();<span class="hljs-comment">//不是原子性操作，可能出现指令重排现象。</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.分配内存空间</span><br><span class="hljs-comment"> * 2.执行构造方法，初始化对象</span><br><span class="hljs-comment"> * 3.把对象指向这个空间</span><br><span class="hljs-comment"> *可能出现指令重排现象。</span><br><span class="hljs-comment"> * 添加 volatile,可以解决指令重排</span><br><span class="hljs-comment"> * volatile：只保证可见性，不保证原子性，但是可以防止指令重排</span><br><span class="hljs-comment"> */</span><br>&#125;<br>&#125;;<br><br>&#125;<br><span class="hljs-keyword">return</span> lazyMan;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> single;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Sept Zhang</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 2021-04-20 14:25</span><br><span class="hljs-comment"> * 懒汉式单例</span><br><span class="hljs-comment"> * 多线程安全</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DCL</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">DCL</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//多线程测试</span><br>System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;OK&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DCL lazyMan;<br><br><span class="hljs-comment">//双重检测锁模式的 懒汉式单例， DCL懒汉式</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> DCL <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//加锁，使得多线程安全</span><br><span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">synchronized</span> (LazyMan.class)&#123;<br><span class="hljs-keyword">if</span> (lazyMan == <span class="hljs-keyword">null</span>)&#123;<br>lazyMan = <span class="hljs-keyword">new</span> DCL();<span class="hljs-comment">//不是原子性操作，可能出现指令重排现象。</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1.分配内存空间</span><br><span class="hljs-comment"> * 2.执行构造方法，初始化对象</span><br><span class="hljs-comment"> * 3.把对象指向这个空间</span><br><span class="hljs-comment"> *可能出现指令重排现象。</span><br><span class="hljs-comment"> * 添加 volatile,可以解决指令重排</span><br><span class="hljs-comment"> * volatile：只保证可见性，不保证原子性，但是可以防止指令重排</span><br><span class="hljs-comment"> */</span><br>&#125;<br>&#125;;<br><br>&#125;<br><span class="hljs-keyword">return</span> lazyMan;<br>&#125;<br><span class="hljs-comment">//多线程测试</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>lazyMan.getInstance();<br>&#125;).start();<br>&#125;<br>&#125;<br>&#125;<br><br><br></code></pre></div></td></tr></table></figure><h3 id="测试结果-1"><a href="#测试结果-1" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">Thread</span>-<span class="hljs-number">8</span>OK<br></code></pre></div></td></tr></table></figure><p>运行结果只有一个线程。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>不加<code>volatile</code>时，由于不是原子性操作，可能出现指令重排现象使得线程不安全。</p><p> volatile：只保证可见性，不保证原子性，但是可以防止指令重排</p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonHolder</span> </span>&#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCE = <span class="hljs-keyword">new</span> Singleton();  <br>    &#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span> <span class="hljs-params">()</span></span>&#123;&#125;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;  <br>    <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;  <br>    &#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>是实现单例模式的最佳方法。</p><p>更简洁，自动支持序列化机制，绝对防止多次实例化。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Singleton</span> </span>&#123;  <br>    INSTANCE;  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">whateverMethod</span><span class="hljs-params">()</span> </span>&#123;  <br>    &#125;  <br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.runoob.com/design-pattern/singleton-pattern.html">菜鸟教程</a></p><p><a href="http://www.hollischuang.com/archives/1383">Hollis</a></p>]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>单例模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java概述</title>
    <link href="/posts/31159/"/>
    <url>/posts/31159/</url>
    
    <content type="html"><![CDATA[<p>编程，什么是Java，三大版本，跨平台性及原理，java语言特点，Java和C++的区别，Java的安全性</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/wallhaven-3z32j3.jpg" alt="看海"></p><span id="more"></span><h1 id="Java概述"><a href="#Java概述" class="headerlink" title="Java概述"></a>Java概述</h1><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><p>编程就是让计算机为解决某个问题而使用某种程序设计语言编写程序代码，并最终得到结果的过程。</p><h2 id="什么是Java"><a href="#什么是Java" class="headerlink" title="什么是Java"></a>什么是Java</h2><ul><li>Java是一门静态面向对象编程语言</li><li>ava语言具有功能强大和简单易用，吸收了C++语言的各种优点，摒弃了C++里难以理解的多继承、指针等概念。</li></ul><h2 id="jdk1-5之后的三大版本"><a href="#jdk1-5之后的三大版本" class="headerlink" title="jdk1.5之后的三大版本"></a>jdk1.5之后的三大版本</h2><ul><li><p>Java SE（J2SE，Java 2 Platform Standard Edition，标准版）</p><p>允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。Java SE 包含了支持 Java Web 服务开发的类，并为Java EE和Java ME提供基础。</p></li><li><p>Java ME（J2ME，Java 2 Platform Micro Edition，微型版）</p><p>Java ME 主要为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。</p></li><li><p>Java EE（J2EE，Java 2 Platform Enterprise Edition，企业版）</p><p>企业版本帮助开发和部署可移植、健壮、可伸缩且安全的服务器端Java 应用程序。在 Java SE 的基础上构建的，它提供 Web 服务、组件模型、管理和通信 API，可以用来实现企业级的面向服务体系结构（service-oriented architecture，SOA）和 Web2.0应用程序。</p></li></ul><h2 id="什么是跨平台性？原理是什么"><a href="#什么是跨平台性？原理是什么" class="headerlink" title="什么是跨平台性？原理是什么"></a>什么是跨平台性？原理是什么</h2><p>所谓跨平台性，一次编译，多处运行。</p><p>实现原理：Java程序是通过java虚拟机在系统平台上运行的，只要该系统可以安装相应的java虚拟机，该系统就可以运行java程序。</p><h2 id="Java语言的特点"><a href="#Java语言的特点" class="headerlink" title="Java语言的特点"></a>Java语言的特点</h2><ul><li><p>简单易学（Java语言的语法与C语言和C++语言很接近，且更加简单）</p></li><li><p>面向对象（封装，继承，多态）</p></li></ul><ul><li>平台无关性（Java虚拟机实现平台无关性）</li></ul><ul><li>支持网络编程并且很方便（Java语言诞生本身就是为简化网络编程设计的）</li></ul><ul><li>支持多线程（多线程机制使应用程序在同一时间并行执行多项任）</li></ul><ul><li>健壮性（维护和后续开发方便）</li></ul><ul><li>安全性（Java语言的强类型机制、异常处理、自动内存管理机制和沙箱机制）</li></ul><h2 id="Java和C-的区别"><a href="#Java和C-的区别" class="headerlink" title="Java和C++的区别"></a>Java和C++的区别</h2><ul><li>都是<strong>面向对象</strong>的语言，都支持封装、继承和多态。</li><li>Java<strong>不提供指针</strong>来直接访问内存，<strong>程序内存更加安全</strong>。</li><li>Java的类是<strong>单继承的</strong>，C++支持<strong>多重继承；</strong>虽然Java的类不可以多继承，但是<strong>接口可以多继承</strong>。</li><li>Java有<strong>自动内存管理机制</strong>，不需要程序员手动释放无用内存。</li></ul><h2 id="Java的安全性"><a href="#Java的安全性" class="headerlink" title="Java的安全性"></a>Java的安全性</h2><ul><li>语言层次的安全性主要体现在：<br>Java取消了指针。<ul><li>由于指针的<strong>移动运算</strong>，指针可指向不可用的内存区域，导致的<strong>重要数据损坏</strong>或者是<strong>程序运行崩溃</strong>。</li><li>避免了指针导致的<strong>数组越界</strong>。</li></ul></li><li>垃圾回收机制：<br>垃圾回收器在<strong>后台自动回收</strong>不再使用的内存。<strong>避免</strong>程序忘记及时回收，导致<strong>内存泄露</strong>。<strong>避免</strong>程序<strong>错误回收程序核心类库的内存</strong>，导致系统崩溃。</li><li>异常处理机制：<br>Java异常机制主要依赖于<strong>try、catch、finally、throw、throws</strong>五个关键字。</li><li>强制类型转换：<br>只有在满足<strong>强制转换规则</strong>的情况下才能强转成功。</li><li>底层的安全性：<br>Java在字节码的传输过程中使用了**公开密钥加密机制(PKC)**。</li><li>运行环境：<br><strong>四级安全性保障机制</strong>字节码校验器 -类装载器 -运行时内存布局 -文件访问限制  </li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>遇见狂神说</p><p><a href="https://blog.csdn.net/ThinkWon/article/details/104390612">CSDN-ThinkWon</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>面试题</tag>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>沙箱安全机制</title>
    <link href="/posts/52080/"/>
    <url>/posts/52080/</url>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/PID63406586byUKA.jpg"></p><span id="more"></span><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>沙箱是一个<strong>限制程序运行</strong>的环境。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>将Java代码限定在JVM特定的运行范围中，并且严格限制代码对本地资源的访问，已发到对代码的有效隔离，防止对本地系统造成破坏。</p><p>系统资源：CPU、内存、文件系统、网络等。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>JVM</tag>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>类加载器</title>
    <link href="/posts/16040/"/>
    <url>/posts/16040/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h1><p>作用:加载Class文件。</p><p><strong>加载</strong>是将类的class文件读入到内存，并为之创建一个java.lang.Class对象。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210314152741.png"></p><h2 id="加载器的类型"><a href="#加载器的类型" class="headerlink" title="加载器的类型"></a>加载器的类型</h2><h3 id="启动类加载器BootstrapClassLoader"><a href="#启动类加载器BootstrapClassLoader" class="headerlink" title="启动类加载器BootstrapClassLoader:"></a>启动类加载器BootstrapClassLoader:</h3><p>​    是嵌在JVM内核中的加载器，该加载器是用C++语言写的，主要负载加载JAVA_HOME/lib下的类库，启动类加载器无法被应用程序直接使用。</p><h3 id="扩展类加载器Extension-ClassLoader："><a href="#扩展类加载器Extension-ClassLoader：" class="headerlink" title="扩展类加载器Extension ClassLoader："></a>扩展类加载器Extension ClassLoader：</h3><div class="hljs code-wrapper"><pre><code> 该加载器器是用JAVA编写，且它的父类加载器是Bootstrap，是由sun.misc.Launcher$ExtClassLoader实现的，主要加载JAVA_HOME/lib/ext目录中的类库。开发者可以这几使用扩展类加载器。</code></pre></div><h3 id="系统类加载器App-ClassLoader："><a href="#系统类加载器App-ClassLoader：" class="headerlink" title="系统类加载器App ClassLoader："></a>系统类加载器App ClassLoader：</h3><p>系统类加载器，也称为应用程序类加载器，负责加载应用程序classpath目录下的所有jar和class文件。它的父加载器为Ext ClassLoader。</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210315213224.png" alt="三种类加载器的层次关系"></p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>类加载器的体系并不是“继承”体系，而是<strong>委派体系</strong>，大多数类加载器首先会到自己的parent中查找类或者资源，如果找不到才会到自己本地查找。类加载器的委托行为动机是为了<strong>避免相同的类被加载多次</strong>。</p><h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210315214414.png" alt="类的加载过程"></p><ul><li><p>加载：通过一个类的完全限定查找此类字节码文件，并利用字节码文件创建一个Class对象</p></li><li><p>链接</p><ul><li>验证：验证被加载的类的正确性 。主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</li><li>准备：为类的静态变量分配内存，并将其初始化为默认值 。</li><li>解析：把类中的符号引用转换为直接引用 。</li></ul></li><li><p>初始化：为类的静态变量赋予正确的初始值。</p></li></ul><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>工作原理：如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式，</p><p><img src="https://cdn.jsdelivr.net/gh/septzhang/image-hosting/picgo/20210315212459.png" alt="双亲委派过程图"></p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul><li>类加载器使得Java类一起具备了带有优先级的层次关系，可以避免类的重复加载（当父亲已经加载了该类时，就没有必要子、ClassLoader再加载一次）</li><li>更加安全，java核心api中定义类型不会被随意替换。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/javazejian/article/details/73413292">CSDN-zejian_</a></p><p><a href="https://blog.csdn.net/m0_38075425/article/details/81627349">超级战斗王</a></p><p><a href="https://www.bilibili.com/video/BV1iJ411d7jS?p=3">bilibili-遇见狂神说</a></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
      <tag>JVM</tag>
      
      <tag>基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/16107/"/>
    <url>/posts/16107/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>杂记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生活</tag>
      
      <tag>潦草</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
